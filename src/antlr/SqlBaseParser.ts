// Generated from src/antlr/SqlBase.g4 by ANTLR 4.9.0-SNAPSHOT

import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { FailedPredicateException } from "antlr4ts/FailedPredicateException";
import { NotNull } from "antlr4ts/Decorators";
import { NoViableAltException } from "antlr4ts/NoViableAltException";
import { Override } from "antlr4ts/Decorators";
import { Parser } from "antlr4ts/Parser";
import { ParserRuleContext } from "antlr4ts/ParserRuleContext";
import { ParserATNSimulator } from "antlr4ts/atn/ParserATNSimulator";
import { ParseTreeListener } from "antlr4ts/tree/ParseTreeListener";
import { ParseTreeVisitor } from "antlr4ts/tree/ParseTreeVisitor";
import { RecognitionException } from "antlr4ts/RecognitionException";
import { RuleContext } from "antlr4ts/RuleContext";
//import { RuleVersion } from "antlr4ts/RuleVersion";
import { TerminalNode } from "antlr4ts/tree/TerminalNode";
import { Token } from "antlr4ts/Token";
import { TokenStream } from "antlr4ts/TokenStream";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";

import { SqlBaseListener } from "./SqlBaseListener";
import { SqlBaseVisitor } from "./SqlBaseVisitor";

export class SqlBaseParser extends Parser {
  public static readonly T__0 = 1;
  public static readonly T__1 = 2;
  public static readonly T__2 = 3;
  public static readonly T__3 = 4;
  public static readonly T__4 = 5;
  public static readonly T__5 = 6;
  public static readonly T__6 = 7;
  public static readonly T__7 = 8;
  public static readonly T__8 = 9;
  public static readonly T__9 = 10;
  public static readonly T__10 = 11;
  public static readonly ADD = 12;
  public static readonly AFTER = 13;
  public static readonly ALL = 14;
  public static readonly ALTER = 15;
  public static readonly ANALYZE = 16;
  public static readonly AND = 17;
  public static readonly ANTI = 18;
  public static readonly ANY = 19;
  public static readonly ARCHIVE = 20;
  public static readonly ARRAY = 21;
  public static readonly AS = 22;
  public static readonly ASC = 23;
  public static readonly AT = 24;
  public static readonly AUTHORIZATION = 25;
  public static readonly BETWEEN = 26;
  public static readonly BOTH = 27;
  public static readonly BUCKET = 28;
  public static readonly BUCKETS = 29;
  public static readonly BY = 30;
  public static readonly CACHE = 31;
  public static readonly CASCADE = 32;
  public static readonly CASE = 33;
  public static readonly CAST = 34;
  public static readonly CHANGE = 35;
  public static readonly CHECK = 36;
  public static readonly CLEAR = 37;
  public static readonly CLUSTER = 38;
  public static readonly CLUSTERED = 39;
  public static readonly CODEGEN = 40;
  public static readonly COLLATE = 41;
  public static readonly COLLECTION = 42;
  public static readonly COLUMN = 43;
  public static readonly COLUMNS = 44;
  public static readonly COMMENT = 45;
  public static readonly COMMIT = 46;
  public static readonly COMPACT = 47;
  public static readonly COMPACTIONS = 48;
  public static readonly COMPUTE = 49;
  public static readonly CONCATENATE = 50;
  public static readonly CONSTRAINT = 51;
  public static readonly COST = 52;
  public static readonly CREATE = 53;
  public static readonly CROSS = 54;
  public static readonly CUBE = 55;
  public static readonly CURRENT = 56;
  public static readonly CURRENT_DATE = 57;
  public static readonly CURRENT_TIME = 58;
  public static readonly CURRENT_TIMESTAMP = 59;
  public static readonly CURRENT_USER = 60;
  public static readonly DAY = 61;
  public static readonly DATA = 62;
  public static readonly DATABASE = 63;
  public static readonly DATABASES = 64;
  public static readonly DBPROPERTIES = 65;
  public static readonly DEFINED = 66;
  public static readonly DELETE = 67;
  public static readonly DELIMITED = 68;
  public static readonly DESC = 69;
  public static readonly DESCRIBE = 70;
  public static readonly DFS = 71;
  public static readonly DIRECTORIES = 72;
  public static readonly DIRECTORY = 73;
  public static readonly DISTINCT = 74;
  public static readonly DISTRIBUTE = 75;
  public static readonly DIV = 76;
  public static readonly DROP = 77;
  public static readonly ELSE = 78;
  public static readonly END = 79;
  public static readonly ESCAPE = 80;
  public static readonly ESCAPED = 81;
  public static readonly EXCEPT = 82;
  public static readonly EXCHANGE = 83;
  public static readonly EXISTS = 84;
  public static readonly EXPLAIN = 85;
  public static readonly EXPORT = 86;
  public static readonly EXTENDED = 87;
  public static readonly EXTERNAL = 88;
  public static readonly EXTRACT = 89;
  public static readonly FALSE = 90;
  public static readonly FETCH = 91;
  public static readonly FIELDS = 92;
  public static readonly FILTER = 93;
  public static readonly FILEFORMAT = 94;
  public static readonly FIRST = 95;
  public static readonly FOLLOWING = 96;
  public static readonly FOR = 97;
  public static readonly FOREIGN = 98;
  public static readonly FORMAT = 99;
  public static readonly FORMATTED = 100;
  public static readonly FROM = 101;
  public static readonly FULL = 102;
  public static readonly FUNCTION = 103;
  public static readonly FUNCTIONS = 104;
  public static readonly GLOBAL = 105;
  public static readonly GRANT = 106;
  public static readonly GROUP = 107;
  public static readonly GROUPING = 108;
  public static readonly HAVING = 109;
  public static readonly HOUR = 110;
  public static readonly IF = 111;
  public static readonly IGNORE = 112;
  public static readonly IMPORT = 113;
  public static readonly IN = 114;
  public static readonly INDEX = 115;
  public static readonly INDEXES = 116;
  public static readonly INNER = 117;
  public static readonly INPATH = 118;
  public static readonly INPUTFORMAT = 119;
  public static readonly INSERT = 120;
  public static readonly INTERSECT = 121;
  public static readonly INTERVAL = 122;
  public static readonly INTO = 123;
  public static readonly IS = 124;
  public static readonly ITEMS = 125;
  public static readonly JOIN = 126;
  public static readonly KEYS = 127;
  public static readonly LAST = 128;
  public static readonly LATERAL = 129;
  public static readonly LAZY = 130;
  public static readonly LEADING = 131;
  public static readonly LEFT = 132;
  public static readonly LIKE = 133;
  public static readonly LIMIT = 134;
  public static readonly LINES = 135;
  public static readonly LIST = 136;
  public static readonly LOAD = 137;
  public static readonly LOCAL = 138;
  public static readonly LOCATION = 139;
  public static readonly LOCK = 140;
  public static readonly LOCKS = 141;
  public static readonly LOGICAL = 142;
  public static readonly MACRO = 143;
  public static readonly MAP = 144;
  public static readonly MATCHED = 145;
  public static readonly MERGE = 146;
  public static readonly MINUTE = 147;
  public static readonly MONTH = 148;
  public static readonly MSCK = 149;
  public static readonly NAMESPACE = 150;
  public static readonly NAMESPACES = 151;
  public static readonly NATURAL = 152;
  public static readonly NO = 153;
  public static readonly NOT = 154;
  public static readonly NULL = 155;
  public static readonly NULLS = 156;
  public static readonly OF = 157;
  public static readonly ON = 158;
  public static readonly ONLY = 159;
  public static readonly OPTION = 160;
  public static readonly OPTIONS = 161;
  public static readonly OR = 162;
  public static readonly ORDER = 163;
  public static readonly OUT = 164;
  public static readonly OUTER = 165;
  public static readonly OUTPUTFORMAT = 166;
  public static readonly OVER = 167;
  public static readonly OVERLAPS = 168;
  public static readonly OVERLAY = 169;
  public static readonly OVERWRITE = 170;
  public static readonly PARTITION = 171;
  public static readonly PARTITIONED = 172;
  public static readonly PARTITIONS = 173;
  public static readonly PERCENTLIT = 174;
  public static readonly PIVOT = 175;
  public static readonly PLACING = 176;
  public static readonly POSITION = 177;
  public static readonly PRECEDING = 178;
  public static readonly PRIMARY = 179;
  public static readonly PRINCIPALS = 180;
  public static readonly PROPERTIES = 181;
  public static readonly PURGE = 182;
  public static readonly QUERY = 183;
  public static readonly RANGE = 184;
  public static readonly RECORDREADER = 185;
  public static readonly RECORDWRITER = 186;
  public static readonly RECOVER = 187;
  public static readonly REDUCE = 188;
  public static readonly REFERENCES = 189;
  public static readonly REFRESH = 190;
  public static readonly RENAME = 191;
  public static readonly REPAIR = 192;
  public static readonly REPLACE = 193;
  public static readonly RESET = 194;
  public static readonly RESPECT = 195;
  public static readonly RESTRICT = 196;
  public static readonly REVOKE = 197;
  public static readonly RIGHT = 198;
  public static readonly RLIKE = 199;
  public static readonly ROLE = 200;
  public static readonly ROLES = 201;
  public static readonly ROLLBACK = 202;
  public static readonly ROLLUP = 203;
  public static readonly ROW = 204;
  public static readonly ROWS = 205;
  public static readonly SECOND = 206;
  public static readonly SCHEMA = 207;
  public static readonly SELECT = 208;
  public static readonly SEMI = 209;
  public static readonly SEPARATED = 210;
  public static readonly SERDE = 211;
  public static readonly SERDEPROPERTIES = 212;
  public static readonly SESSION_USER = 213;
  public static readonly SET = 214;
  public static readonly SETMINUS = 215;
  public static readonly SETS = 216;
  public static readonly SHOW = 217;
  public static readonly SKEWED = 218;
  public static readonly SOME = 219;
  public static readonly SORT = 220;
  public static readonly SORTED = 221;
  public static readonly START = 222;
  public static readonly STATISTICS = 223;
  public static readonly STORED = 224;
  public static readonly STRATIFY = 225;
  public static readonly STRUCT = 226;
  public static readonly SUBSTR = 227;
  public static readonly SUBSTRING = 228;
  public static readonly SYNC = 229;
  public static readonly TABLE = 230;
  public static readonly TABLES = 231;
  public static readonly TABLESAMPLE = 232;
  public static readonly TBLPROPERTIES = 233;
  public static readonly TEMPORARY = 234;
  public static readonly TERMINATED = 235;
  public static readonly THEN = 236;
  public static readonly TIME = 237;
  public static readonly TO = 238;
  public static readonly TOUCH = 239;
  public static readonly TRAILING = 240;
  public static readonly TRANSACTION = 241;
  public static readonly TRANSACTIONS = 242;
  public static readonly TRANSFORM = 243;
  public static readonly TRIM = 244;
  public static readonly TRUE = 245;
  public static readonly TRUNCATE = 246;
  public static readonly TRY_CAST = 247;
  public static readonly TYPE = 248;
  public static readonly UNARCHIVE = 249;
  public static readonly UNBOUNDED = 250;
  public static readonly UNCACHE = 251;
  public static readonly UNION = 252;
  public static readonly UNIQUE = 253;
  public static readonly UNKNOWN = 254;
  public static readonly UNLOCK = 255;
  public static readonly UNSET = 256;
  public static readonly UPDATE = 257;
  public static readonly USE = 258;
  public static readonly USER = 259;
  public static readonly USING = 260;
  public static readonly VALUES = 261;
  public static readonly VIEW = 262;
  public static readonly VIEWS = 263;
  public static readonly WHEN = 264;
  public static readonly WHERE = 265;
  public static readonly WINDOW = 266;
  public static readonly WITH = 267;
  public static readonly YEAR = 268;
  public static readonly ZONE = 269;
  public static readonly EQ = 270;
  public static readonly NSEQ = 271;
  public static readonly NEQ = 272;
  public static readonly NEQJ = 273;
  public static readonly LT = 274;
  public static readonly LTE = 275;
  public static readonly GT = 276;
  public static readonly GTE = 277;
  public static readonly PLUS = 278;
  public static readonly MINUS = 279;
  public static readonly ASTERISK = 280;
  public static readonly SLASH = 281;
  public static readonly PERCENT = 282;
  public static readonly TILDE = 283;
  public static readonly AMPERSAND = 284;
  public static readonly PIPE = 285;
  public static readonly CONCAT_PIPE = 286;
  public static readonly HAT = 287;
  public static readonly DOUBLE_COLON = 288;
  public static readonly STRING = 289;
  public static readonly BIGINT_LITERAL = 290;
  public static readonly SMALLINT_LITERAL = 291;
  public static readonly TINYINT_LITERAL = 292;
  public static readonly INTEGER_VALUE = 293;
  public static readonly EXPONENT_VALUE = 294;
  public static readonly DECIMAL_VALUE = 295;
  public static readonly FLOAT_LITERAL = 296;
  public static readonly DOUBLE_LITERAL = 297;
  public static readonly BIGDECIMAL_LITERAL = 298;
  public static readonly IDENTIFIER = 299;
  public static readonly BACKQUOTED_IDENTIFIER = 300;
  public static readonly DOUBLEQUOTED_IDENTIFIER = 301;
  public static readonly SIMPLE_COMMENT = 302;
  public static readonly BRACKETED_COMMENT = 303;
  public static readonly WS = 304;
  public static readonly UNRECOGNIZED = 305;
  public static readonly RULE_singleStatement = 0;
  public static readonly RULE_singleExpression = 1;
  public static readonly RULE_singleTableIdentifier = 2;
  public static readonly RULE_singleMultipartIdentifier = 3;
  public static readonly RULE_singleFunctionIdentifier = 4;
  public static readonly RULE_singleDataType = 5;
  public static readonly RULE_singleTableSchema = 6;
  public static readonly RULE_statement = 7;
  public static readonly RULE_configKey = 8;
  public static readonly RULE_configValue = 9;
  public static readonly RULE_unsupportedHiveNativeCommands = 10;
  public static readonly RULE_createTableHeader = 11;
  public static readonly RULE_replaceTableHeader = 12;
  public static readonly RULE_bucketSpec = 13;
  public static readonly RULE_skewSpec = 14;
  public static readonly RULE_locationSpec = 15;
  public static readonly RULE_commentSpec = 16;
  public static readonly RULE_query = 17;
  public static readonly RULE_insertInto = 18;
  public static readonly RULE_partitionSpecLocation = 19;
  public static readonly RULE_partitionSpec = 20;
  public static readonly RULE_partitionVal = 21;
  public static readonly RULE_namespace = 22;
  public static readonly RULE_describeFuncName = 23;
  public static readonly RULE_describeColName = 24;
  public static readonly RULE_ctes = 25;
  public static readonly RULE_namedQuery = 26;
  public static readonly RULE_tableProvider = 27;
  public static readonly RULE_createTableClauses = 28;
  public static readonly RULE_tablePropertyList = 29;
  public static readonly RULE_tableProperty = 30;
  public static readonly RULE_tablePropertyKey = 31;
  public static readonly RULE_tablePropertyValue = 32;
  public static readonly RULE_constantList = 33;
  public static readonly RULE_nestedConstantList = 34;
  public static readonly RULE_createFileFormat = 35;
  public static readonly RULE_fileFormat = 36;
  public static readonly RULE_storageHandler = 37;
  public static readonly RULE_resource = 38;
  public static readonly RULE_dmlStatementNoWith = 39;
  public static readonly RULE_queryOrganization = 40;
  public static readonly RULE_multiInsertQueryBody = 41;
  public static readonly RULE_queryTerm = 42;
  public static readonly RULE_queryPrimary = 43;
  public static readonly RULE_sortItem = 44;
  public static readonly RULE_fromStatement = 45;
  public static readonly RULE_fromStatementBody = 46;
  public static readonly RULE_querySpecification = 47;
  public static readonly RULE_transformClause = 48;
  public static readonly RULE_selectClause = 49;
  public static readonly RULE_setClause = 50;
  public static readonly RULE_matchedClause = 51;
  public static readonly RULE_notMatchedClause = 52;
  public static readonly RULE_matchedAction = 53;
  public static readonly RULE_notMatchedAction = 54;
  public static readonly RULE_assignmentList = 55;
  public static readonly RULE_assignment = 56;
  public static readonly RULE_whereClause = 57;
  public static readonly RULE_havingClause = 58;
  public static readonly RULE_hint = 59;
  public static readonly RULE_hintStatement = 60;
  public static readonly RULE_fromClause = 61;
  public static readonly RULE_aggregationClause = 62;
  public static readonly RULE_groupByClause = 63;
  public static readonly RULE_groupingAnalytics = 64;
  public static readonly RULE_groupingElement = 65;
  public static readonly RULE_groupingSet = 66;
  public static readonly RULE_pivotClause = 67;
  public static readonly RULE_pivotColumn = 68;
  public static readonly RULE_pivotValue = 69;
  public static readonly RULE_lateralView = 70;
  public static readonly RULE_setQuantifier = 71;
  public static readonly RULE_relation = 72;
  public static readonly RULE_joinRelation = 73;
  public static readonly RULE_joinType = 74;
  public static readonly RULE_joinCriteria = 75;
  public static readonly RULE_sample = 76;
  public static readonly RULE_sampleMethod = 77;
  public static readonly RULE_identifierList = 78;
  public static readonly RULE_identifierSeq = 79;
  public static readonly RULE_orderedIdentifierList = 80;
  public static readonly RULE_orderedIdentifier = 81;
  public static readonly RULE_identifierCommentList = 82;
  public static readonly RULE_identifierComment = 83;
  public static readonly RULE_relationPrimary = 84;
  public static readonly RULE_inlineTable = 85;
  public static readonly RULE_functionTable = 86;
  public static readonly RULE_tableAlias = 87;
  public static readonly RULE_rowFormat = 88;
  public static readonly RULE_multipartIdentifierList = 89;
  public static readonly RULE_multipartIdentifier = 90;
  public static readonly RULE_tableIdentifier = 91;
  public static readonly RULE_functionIdentifier = 92;
  public static readonly RULE_namedExpression = 93;
  public static readonly RULE_namedExpressionSeq = 94;
  public static readonly RULE_partitionFieldList = 95;
  public static readonly RULE_partitionField = 96;
  public static readonly RULE_transform = 97;
  public static readonly RULE_transformArgument = 98;
  public static readonly RULE_expression = 99;
  public static readonly RULE_expressionSeq = 100;
  public static readonly RULE_booleanExpression = 101;
  public static readonly RULE_predicate = 102;
  public static readonly RULE_valueExpression = 103;
  public static readonly RULE_primaryExpression = 104;
  public static readonly RULE_constant = 105;
  public static readonly RULE_comparisonOperator = 106;
  public static readonly RULE_arithmeticOperator = 107;
  public static readonly RULE_predicateOperator = 108;
  public static readonly RULE_booleanValue = 109;
  public static readonly RULE_interval = 110;
  public static readonly RULE_errorCapturingMultiUnitsInterval = 111;
  public static readonly RULE_multiUnitsInterval = 112;
  public static readonly RULE_errorCapturingUnitToUnitInterval = 113;
  public static readonly RULE_unitToUnitInterval = 114;
  public static readonly RULE_intervalValue = 115;
  public static readonly RULE_colPosition = 116;
  public static readonly RULE_dataType = 117;
  public static readonly RULE_qualifiedColTypeWithPositionList = 118;
  public static readonly RULE_qualifiedColTypeWithPosition = 119;
  public static readonly RULE_colTypeList = 120;
  public static readonly RULE_colType = 121;
  public static readonly RULE_complexColTypeList = 122;
  public static readonly RULE_complexColType = 123;
  public static readonly RULE_whenClause = 124;
  public static readonly RULE_windowClause = 125;
  public static readonly RULE_namedWindow = 126;
  public static readonly RULE_windowSpec = 127;
  public static readonly RULE_windowFrame = 128;
  public static readonly RULE_frameBound = 129;
  public static readonly RULE_qualifiedNameList = 130;
  public static readonly RULE_functionName = 131;
  public static readonly RULE_qualifiedName = 132;
  public static readonly RULE_errorCapturingIdentifier = 133;
  public static readonly RULE_errorCapturingIdentifierExtra = 134;
  public static readonly RULE_identifier = 135;
  public static readonly RULE_strictIdentifier = 136;
  public static readonly RULE_quotedIdentifier = 137;
  public static readonly RULE_number = 138;
  public static readonly RULE_alterColumnAction = 139;
  public static readonly RULE_ansiNonReserved = 140;
  public static readonly RULE_strictNonReserved = 141;
  public static readonly RULE_nonReserved = 142;
  // tslint:disable:no-trailing-whitespace
  public static readonly ruleNames: string[] = [
    "singleStatement",
    "singleExpression",
    "singleTableIdentifier",
    "singleMultipartIdentifier",
    "singleFunctionIdentifier",
    "singleDataType",
    "singleTableSchema",
    "statement",
    "configKey",
    "configValue",
    "unsupportedHiveNativeCommands",
    "createTableHeader",
    "replaceTableHeader",
    "bucketSpec",
    "skewSpec",
    "locationSpec",
    "commentSpec",
    "query",
    "insertInto",
    "partitionSpecLocation",
    "partitionSpec",
    "partitionVal",
    "namespace",
    "describeFuncName",
    "describeColName",
    "ctes",
    "namedQuery",
    "tableProvider",
    "createTableClauses",
    "tablePropertyList",
    "tableProperty",
    "tablePropertyKey",
    "tablePropertyValue",
    "constantList",
    "nestedConstantList",
    "createFileFormat",
    "fileFormat",
    "storageHandler",
    "resource",
    "dmlStatementNoWith",
    "queryOrganization",
    "multiInsertQueryBody",
    "queryTerm",
    "queryPrimary",
    "sortItem",
    "fromStatement",
    "fromStatementBody",
    "querySpecification",
    "transformClause",
    "selectClause",
    "setClause",
    "matchedClause",
    "notMatchedClause",
    "matchedAction",
    "notMatchedAction",
    "assignmentList",
    "assignment",
    "whereClause",
    "havingClause",
    "hint",
    "hintStatement",
    "fromClause",
    "aggregationClause",
    "groupByClause",
    "groupingAnalytics",
    "groupingElement",
    "groupingSet",
    "pivotClause",
    "pivotColumn",
    "pivotValue",
    "lateralView",
    "setQuantifier",
    "relation",
    "joinRelation",
    "joinType",
    "joinCriteria",
    "sample",
    "sampleMethod",
    "identifierList",
    "identifierSeq",
    "orderedIdentifierList",
    "orderedIdentifier",
    "identifierCommentList",
    "identifierComment",
    "relationPrimary",
    "inlineTable",
    "functionTable",
    "tableAlias",
    "rowFormat",
    "multipartIdentifierList",
    "multipartIdentifier",
    "tableIdentifier",
    "functionIdentifier",
    "namedExpression",
    "namedExpressionSeq",
    "partitionFieldList",
    "partitionField",
    "transform",
    "transformArgument",
    "expression",
    "expressionSeq",
    "booleanExpression",
    "predicate",
    "valueExpression",
    "primaryExpression",
    "constant",
    "comparisonOperator",
    "arithmeticOperator",
    "predicateOperator",
    "booleanValue",
    "interval",
    "errorCapturingMultiUnitsInterval",
    "multiUnitsInterval",
    "errorCapturingUnitToUnitInterval",
    "unitToUnitInterval",
    "intervalValue",
    "colPosition",
    "dataType",
    "qualifiedColTypeWithPositionList",
    "qualifiedColTypeWithPosition",
    "colTypeList",
    "colType",
    "complexColTypeList",
    "complexColType",
    "whenClause",
    "windowClause",
    "namedWindow",
    "windowSpec",
    "windowFrame",
    "frameBound",
    "qualifiedNameList",
    "functionName",
    "qualifiedName",
    "errorCapturingIdentifier",
    "errorCapturingIdentifierExtra",
    "identifier",
    "strictIdentifier",
    "quotedIdentifier",
    "number",
    "alterColumnAction",
    "ansiNonReserved",
    "strictNonReserved",
    "nonReserved"
  ];

  private static readonly _LITERAL_NAMES: Array<string | undefined> = [
    undefined,
    "';'",
    "'('",
    "')'",
    "','",
    "'.'",
    "'/*+'",
    "'*/'",
    "'->'",
    "'['",
    "']'",
    "':'",
    "'ADD'",
    "'AFTER'",
    "'ALL'",
    "'ALTER'",
    "'ANALYZE'",
    "'AND'",
    "'ANTI'",
    "'ANY'",
    "'ARCHIVE'",
    "'ARRAY'",
    "'AS'",
    "'ASC'",
    "'AT'",
    "'AUTHORIZATION'",
    "'BETWEEN'",
    "'BOTH'",
    "'BUCKET'",
    "'BUCKETS'",
    "'BY'",
    "'CACHE'",
    "'CASCADE'",
    "'CASE'",
    "'CAST'",
    "'CHANGE'",
    "'CHECK'",
    "'CLEAR'",
    "'CLUSTER'",
    "'CLUSTERED'",
    "'CODEGEN'",
    "'COLLATE'",
    "'COLLECTION'",
    "'COLUMN'",
    "'COLUMNS'",
    "'COMMENT'",
    "'COMMIT'",
    "'COMPACT'",
    "'COMPACTIONS'",
    "'COMPUTE'",
    "'CONCATENATE'",
    "'CONSTRAINT'",
    "'COST'",
    "'CREATE'",
    "'CROSS'",
    "'CUBE'",
    "'CURRENT'",
    "'CURRENT_DATE'",
    "'CURRENT_TIME'",
    "'CURRENT_TIMESTAMP'",
    "'CURRENT_USER'",
    "'DAY'",
    "'DATA'",
    "'DATABASE'",
    undefined,
    "'DBPROPERTIES'",
    "'DEFINED'",
    "'DELETE'",
    "'DELIMITED'",
    "'DESC'",
    "'DESCRIBE'",
    "'DFS'",
    "'DIRECTORIES'",
    "'DIRECTORY'",
    "'DISTINCT'",
    "'DISTRIBUTE'",
    "'DIV'",
    "'DROP'",
    "'ELSE'",
    "'END'",
    "'ESCAPE'",
    "'ESCAPED'",
    "'EXCEPT'",
    "'EXCHANGE'",
    "'EXISTS'",
    "'EXPLAIN'",
    "'EXPORT'",
    "'EXTENDED'",
    "'EXTERNAL'",
    "'EXTRACT'",
    "'FALSE'",
    "'FETCH'",
    "'FIELDS'",
    "'FILTER'",
    "'FILEFORMAT'",
    "'FIRST'",
    "'FOLLOWING'",
    "'FOR'",
    "'FOREIGN'",
    "'FORMAT'",
    "'FORMATTED'",
    "'FROM'",
    "'FULL'",
    "'FUNCTION'",
    "'FUNCTIONS'",
    "'GLOBAL'",
    "'GRANT'",
    "'GROUP'",
    "'GROUPING'",
    "'HAVING'",
    "'HOUR'",
    "'IF'",
    "'IGNORE'",
    "'IMPORT'",
    "'IN'",
    "'INDEX'",
    "'INDEXES'",
    "'INNER'",
    "'INPATH'",
    "'INPUTFORMAT'",
    "'INSERT'",
    "'INTERSECT'",
    "'INTERVAL'",
    "'INTO'",
    "'IS'",
    "'ITEMS'",
    "'JOIN'",
    "'KEYS'",
    "'LAST'",
    "'LATERAL'",
    "'LAZY'",
    "'LEADING'",
    "'LEFT'",
    "'LIKE'",
    "'LIMIT'",
    "'LINES'",
    "'LIST'",
    "'LOAD'",
    "'LOCAL'",
    "'LOCATION'",
    "'LOCK'",
    "'LOCKS'",
    "'LOGICAL'",
    "'MACRO'",
    "'MAP'",
    "'MATCHED'",
    "'MERGE'",
    "'MINUTE'",
    "'MONTH'",
    "'MSCK'",
    "'NAMESPACE'",
    "'NAMESPACES'",
    "'NATURAL'",
    "'NO'",
    undefined,
    "'NULL'",
    "'NULLS'",
    "'OF'",
    "'ON'",
    "'ONLY'",
    "'OPTION'",
    "'OPTIONS'",
    "'OR'",
    "'ORDER'",
    "'OUT'",
    "'OUTER'",
    "'OUTPUTFORMAT'",
    "'OVER'",
    "'OVERLAPS'",
    "'OVERLAY'",
    "'OVERWRITE'",
    "'PARTITION'",
    "'PARTITIONED'",
    "'PARTITIONS'",
    "'PERCENT'",
    "'PIVOT'",
    "'PLACING'",
    "'POSITION'",
    "'PRECEDING'",
    "'PRIMARY'",
    "'PRINCIPALS'",
    "'PROPERTIES'",
    "'PURGE'",
    "'QUERY'",
    "'RANGE'",
    "'RECORDREADER'",
    "'RECORDWRITER'",
    "'RECOVER'",
    "'REDUCE'",
    "'REFERENCES'",
    "'REFRESH'",
    "'RENAME'",
    "'REPAIR'",
    "'REPLACE'",
    "'RESET'",
    "'RESPECT'",
    "'RESTRICT'",
    "'REVOKE'",
    "'RIGHT'",
    undefined,
    "'ROLE'",
    "'ROLES'",
    "'ROLLBACK'",
    "'ROLLUP'",
    "'ROW'",
    "'ROWS'",
    "'SECOND'",
    "'SCHEMA'",
    "'SELECT'",
    "'SEMI'",
    "'SEPARATED'",
    "'SERDE'",
    "'SERDEPROPERTIES'",
    "'SESSION_USER'",
    "'SET'",
    "'MINUS'",
    "'SETS'",
    "'SHOW'",
    "'SKEWED'",
    "'SOME'",
    "'SORT'",
    "'SORTED'",
    "'START'",
    "'STATISTICS'",
    "'STORED'",
    "'STRATIFY'",
    "'STRUCT'",
    "'SUBSTR'",
    "'SUBSTRING'",
    "'SYNC'",
    "'TABLE'",
    "'TABLES'",
    "'TABLESAMPLE'",
    "'TBLPROPERTIES'",
    undefined,
    "'TERMINATED'",
    "'THEN'",
    "'TIME'",
    "'TO'",
    "'TOUCH'",
    "'TRAILING'",
    "'TRANSACTION'",
    "'TRANSACTIONS'",
    "'TRANSFORM'",
    "'TRIM'",
    "'TRUE'",
    "'TRUNCATE'",
    "'TRY_CAST'",
    "'TYPE'",
    "'UNARCHIVE'",
    "'UNBOUNDED'",
    "'UNCACHE'",
    "'UNION'",
    "'UNIQUE'",
    "'UNKNOWN'",
    "'UNLOCK'",
    "'UNSET'",
    "'UPDATE'",
    "'USE'",
    "'USER'",
    "'USING'",
    "'VALUES'",
    "'VIEW'",
    "'VIEWS'",
    "'WHEN'",
    "'WHERE'",
    "'WINDOW'",
    "'WITH'",
    "'YEAR'",
    "'ZONE'",
    undefined,
    "'<=>'",
    "'<>'",
    "'!='",
    "'<'",
    undefined,
    "'>'",
    undefined,
    "'+'",
    "'-'",
    "'*'",
    "'/'",
    "'%'",
    "'~'",
    "'&'",
    "'|'",
    "'||'",
    "'^'",
    "'::'"
  ];
  private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "ADD",
    "AFTER",
    "ALL",
    "ALTER",
    "ANALYZE",
    "AND",
    "ANTI",
    "ANY",
    "ARCHIVE",
    "ARRAY",
    "AS",
    "ASC",
    "AT",
    "AUTHORIZATION",
    "BETWEEN",
    "BOTH",
    "BUCKET",
    "BUCKETS",
    "BY",
    "CACHE",
    "CASCADE",
    "CASE",
    "CAST",
    "CHANGE",
    "CHECK",
    "CLEAR",
    "CLUSTER",
    "CLUSTERED",
    "CODEGEN",
    "COLLATE",
    "COLLECTION",
    "COLUMN",
    "COLUMNS",
    "COMMENT",
    "COMMIT",
    "COMPACT",
    "COMPACTIONS",
    "COMPUTE",
    "CONCATENATE",
    "CONSTRAINT",
    "COST",
    "CREATE",
    "CROSS",
    "CUBE",
    "CURRENT",
    "CURRENT_DATE",
    "CURRENT_TIME",
    "CURRENT_TIMESTAMP",
    "CURRENT_USER",
    "DAY",
    "DATA",
    "DATABASE",
    "DATABASES",
    "DBPROPERTIES",
    "DEFINED",
    "DELETE",
    "DELIMITED",
    "DESC",
    "DESCRIBE",
    "DFS",
    "DIRECTORIES",
    "DIRECTORY",
    "DISTINCT",
    "DISTRIBUTE",
    "DIV",
    "DROP",
    "ELSE",
    "END",
    "ESCAPE",
    "ESCAPED",
    "EXCEPT",
    "EXCHANGE",
    "EXISTS",
    "EXPLAIN",
    "EXPORT",
    "EXTENDED",
    "EXTERNAL",
    "EXTRACT",
    "FALSE",
    "FETCH",
    "FIELDS",
    "FILTER",
    "FILEFORMAT",
    "FIRST",
    "FOLLOWING",
    "FOR",
    "FOREIGN",
    "FORMAT",
    "FORMATTED",
    "FROM",
    "FULL",
    "FUNCTION",
    "FUNCTIONS",
    "GLOBAL",
    "GRANT",
    "GROUP",
    "GROUPING",
    "HAVING",
    "HOUR",
    "IF",
    "IGNORE",
    "IMPORT",
    "IN",
    "INDEX",
    "INDEXES",
    "INNER",
    "INPATH",
    "INPUTFORMAT",
    "INSERT",
    "INTERSECT",
    "INTERVAL",
    "INTO",
    "IS",
    "ITEMS",
    "JOIN",
    "KEYS",
    "LAST",
    "LATERAL",
    "LAZY",
    "LEADING",
    "LEFT",
    "LIKE",
    "LIMIT",
    "LINES",
    "LIST",
    "LOAD",
    "LOCAL",
    "LOCATION",
    "LOCK",
    "LOCKS",
    "LOGICAL",
    "MACRO",
    "MAP",
    "MATCHED",
    "MERGE",
    "MINUTE",
    "MONTH",
    "MSCK",
    "NAMESPACE",
    "NAMESPACES",
    "NATURAL",
    "NO",
    "NOT",
    "NULL",
    "NULLS",
    "OF",
    "ON",
    "ONLY",
    "OPTION",
    "OPTIONS",
    "OR",
    "ORDER",
    "OUT",
    "OUTER",
    "OUTPUTFORMAT",
    "OVER",
    "OVERLAPS",
    "OVERLAY",
    "OVERWRITE",
    "PARTITION",
    "PARTITIONED",
    "PARTITIONS",
    "PERCENTLIT",
    "PIVOT",
    "PLACING",
    "POSITION",
    "PRECEDING",
    "PRIMARY",
    "PRINCIPALS",
    "PROPERTIES",
    "PURGE",
    "QUERY",
    "RANGE",
    "RECORDREADER",
    "RECORDWRITER",
    "RECOVER",
    "REDUCE",
    "REFERENCES",
    "REFRESH",
    "RENAME",
    "REPAIR",
    "REPLACE",
    "RESET",
    "RESPECT",
    "RESTRICT",
    "REVOKE",
    "RIGHT",
    "RLIKE",
    "ROLE",
    "ROLES",
    "ROLLBACK",
    "ROLLUP",
    "ROW",
    "ROWS",
    "SECOND",
    "SCHEMA",
    "SELECT",
    "SEMI",
    "SEPARATED",
    "SERDE",
    "SERDEPROPERTIES",
    "SESSION_USER",
    "SET",
    "SETMINUS",
    "SETS",
    "SHOW",
    "SKEWED",
    "SOME",
    "SORT",
    "SORTED",
    "START",
    "STATISTICS",
    "STORED",
    "STRATIFY",
    "STRUCT",
    "SUBSTR",
    "SUBSTRING",
    "SYNC",
    "TABLE",
    "TABLES",
    "TABLESAMPLE",
    "TBLPROPERTIES",
    "TEMPORARY",
    "TERMINATED",
    "THEN",
    "TIME",
    "TO",
    "TOUCH",
    "TRAILING",
    "TRANSACTION",
    "TRANSACTIONS",
    "TRANSFORM",
    "TRIM",
    "TRUE",
    "TRUNCATE",
    "TRY_CAST",
    "TYPE",
    "UNARCHIVE",
    "UNBOUNDED",
    "UNCACHE",
    "UNION",
    "UNIQUE",
    "UNKNOWN",
    "UNLOCK",
    "UNSET",
    "UPDATE",
    "USE",
    "USER",
    "USING",
    "VALUES",
    "VIEW",
    "VIEWS",
    "WHEN",
    "WHERE",
    "WINDOW",
    "WITH",
    "YEAR",
    "ZONE",
    "EQ",
    "NSEQ",
    "NEQ",
    "NEQJ",
    "LT",
    "LTE",
    "GT",
    "GTE",
    "PLUS",
    "MINUS",
    "ASTERISK",
    "SLASH",
    "PERCENT",
    "TILDE",
    "AMPERSAND",
    "PIPE",
    "CONCAT_PIPE",
    "HAT",
    "DOUBLE_COLON",
    "STRING",
    "BIGINT_LITERAL",
    "SMALLINT_LITERAL",
    "TINYINT_LITERAL",
    "INTEGER_VALUE",
    "EXPONENT_VALUE",
    "DECIMAL_VALUE",
    "FLOAT_LITERAL",
    "DOUBLE_LITERAL",
    "BIGDECIMAL_LITERAL",
    "IDENTIFIER",
    "BACKQUOTED_IDENTIFIER",
    "DOUBLEQUOTED_IDENTIFIER",
    "SIMPLE_COMMENT",
    "BRACKETED_COMMENT",
    "WS",
    "UNRECOGNIZED"
  ];
  public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(
    SqlBaseParser._LITERAL_NAMES,
    SqlBaseParser._SYMBOLIC_NAMES,
    []
  );

  // @Override
  // @NotNull
  public get vocabulary(): Vocabulary {
    return SqlBaseParser.VOCABULARY;
  }
  // tslint:enable:no-trailing-whitespace

  // @Override
  public get grammarFileName(): string {
    return "SqlBase.g4";
  }

  // @Override
  public get ruleNames(): string[] {
    return SqlBaseParser.ruleNames;
  }

  // @Override
  public get serializedATN(): string {
    return SqlBaseParser._serializedATN;
  }

  protected createFailedPredicateException(predicate?: string, message?: string): FailedPredicateException {
    return new FailedPredicateException(this, predicate, message);
  }

  public backquoted_identifier = true;
  public doublequoted_identifier = false;

  /**
   * When false, INTERSECT is given the greater precedence over the other set
   * operations (UNION, EXCEPT and MINUS) as per the SQL standard.
   */
  public legacy_setops_precedence_enabled = false;

  /**
   * When false, a literal with an exponent would be converted into
   * double type rather than decimal type.
   */
  public legacy_exponent_literal_as_decimal_enabled = false;

  /**
   * When true, the behavior of keywords follows ANSI SQL standard.
   */
  public SQL_standard_keyword_behavior = true;

  constructor(input: TokenStream) {
    super(input);
    this._interp = new ParserATNSimulator(SqlBaseParser._ATN, this);
  }
  // @RuleVersion(0)
  public singleStatement(): SingleStatementContext {
    const _localctx: SingleStatementContext = new SingleStatementContext(this._ctx, this.state);
    this.enterRule(_localctx, 0, SqlBaseParser.RULE_singleStatement);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 286;
        this.statement();
        this.state = 290;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === SqlBaseParser.T__0) {
          {
            {
              this.state = 287;
              this.match(SqlBaseParser.T__0);
            }
          }
          this.state = 292;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
        this.state = 293;
        this.match(SqlBaseParser.EOF);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public singleExpression(): SingleExpressionContext {
    const _localctx: SingleExpressionContext = new SingleExpressionContext(this._ctx, this.state);
    this.enterRule(_localctx, 2, SqlBaseParser.RULE_singleExpression);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 295;
        this.namedExpression();
        this.state = 296;
        this.match(SqlBaseParser.EOF);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public singleTableIdentifier(): SingleTableIdentifierContext {
    const _localctx: SingleTableIdentifierContext = new SingleTableIdentifierContext(this._ctx, this.state);
    this.enterRule(_localctx, 4, SqlBaseParser.RULE_singleTableIdentifier);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 298;
        this.tableIdentifier();
        this.state = 299;
        this.match(SqlBaseParser.EOF);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public singleMultipartIdentifier(): SingleMultipartIdentifierContext {
    const _localctx: SingleMultipartIdentifierContext = new SingleMultipartIdentifierContext(this._ctx, this.state);
    this.enterRule(_localctx, 6, SqlBaseParser.RULE_singleMultipartIdentifier);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 301;
        this.multipartIdentifier();
        this.state = 302;
        this.match(SqlBaseParser.EOF);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public singleFunctionIdentifier(): SingleFunctionIdentifierContext {
    const _localctx: SingleFunctionIdentifierContext = new SingleFunctionIdentifierContext(this._ctx, this.state);
    this.enterRule(_localctx, 8, SqlBaseParser.RULE_singleFunctionIdentifier);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 304;
        this.functionIdentifier();
        this.state = 305;
        this.match(SqlBaseParser.EOF);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public singleDataType(): SingleDataTypeContext {
    const _localctx: SingleDataTypeContext = new SingleDataTypeContext(this._ctx, this.state);
    this.enterRule(_localctx, 10, SqlBaseParser.RULE_singleDataType);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 307;
        this.dataType();
        this.state = 308;
        this.match(SqlBaseParser.EOF);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public singleTableSchema(): SingleTableSchemaContext {
    const _localctx: SingleTableSchemaContext = new SingleTableSchemaContext(this._ctx, this.state);
    this.enterRule(_localctx, 12, SqlBaseParser.RULE_singleTableSchema);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 310;
        this.colTypeList();
        this.state = 311;
        this.match(SqlBaseParser.EOF);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public statement(): StatementContext {
    let _localctx: StatementContext = new StatementContext(this._ctx, this.state);
    this.enterRule(_localctx, 14, SqlBaseParser.RULE_statement);
    let _la: number;
    try {
      let _alt: number;
      this.state = 1050;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 109, this._ctx)) {
        case 1:
          _localctx = new StatementDefaultContext(_localctx);
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 313;
            this.query();
          }
          break;

        case 2:
          _localctx = new DmlStatementContext(_localctx);
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 315;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.WITH) {
              {
                this.state = 314;
                this.ctes();
              }
            }

            this.state = 317;
            this.dmlStatementNoWith();
          }
          break;

        case 3:
          _localctx = new UseContext(_localctx);
          this.enterOuterAlt(_localctx, 3);
          {
            this.state = 318;
            this.match(SqlBaseParser.USE);
            this.state = 320;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 2, this._ctx)) {
              case 1:
                {
                  this.state = 319;
                  this.match(SqlBaseParser.NAMESPACE);
                }
                break;
            }
            this.state = 322;
            this.multipartIdentifier();
          }
          break;

        case 4:
          _localctx = new CreateNamespaceContext(_localctx);
          this.enterOuterAlt(_localctx, 4);
          {
            this.state = 323;
            this.match(SqlBaseParser.CREATE);
            this.state = 324;
            this.namespace();
            this.state = 328;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 3, this._ctx)) {
              case 1:
                {
                  this.state = 325;
                  this.match(SqlBaseParser.IF);
                  this.state = 326;
                  this.match(SqlBaseParser.NOT);
                  this.state = 327;
                  this.match(SqlBaseParser.EXISTS);
                }
                break;
            }
            this.state = 330;
            this.multipartIdentifier();
            this.state = 338;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === SqlBaseParser.COMMENT || _la === SqlBaseParser.LOCATION || _la === SqlBaseParser.WITH) {
              {
                this.state = 336;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                  case SqlBaseParser.COMMENT:
                    {
                      this.state = 331;
                      this.commentSpec();
                    }
                    break;
                  case SqlBaseParser.LOCATION:
                    {
                      this.state = 332;
                      this.locationSpec();
                    }
                    break;
                  case SqlBaseParser.WITH:
                    {
                      {
                        this.state = 333;
                        this.match(SqlBaseParser.WITH);
                        this.state = 334;
                        _la = this._input.LA(1);
                        if (!(_la === SqlBaseParser.DBPROPERTIES || _la === SqlBaseParser.PROPERTIES)) {
                          this._errHandler.recoverInline(this);
                        } else {
                          if (this._input.LA(1) === Token.EOF) {
                            this.matchedEOF = true;
                          }

                          this._errHandler.reportMatch(this);
                          this.consume();
                        }
                        this.state = 335;
                        this.tablePropertyList();
                      }
                    }
                    break;
                  default:
                    throw new NoViableAltException(this);
                }
              }
              this.state = 340;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
            }
          }
          break;

        case 5:
          _localctx = new SetNamespacePropertiesContext(_localctx);
          this.enterOuterAlt(_localctx, 5);
          {
            this.state = 341;
            this.match(SqlBaseParser.ALTER);
            this.state = 342;
            this.namespace();
            this.state = 343;
            this.multipartIdentifier();
            this.state = 344;
            this.match(SqlBaseParser.SET);
            this.state = 345;
            _la = this._input.LA(1);
            if (!(_la === SqlBaseParser.DBPROPERTIES || _la === SqlBaseParser.PROPERTIES)) {
              this._errHandler.recoverInline(this);
            } else {
              if (this._input.LA(1) === Token.EOF) {
                this.matchedEOF = true;
              }

              this._errHandler.reportMatch(this);
              this.consume();
            }
            this.state = 346;
            this.tablePropertyList();
          }
          break;

        case 6:
          _localctx = new SetNamespaceLocationContext(_localctx);
          this.enterOuterAlt(_localctx, 6);
          {
            this.state = 348;
            this.match(SqlBaseParser.ALTER);
            this.state = 349;
            this.namespace();
            this.state = 350;
            this.multipartIdentifier();
            this.state = 351;
            this.match(SqlBaseParser.SET);
            this.state = 352;
            this.locationSpec();
          }
          break;

        case 7:
          _localctx = new DropNamespaceContext(_localctx);
          this.enterOuterAlt(_localctx, 7);
          {
            this.state = 354;
            this.match(SqlBaseParser.DROP);
            this.state = 355;
            this.namespace();
            this.state = 358;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 6, this._ctx)) {
              case 1:
                {
                  this.state = 356;
                  this.match(SqlBaseParser.IF);
                  this.state = 357;
                  this.match(SqlBaseParser.EXISTS);
                }
                break;
            }
            this.state = 360;
            this.multipartIdentifier();
            this.state = 362;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.CASCADE || _la === SqlBaseParser.RESTRICT) {
              {
                this.state = 361;
                _la = this._input.LA(1);
                if (!(_la === SqlBaseParser.CASCADE || _la === SqlBaseParser.RESTRICT)) {
                  this._errHandler.recoverInline(this);
                } else {
                  if (this._input.LA(1) === Token.EOF) {
                    this.matchedEOF = true;
                  }

                  this._errHandler.reportMatch(this);
                  this.consume();
                }
              }
            }
          }
          break;

        case 8:
          _localctx = new ShowNamespacesContext(_localctx);
          this.enterOuterAlt(_localctx, 8);
          {
            this.state = 364;
            this.match(SqlBaseParser.SHOW);
            this.state = 365;
            _la = this._input.LA(1);
            if (!(_la === SqlBaseParser.DATABASES || _la === SqlBaseParser.NAMESPACES)) {
              this._errHandler.recoverInline(this);
            } else {
              if (this._input.LA(1) === Token.EOF) {
                this.matchedEOF = true;
              }

              this._errHandler.reportMatch(this);
              this.consume();
            }
            this.state = 368;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.FROM || _la === SqlBaseParser.IN) {
              {
                this.state = 366;
                _la = this._input.LA(1);
                if (!(_la === SqlBaseParser.FROM || _la === SqlBaseParser.IN)) {
                  this._errHandler.recoverInline(this);
                } else {
                  if (this._input.LA(1) === Token.EOF) {
                    this.matchedEOF = true;
                  }

                  this._errHandler.reportMatch(this);
                  this.consume();
                }
                this.state = 367;
                this.multipartIdentifier();
              }
            }

            this.state = 374;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.LIKE || _la === SqlBaseParser.STRING) {
              {
                this.state = 371;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SqlBaseParser.LIKE) {
                  {
                    this.state = 370;
                    this.match(SqlBaseParser.LIKE);
                  }
                }

                this.state = 373;
                (_localctx as ShowNamespacesContext)._pattern = this.match(SqlBaseParser.STRING);
              }
            }
          }
          break;

        case 9:
          _localctx = new CreateTableContext(_localctx);
          this.enterOuterAlt(_localctx, 9);
          {
            this.state = 376;
            this.createTableHeader();
            this.state = 381;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 11, this._ctx)) {
              case 1:
                {
                  this.state = 377;
                  this.match(SqlBaseParser.T__1);
                  this.state = 378;
                  this.colTypeList();
                  this.state = 379;
                  this.match(SqlBaseParser.T__2);
                }
                break;
            }
            this.state = 384;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.USING) {
              {
                this.state = 383;
                this.tableProvider();
              }
            }

            this.state = 386;
            this.createTableClauses();
            this.state = 391;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (
              _la === SqlBaseParser.T__1 ||
              _la === SqlBaseParser.AS ||
              _la === SqlBaseParser.FROM ||
              _la === SqlBaseParser.MAP ||
              _la === SqlBaseParser.REDUCE ||
              _la === SqlBaseParser.SELECT ||
              _la === SqlBaseParser.TABLE ||
              _la === SqlBaseParser.VALUES ||
              _la === SqlBaseParser.WITH
            ) {
              {
                this.state = 388;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SqlBaseParser.AS) {
                  {
                    this.state = 387;
                    this.match(SqlBaseParser.AS);
                  }
                }

                this.state = 390;
                this.query();
              }
            }
          }
          break;

        case 10:
          _localctx = new CreateTableLikeContext(_localctx);
          this.enterOuterAlt(_localctx, 10);
          {
            this.state = 393;
            this.match(SqlBaseParser.CREATE);
            this.state = 394;
            this.match(SqlBaseParser.TABLE);
            this.state = 398;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 15, this._ctx)) {
              case 1:
                {
                  this.state = 395;
                  this.match(SqlBaseParser.IF);
                  this.state = 396;
                  this.match(SqlBaseParser.NOT);
                  this.state = 397;
                  this.match(SqlBaseParser.EXISTS);
                }
                break;
            }
            this.state = 400;
            (_localctx as CreateTableLikeContext)._target = this.tableIdentifier();
            this.state = 401;
            this.match(SqlBaseParser.LIKE);
            this.state = 402;
            (_localctx as CreateTableLikeContext)._source = this.tableIdentifier();
            this.state = 411;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (
              _la === SqlBaseParser.LOCATION ||
              (((_la - 204) & ~0x1f) === 0 &&
                ((1 << (_la - 204)) &
                  ((1 << (SqlBaseParser.ROW - 204)) |
                    (1 << (SqlBaseParser.STORED - 204)) |
                    (1 << (SqlBaseParser.TBLPROPERTIES - 204)))) !==
                  0) ||
              _la === SqlBaseParser.USING
            ) {
              {
                this.state = 409;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                  case SqlBaseParser.USING:
                    {
                      this.state = 403;
                      this.tableProvider();
                    }
                    break;
                  case SqlBaseParser.ROW:
                    {
                      this.state = 404;
                      this.rowFormat();
                    }
                    break;
                  case SqlBaseParser.STORED:
                    {
                      this.state = 405;
                      this.createFileFormat();
                    }
                    break;
                  case SqlBaseParser.LOCATION:
                    {
                      this.state = 406;
                      this.locationSpec();
                    }
                    break;
                  case SqlBaseParser.TBLPROPERTIES:
                    {
                      {
                        this.state = 407;
                        this.match(SqlBaseParser.TBLPROPERTIES);
                        this.state = 408;
                        (_localctx as CreateTableLikeContext)._tableProps = this.tablePropertyList();
                      }
                    }
                    break;
                  default:
                    throw new NoViableAltException(this);
                }
              }
              this.state = 413;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
            }
          }
          break;

        case 11:
          _localctx = new ReplaceTableContext(_localctx);
          this.enterOuterAlt(_localctx, 11);
          {
            this.state = 414;
            this.replaceTableHeader();
            this.state = 419;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 18, this._ctx)) {
              case 1:
                {
                  this.state = 415;
                  this.match(SqlBaseParser.T__1);
                  this.state = 416;
                  this.colTypeList();
                  this.state = 417;
                  this.match(SqlBaseParser.T__2);
                }
                break;
            }
            this.state = 422;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.USING) {
              {
                this.state = 421;
                this.tableProvider();
              }
            }

            this.state = 424;
            this.createTableClauses();
            this.state = 429;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (
              _la === SqlBaseParser.T__1 ||
              _la === SqlBaseParser.AS ||
              _la === SqlBaseParser.FROM ||
              _la === SqlBaseParser.MAP ||
              _la === SqlBaseParser.REDUCE ||
              _la === SqlBaseParser.SELECT ||
              _la === SqlBaseParser.TABLE ||
              _la === SqlBaseParser.VALUES ||
              _la === SqlBaseParser.WITH
            ) {
              {
                this.state = 426;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SqlBaseParser.AS) {
                  {
                    this.state = 425;
                    this.match(SqlBaseParser.AS);
                  }
                }

                this.state = 428;
                this.query();
              }
            }
          }
          break;

        case 12:
          _localctx = new AnalyzeContext(_localctx);
          this.enterOuterAlt(_localctx, 12);
          {
            this.state = 431;
            this.match(SqlBaseParser.ANALYZE);
            this.state = 432;
            this.match(SqlBaseParser.TABLE);
            this.state = 433;
            this.multipartIdentifier();
            this.state = 435;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.PARTITION) {
              {
                this.state = 434;
                this.partitionSpec();
              }
            }

            this.state = 437;
            this.match(SqlBaseParser.COMPUTE);
            this.state = 438;
            this.match(SqlBaseParser.STATISTICS);
            this.state = 446;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 23, this._ctx)) {
              case 1:
                {
                  this.state = 439;
                  this.identifier();
                }
                break;

              case 2:
                {
                  this.state = 440;
                  this.match(SqlBaseParser.FOR);
                  this.state = 441;
                  this.match(SqlBaseParser.COLUMNS);
                  this.state = 442;
                  this.identifierSeq();
                }
                break;

              case 3:
                {
                  this.state = 443;
                  this.match(SqlBaseParser.FOR);
                  this.state = 444;
                  this.match(SqlBaseParser.ALL);
                  this.state = 445;
                  this.match(SqlBaseParser.COLUMNS);
                }
                break;
            }
          }
          break;

        case 13:
          _localctx = new AnalyzeTablesContext(_localctx);
          this.enterOuterAlt(_localctx, 13);
          {
            this.state = 448;
            this.match(SqlBaseParser.ANALYZE);
            this.state = 449;
            this.match(SqlBaseParser.TABLES);
            this.state = 452;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.FROM || _la === SqlBaseParser.IN) {
              {
                this.state = 450;
                _la = this._input.LA(1);
                if (!(_la === SqlBaseParser.FROM || _la === SqlBaseParser.IN)) {
                  this._errHandler.recoverInline(this);
                } else {
                  if (this._input.LA(1) === Token.EOF) {
                    this.matchedEOF = true;
                  }

                  this._errHandler.reportMatch(this);
                  this.consume();
                }
                this.state = 451;
                this.multipartIdentifier();
              }
            }

            this.state = 454;
            this.match(SqlBaseParser.COMPUTE);
            this.state = 455;
            this.match(SqlBaseParser.STATISTICS);
            this.state = 457;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 25, this._ctx)) {
              case 1:
                {
                  this.state = 456;
                  this.identifier();
                }
                break;
            }
          }
          break;

        case 14:
          _localctx = new AddTableColumnsContext(_localctx);
          this.enterOuterAlt(_localctx, 14);
          {
            this.state = 459;
            this.match(SqlBaseParser.ALTER);
            this.state = 460;
            this.match(SqlBaseParser.TABLE);
            this.state = 461;
            this.multipartIdentifier();
            this.state = 462;
            this.match(SqlBaseParser.ADD);
            this.state = 463;
            _la = this._input.LA(1);
            if (!(_la === SqlBaseParser.COLUMN || _la === SqlBaseParser.COLUMNS)) {
              this._errHandler.recoverInline(this);
            } else {
              if (this._input.LA(1) === Token.EOF) {
                this.matchedEOF = true;
              }

              this._errHandler.reportMatch(this);
              this.consume();
            }
            this.state = 464;
            (_localctx as AddTableColumnsContext)._columns = this.qualifiedColTypeWithPositionList();
          }
          break;

        case 15:
          _localctx = new AddTableColumnsContext(_localctx);
          this.enterOuterAlt(_localctx, 15);
          {
            this.state = 466;
            this.match(SqlBaseParser.ALTER);
            this.state = 467;
            this.match(SqlBaseParser.TABLE);
            this.state = 468;
            this.multipartIdentifier();
            this.state = 469;
            this.match(SqlBaseParser.ADD);
            this.state = 470;
            _la = this._input.LA(1);
            if (!(_la === SqlBaseParser.COLUMN || _la === SqlBaseParser.COLUMNS)) {
              this._errHandler.recoverInline(this);
            } else {
              if (this._input.LA(1) === Token.EOF) {
                this.matchedEOF = true;
              }

              this._errHandler.reportMatch(this);
              this.consume();
            }
            this.state = 471;
            this.match(SqlBaseParser.T__1);
            this.state = 472;
            (_localctx as AddTableColumnsContext)._columns = this.qualifiedColTypeWithPositionList();
            this.state = 473;
            this.match(SqlBaseParser.T__2);
          }
          break;

        case 16:
          _localctx = new RenameTableColumnContext(_localctx);
          this.enterOuterAlt(_localctx, 16);
          {
            this.state = 475;
            this.match(SqlBaseParser.ALTER);
            this.state = 476;
            this.match(SqlBaseParser.TABLE);
            this.state = 477;
            (_localctx as RenameTableColumnContext)._table = this.multipartIdentifier();
            this.state = 478;
            this.match(SqlBaseParser.RENAME);
            this.state = 479;
            this.match(SqlBaseParser.COLUMN);
            this.state = 480;
            (_localctx as RenameTableColumnContext)._from = this.multipartIdentifier();
            this.state = 481;
            this.match(SqlBaseParser.TO);
            this.state = 482;
            (_localctx as RenameTableColumnContext)._to = this.errorCapturingIdentifier();
          }
          break;

        case 17:
          _localctx = new DropTableColumnsContext(_localctx);
          this.enterOuterAlt(_localctx, 17);
          {
            this.state = 484;
            this.match(SqlBaseParser.ALTER);
            this.state = 485;
            this.match(SqlBaseParser.TABLE);
            this.state = 486;
            this.multipartIdentifier();
            this.state = 487;
            this.match(SqlBaseParser.DROP);
            this.state = 488;
            _la = this._input.LA(1);
            if (!(_la === SqlBaseParser.COLUMN || _la === SqlBaseParser.COLUMNS)) {
              this._errHandler.recoverInline(this);
            } else {
              if (this._input.LA(1) === Token.EOF) {
                this.matchedEOF = true;
              }

              this._errHandler.reportMatch(this);
              this.consume();
            }
            this.state = 489;
            this.match(SqlBaseParser.T__1);
            this.state = 490;
            (_localctx as DropTableColumnsContext)._columns = this.multipartIdentifierList();
            this.state = 491;
            this.match(SqlBaseParser.T__2);
          }
          break;

        case 18:
          _localctx = new DropTableColumnsContext(_localctx);
          this.enterOuterAlt(_localctx, 18);
          {
            this.state = 493;
            this.match(SqlBaseParser.ALTER);
            this.state = 494;
            this.match(SqlBaseParser.TABLE);
            this.state = 495;
            this.multipartIdentifier();
            this.state = 496;
            this.match(SqlBaseParser.DROP);
            this.state = 497;
            _la = this._input.LA(1);
            if (!(_la === SqlBaseParser.COLUMN || _la === SqlBaseParser.COLUMNS)) {
              this._errHandler.recoverInline(this);
            } else {
              if (this._input.LA(1) === Token.EOF) {
                this.matchedEOF = true;
              }

              this._errHandler.reportMatch(this);
              this.consume();
            }
            this.state = 498;
            (_localctx as DropTableColumnsContext)._columns = this.multipartIdentifierList();
          }
          break;

        case 19:
          _localctx = new RenameTableContext(_localctx);
          this.enterOuterAlt(_localctx, 19);
          {
            this.state = 500;
            this.match(SqlBaseParser.ALTER);
            this.state = 501;
            _la = this._input.LA(1);
            if (!(_la === SqlBaseParser.TABLE || _la === SqlBaseParser.VIEW)) {
              this._errHandler.recoverInline(this);
            } else {
              if (this._input.LA(1) === Token.EOF) {
                this.matchedEOF = true;
              }

              this._errHandler.reportMatch(this);
              this.consume();
            }
            this.state = 502;
            (_localctx as RenameTableContext)._from = this.multipartIdentifier();
            this.state = 503;
            this.match(SqlBaseParser.RENAME);
            this.state = 504;
            this.match(SqlBaseParser.TO);
            this.state = 505;
            (_localctx as RenameTableContext)._to = this.multipartIdentifier();
          }
          break;

        case 20:
          _localctx = new SetTablePropertiesContext(_localctx);
          this.enterOuterAlt(_localctx, 20);
          {
            this.state = 507;
            this.match(SqlBaseParser.ALTER);
            this.state = 508;
            _la = this._input.LA(1);
            if (!(_la === SqlBaseParser.TABLE || _la === SqlBaseParser.VIEW)) {
              this._errHandler.recoverInline(this);
            } else {
              if (this._input.LA(1) === Token.EOF) {
                this.matchedEOF = true;
              }

              this._errHandler.reportMatch(this);
              this.consume();
            }
            this.state = 509;
            this.multipartIdentifier();
            this.state = 510;
            this.match(SqlBaseParser.SET);
            this.state = 511;
            this.match(SqlBaseParser.TBLPROPERTIES);
            this.state = 512;
            this.tablePropertyList();
          }
          break;

        case 21:
          _localctx = new UnsetTablePropertiesContext(_localctx);
          this.enterOuterAlt(_localctx, 21);
          {
            this.state = 514;
            this.match(SqlBaseParser.ALTER);
            this.state = 515;
            _la = this._input.LA(1);
            if (!(_la === SqlBaseParser.TABLE || _la === SqlBaseParser.VIEW)) {
              this._errHandler.recoverInline(this);
            } else {
              if (this._input.LA(1) === Token.EOF) {
                this.matchedEOF = true;
              }

              this._errHandler.reportMatch(this);
              this.consume();
            }
            this.state = 516;
            this.multipartIdentifier();
            this.state = 517;
            this.match(SqlBaseParser.UNSET);
            this.state = 518;
            this.match(SqlBaseParser.TBLPROPERTIES);
            this.state = 521;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.IF) {
              {
                this.state = 519;
                this.match(SqlBaseParser.IF);
                this.state = 520;
                this.match(SqlBaseParser.EXISTS);
              }
            }

            this.state = 523;
            this.tablePropertyList();
          }
          break;

        case 22:
          _localctx = new AlterTableAlterColumnContext(_localctx);
          this.enterOuterAlt(_localctx, 22);
          {
            this.state = 525;
            this.match(SqlBaseParser.ALTER);
            this.state = 526;
            this.match(SqlBaseParser.TABLE);
            this.state = 527;
            (_localctx as AlterTableAlterColumnContext)._table = this.multipartIdentifier();
            this.state = 528;
            _la = this._input.LA(1);
            if (!(_la === SqlBaseParser.ALTER || _la === SqlBaseParser.CHANGE)) {
              this._errHandler.recoverInline(this);
            } else {
              if (this._input.LA(1) === Token.EOF) {
                this.matchedEOF = true;
              }

              this._errHandler.reportMatch(this);
              this.consume();
            }
            this.state = 530;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 27, this._ctx)) {
              case 1:
                {
                  this.state = 529;
                  this.match(SqlBaseParser.COLUMN);
                }
                break;
            }
            this.state = 532;
            (_localctx as AlterTableAlterColumnContext)._column = this.multipartIdentifier();
            this.state = 534;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (
              _la === SqlBaseParser.AFTER ||
              _la === SqlBaseParser.COMMENT ||
              _la === SqlBaseParser.DROP ||
              _la === SqlBaseParser.FIRST ||
              _la === SqlBaseParser.SET ||
              _la === SqlBaseParser.TYPE
            ) {
              {
                this.state = 533;
                this.alterColumnAction();
              }
            }
          }
          break;

        case 23:
          _localctx = new HiveChangeColumnContext(_localctx);
          this.enterOuterAlt(_localctx, 23);
          {
            this.state = 536;
            this.match(SqlBaseParser.ALTER);
            this.state = 537;
            this.match(SqlBaseParser.TABLE);
            this.state = 538;
            (_localctx as HiveChangeColumnContext)._table = this.multipartIdentifier();
            this.state = 540;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.PARTITION) {
              {
                this.state = 539;
                this.partitionSpec();
              }
            }

            this.state = 542;
            this.match(SqlBaseParser.CHANGE);
            this.state = 544;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 30, this._ctx)) {
              case 1:
                {
                  this.state = 543;
                  this.match(SqlBaseParser.COLUMN);
                }
                break;
            }
            this.state = 546;
            (_localctx as HiveChangeColumnContext)._colName = this.multipartIdentifier();
            this.state = 547;
            this.colType();
            this.state = 549;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.AFTER || _la === SqlBaseParser.FIRST) {
              {
                this.state = 548;
                this.colPosition();
              }
            }
          }
          break;

        case 24:
          _localctx = new HiveReplaceColumnsContext(_localctx);
          this.enterOuterAlt(_localctx, 24);
          {
            this.state = 551;
            this.match(SqlBaseParser.ALTER);
            this.state = 552;
            this.match(SqlBaseParser.TABLE);
            this.state = 553;
            (_localctx as HiveReplaceColumnsContext)._table = this.multipartIdentifier();
            this.state = 555;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.PARTITION) {
              {
                this.state = 554;
                this.partitionSpec();
              }
            }

            this.state = 557;
            this.match(SqlBaseParser.REPLACE);
            this.state = 558;
            this.match(SqlBaseParser.COLUMNS);
            this.state = 559;
            this.match(SqlBaseParser.T__1);
            this.state = 560;
            (_localctx as HiveReplaceColumnsContext)._columns = this.qualifiedColTypeWithPositionList();
            this.state = 561;
            this.match(SqlBaseParser.T__2);
          }
          break;

        case 25:
          _localctx = new SetTableSerDeContext(_localctx);
          this.enterOuterAlt(_localctx, 25);
          {
            this.state = 563;
            this.match(SqlBaseParser.ALTER);
            this.state = 564;
            this.match(SqlBaseParser.TABLE);
            this.state = 565;
            this.multipartIdentifier();
            this.state = 567;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.PARTITION) {
              {
                this.state = 566;
                this.partitionSpec();
              }
            }

            this.state = 569;
            this.match(SqlBaseParser.SET);
            this.state = 570;
            this.match(SqlBaseParser.SERDE);
            this.state = 571;
            this.match(SqlBaseParser.STRING);
            this.state = 575;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.WITH) {
              {
                this.state = 572;
                this.match(SqlBaseParser.WITH);
                this.state = 573;
                this.match(SqlBaseParser.SERDEPROPERTIES);
                this.state = 574;
                this.tablePropertyList();
              }
            }
          }
          break;

        case 26:
          _localctx = new SetTableSerDeContext(_localctx);
          this.enterOuterAlt(_localctx, 26);
          {
            this.state = 577;
            this.match(SqlBaseParser.ALTER);
            this.state = 578;
            this.match(SqlBaseParser.TABLE);
            this.state = 579;
            this.multipartIdentifier();
            this.state = 581;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.PARTITION) {
              {
                this.state = 580;
                this.partitionSpec();
              }
            }

            this.state = 583;
            this.match(SqlBaseParser.SET);
            this.state = 584;
            this.match(SqlBaseParser.SERDEPROPERTIES);
            this.state = 585;
            this.tablePropertyList();
          }
          break;

        case 27:
          _localctx = new AddTablePartitionContext(_localctx);
          this.enterOuterAlt(_localctx, 27);
          {
            this.state = 587;
            this.match(SqlBaseParser.ALTER);
            this.state = 588;
            _la = this._input.LA(1);
            if (!(_la === SqlBaseParser.TABLE || _la === SqlBaseParser.VIEW)) {
              this._errHandler.recoverInline(this);
            } else {
              if (this._input.LA(1) === Token.EOF) {
                this.matchedEOF = true;
              }

              this._errHandler.reportMatch(this);
              this.consume();
            }
            this.state = 589;
            this.multipartIdentifier();
            this.state = 590;
            this.match(SqlBaseParser.ADD);
            this.state = 594;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.IF) {
              {
                this.state = 591;
                this.match(SqlBaseParser.IF);
                this.state = 592;
                this.match(SqlBaseParser.NOT);
                this.state = 593;
                this.match(SqlBaseParser.EXISTS);
              }
            }

            this.state = 597;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
              {
                {
                  this.state = 596;
                  this.partitionSpecLocation();
                }
              }
              this.state = 599;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
            } while (_la === SqlBaseParser.PARTITION);
          }
          break;

        case 28:
          _localctx = new RenameTablePartitionContext(_localctx);
          this.enterOuterAlt(_localctx, 28);
          {
            this.state = 601;
            this.match(SqlBaseParser.ALTER);
            this.state = 602;
            this.match(SqlBaseParser.TABLE);
            this.state = 603;
            this.multipartIdentifier();
            this.state = 604;
            (_localctx as RenameTablePartitionContext)._from = this.partitionSpec();
            this.state = 605;
            this.match(SqlBaseParser.RENAME);
            this.state = 606;
            this.match(SqlBaseParser.TO);
            this.state = 607;
            (_localctx as RenameTablePartitionContext)._to = this.partitionSpec();
          }
          break;

        case 29:
          _localctx = new DropTablePartitionsContext(_localctx);
          this.enterOuterAlt(_localctx, 29);
          {
            this.state = 609;
            this.match(SqlBaseParser.ALTER);
            this.state = 610;
            _la = this._input.LA(1);
            if (!(_la === SqlBaseParser.TABLE || _la === SqlBaseParser.VIEW)) {
              this._errHandler.recoverInline(this);
            } else {
              if (this._input.LA(1) === Token.EOF) {
                this.matchedEOF = true;
              }

              this._errHandler.reportMatch(this);
              this.consume();
            }
            this.state = 611;
            this.multipartIdentifier();
            this.state = 612;
            this.match(SqlBaseParser.DROP);
            this.state = 615;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.IF) {
              {
                this.state = 613;
                this.match(SqlBaseParser.IF);
                this.state = 614;
                this.match(SqlBaseParser.EXISTS);
              }
            }

            this.state = 617;
            this.partitionSpec();
            this.state = 622;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === SqlBaseParser.T__3) {
              {
                {
                  this.state = 618;
                  this.match(SqlBaseParser.T__3);
                  this.state = 619;
                  this.partitionSpec();
                }
              }
              this.state = 624;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
            }
            this.state = 626;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.PURGE) {
              {
                this.state = 625;
                this.match(SqlBaseParser.PURGE);
              }
            }
          }
          break;

        case 30:
          _localctx = new SetTableLocationContext(_localctx);
          this.enterOuterAlt(_localctx, 30);
          {
            this.state = 628;
            this.match(SqlBaseParser.ALTER);
            this.state = 629;
            this.match(SqlBaseParser.TABLE);
            this.state = 630;
            this.multipartIdentifier();
            this.state = 632;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.PARTITION) {
              {
                this.state = 631;
                this.partitionSpec();
              }
            }

            this.state = 634;
            this.match(SqlBaseParser.SET);
            this.state = 635;
            this.locationSpec();
          }
          break;

        case 31:
          _localctx = new RecoverPartitionsContext(_localctx);
          this.enterOuterAlt(_localctx, 31);
          {
            this.state = 637;
            this.match(SqlBaseParser.ALTER);
            this.state = 638;
            this.match(SqlBaseParser.TABLE);
            this.state = 639;
            this.multipartIdentifier();
            this.state = 640;
            this.match(SqlBaseParser.RECOVER);
            this.state = 641;
            this.match(SqlBaseParser.PARTITIONS);
          }
          break;

        case 32:
          _localctx = new DropTableContext(_localctx);
          this.enterOuterAlt(_localctx, 32);
          {
            this.state = 643;
            this.match(SqlBaseParser.DROP);
            this.state = 644;
            this.match(SqlBaseParser.TABLE);
            this.state = 647;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 42, this._ctx)) {
              case 1:
                {
                  this.state = 645;
                  this.match(SqlBaseParser.IF);
                  this.state = 646;
                  this.match(SqlBaseParser.EXISTS);
                }
                break;
            }
            this.state = 649;
            this.multipartIdentifier();
            this.state = 651;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.PURGE) {
              {
                this.state = 650;
                this.match(SqlBaseParser.PURGE);
              }
            }
          }
          break;

        case 33:
          _localctx = new DropViewContext(_localctx);
          this.enterOuterAlt(_localctx, 33);
          {
            this.state = 653;
            this.match(SqlBaseParser.DROP);
            this.state = 654;
            this.match(SqlBaseParser.VIEW);
            this.state = 657;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 44, this._ctx)) {
              case 1:
                {
                  this.state = 655;
                  this.match(SqlBaseParser.IF);
                  this.state = 656;
                  this.match(SqlBaseParser.EXISTS);
                }
                break;
            }
            this.state = 659;
            this.multipartIdentifier();
          }
          break;

        case 34:
          _localctx = new CreateViewContext(_localctx);
          this.enterOuterAlt(_localctx, 34);
          {
            this.state = 660;
            this.match(SqlBaseParser.CREATE);
            this.state = 663;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.OR) {
              {
                this.state = 661;
                this.match(SqlBaseParser.OR);
                this.state = 662;
                this.match(SqlBaseParser.REPLACE);
              }
            }

            this.state = 669;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.GLOBAL || _la === SqlBaseParser.TEMPORARY) {
              {
                this.state = 666;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SqlBaseParser.GLOBAL) {
                  {
                    this.state = 665;
                    this.match(SqlBaseParser.GLOBAL);
                  }
                }

                this.state = 668;
                this.match(SqlBaseParser.TEMPORARY);
              }
            }

            this.state = 671;
            this.match(SqlBaseParser.VIEW);
            this.state = 675;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 48, this._ctx)) {
              case 1:
                {
                  this.state = 672;
                  this.match(SqlBaseParser.IF);
                  this.state = 673;
                  this.match(SqlBaseParser.NOT);
                  this.state = 674;
                  this.match(SqlBaseParser.EXISTS);
                }
                break;
            }
            this.state = 677;
            this.multipartIdentifier();
            this.state = 679;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.T__1) {
              {
                this.state = 678;
                this.identifierCommentList();
              }
            }

            this.state = 689;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (
              _la === SqlBaseParser.COMMENT ||
              _la === SqlBaseParser.PARTITIONED ||
              _la === SqlBaseParser.TBLPROPERTIES
            ) {
              {
                this.state = 687;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                  case SqlBaseParser.COMMENT:
                    {
                      this.state = 681;
                      this.commentSpec();
                    }
                    break;
                  case SqlBaseParser.PARTITIONED:
                    {
                      {
                        this.state = 682;
                        this.match(SqlBaseParser.PARTITIONED);
                        this.state = 683;
                        this.match(SqlBaseParser.ON);
                        this.state = 684;
                        this.identifierList();
                      }
                    }
                    break;
                  case SqlBaseParser.TBLPROPERTIES:
                    {
                      {
                        this.state = 685;
                        this.match(SqlBaseParser.TBLPROPERTIES);
                        this.state = 686;
                        this.tablePropertyList();
                      }
                    }
                    break;
                  default:
                    throw new NoViableAltException(this);
                }
              }
              this.state = 691;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
            }
            this.state = 692;
            this.match(SqlBaseParser.AS);
            this.state = 693;
            this.query();
          }
          break;

        case 35:
          _localctx = new CreateTempViewUsingContext(_localctx);
          this.enterOuterAlt(_localctx, 35);
          {
            this.state = 695;
            this.match(SqlBaseParser.CREATE);
            this.state = 698;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.OR) {
              {
                this.state = 696;
                this.match(SqlBaseParser.OR);
                this.state = 697;
                this.match(SqlBaseParser.REPLACE);
              }
            }

            this.state = 701;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.GLOBAL) {
              {
                this.state = 700;
                this.match(SqlBaseParser.GLOBAL);
              }
            }

            this.state = 703;
            this.match(SqlBaseParser.TEMPORARY);
            this.state = 704;
            this.match(SqlBaseParser.VIEW);
            this.state = 705;
            this.tableIdentifier();
            this.state = 710;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.T__1) {
              {
                this.state = 706;
                this.match(SqlBaseParser.T__1);
                this.state = 707;
                this.colTypeList();
                this.state = 708;
                this.match(SqlBaseParser.T__2);
              }
            }

            this.state = 712;
            this.tableProvider();
            this.state = 715;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.OPTIONS) {
              {
                this.state = 713;
                this.match(SqlBaseParser.OPTIONS);
                this.state = 714;
                this.tablePropertyList();
              }
            }
          }
          break;

        case 36:
          _localctx = new AlterViewQueryContext(_localctx);
          this.enterOuterAlt(_localctx, 36);
          {
            this.state = 717;
            this.match(SqlBaseParser.ALTER);
            this.state = 718;
            this.match(SqlBaseParser.VIEW);
            this.state = 719;
            this.multipartIdentifier();
            this.state = 721;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.AS) {
              {
                this.state = 720;
                this.match(SqlBaseParser.AS);
              }
            }

            this.state = 723;
            this.query();
          }
          break;

        case 37:
          _localctx = new CreateFunctionContext(_localctx);
          this.enterOuterAlt(_localctx, 37);
          {
            this.state = 725;
            this.match(SqlBaseParser.CREATE);
            this.state = 728;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.OR) {
              {
                this.state = 726;
                this.match(SqlBaseParser.OR);
                this.state = 727;
                this.match(SqlBaseParser.REPLACE);
              }
            }

            this.state = 731;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.TEMPORARY) {
              {
                this.state = 730;
                this.match(SqlBaseParser.TEMPORARY);
              }
            }

            this.state = 733;
            this.match(SqlBaseParser.FUNCTION);
            this.state = 737;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 59, this._ctx)) {
              case 1:
                {
                  this.state = 734;
                  this.match(SqlBaseParser.IF);
                  this.state = 735;
                  this.match(SqlBaseParser.NOT);
                  this.state = 736;
                  this.match(SqlBaseParser.EXISTS);
                }
                break;
            }
            this.state = 739;
            this.multipartIdentifier();
            this.state = 740;
            this.match(SqlBaseParser.AS);
            this.state = 741;
            (_localctx as CreateFunctionContext)._className = this.match(SqlBaseParser.STRING);
            this.state = 751;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.USING) {
              {
                this.state = 742;
                this.match(SqlBaseParser.USING);
                this.state = 743;
                this.resource();
                this.state = 748;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === SqlBaseParser.T__3) {
                  {
                    {
                      this.state = 744;
                      this.match(SqlBaseParser.T__3);
                      this.state = 745;
                      this.resource();
                    }
                  }
                  this.state = 750;
                  this._errHandler.sync(this);
                  _la = this._input.LA(1);
                }
              }
            }
          }
          break;

        case 38:
          _localctx = new DropFunctionContext(_localctx);
          this.enterOuterAlt(_localctx, 38);
          {
            this.state = 753;
            this.match(SqlBaseParser.DROP);
            this.state = 755;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.TEMPORARY) {
              {
                this.state = 754;
                this.match(SqlBaseParser.TEMPORARY);
              }
            }

            this.state = 757;
            this.match(SqlBaseParser.FUNCTION);
            this.state = 760;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 63, this._ctx)) {
              case 1:
                {
                  this.state = 758;
                  this.match(SqlBaseParser.IF);
                  this.state = 759;
                  this.match(SqlBaseParser.EXISTS);
                }
                break;
            }
            this.state = 762;
            this.multipartIdentifier();
          }
          break;

        case 39:
          _localctx = new ExplainContext(_localctx);
          this.enterOuterAlt(_localctx, 39);
          {
            this.state = 763;
            this.match(SqlBaseParser.EXPLAIN);
            this.state = 765;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (
              _la === SqlBaseParser.CODEGEN ||
              _la === SqlBaseParser.COST ||
              _la === SqlBaseParser.EXTENDED ||
              _la === SqlBaseParser.FORMATTED ||
              _la === SqlBaseParser.LOGICAL
            ) {
              {
                this.state = 764;
                _la = this._input.LA(1);
                if (
                  !(
                    _la === SqlBaseParser.CODEGEN ||
                    _la === SqlBaseParser.COST ||
                    _la === SqlBaseParser.EXTENDED ||
                    _la === SqlBaseParser.FORMATTED ||
                    _la === SqlBaseParser.LOGICAL
                  )
                ) {
                  this._errHandler.recoverInline(this);
                } else {
                  if (this._input.LA(1) === Token.EOF) {
                    this.matchedEOF = true;
                  }

                  this._errHandler.reportMatch(this);
                  this.consume();
                }
              }
            }

            this.state = 767;
            this.statement();
          }
          break;

        case 40:
          _localctx = new ShowTablesContext(_localctx);
          this.enterOuterAlt(_localctx, 40);
          {
            this.state = 768;
            this.match(SqlBaseParser.SHOW);
            this.state = 769;
            this.match(SqlBaseParser.TABLES);
            this.state = 772;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.FROM || _la === SqlBaseParser.IN) {
              {
                this.state = 770;
                _la = this._input.LA(1);
                if (!(_la === SqlBaseParser.FROM || _la === SqlBaseParser.IN)) {
                  this._errHandler.recoverInline(this);
                } else {
                  if (this._input.LA(1) === Token.EOF) {
                    this.matchedEOF = true;
                  }

                  this._errHandler.reportMatch(this);
                  this.consume();
                }
                this.state = 771;
                this.multipartIdentifier();
              }
            }

            this.state = 778;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.LIKE || _la === SqlBaseParser.STRING) {
              {
                this.state = 775;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SqlBaseParser.LIKE) {
                  {
                    this.state = 774;
                    this.match(SqlBaseParser.LIKE);
                  }
                }

                this.state = 777;
                (_localctx as ShowTablesContext)._pattern = this.match(SqlBaseParser.STRING);
              }
            }
          }
          break;

        case 41:
          _localctx = new ShowTableExtendedContext(_localctx);
          this.enterOuterAlt(_localctx, 41);
          {
            this.state = 780;
            this.match(SqlBaseParser.SHOW);
            this.state = 781;
            this.match(SqlBaseParser.TABLE);
            this.state = 782;
            this.match(SqlBaseParser.EXTENDED);
            this.state = 785;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.FROM || _la === SqlBaseParser.IN) {
              {
                this.state = 783;
                _la = this._input.LA(1);
                if (!(_la === SqlBaseParser.FROM || _la === SqlBaseParser.IN)) {
                  this._errHandler.recoverInline(this);
                } else {
                  if (this._input.LA(1) === Token.EOF) {
                    this.matchedEOF = true;
                  }

                  this._errHandler.reportMatch(this);
                  this.consume();
                }
                this.state = 784;
                (_localctx as ShowTableExtendedContext)._ns = this.multipartIdentifier();
              }
            }

            this.state = 787;
            this.match(SqlBaseParser.LIKE);
            this.state = 788;
            (_localctx as ShowTableExtendedContext)._pattern = this.match(SqlBaseParser.STRING);
            this.state = 790;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.PARTITION) {
              {
                this.state = 789;
                this.partitionSpec();
              }
            }
          }
          break;

        case 42:
          _localctx = new ShowTblPropertiesContext(_localctx);
          this.enterOuterAlt(_localctx, 42);
          {
            this.state = 792;
            this.match(SqlBaseParser.SHOW);
            this.state = 793;
            this.match(SqlBaseParser.TBLPROPERTIES);
            this.state = 794;
            (_localctx as ShowTblPropertiesContext)._table = this.multipartIdentifier();
            this.state = 799;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.T__1) {
              {
                this.state = 795;
                this.match(SqlBaseParser.T__1);
                this.state = 796;
                (_localctx as ShowTblPropertiesContext)._key = this.tablePropertyKey();
                this.state = 797;
                this.match(SqlBaseParser.T__2);
              }
            }
          }
          break;

        case 43:
          _localctx = new ShowColumnsContext(_localctx);
          this.enterOuterAlt(_localctx, 43);
          {
            this.state = 801;
            this.match(SqlBaseParser.SHOW);
            this.state = 802;
            this.match(SqlBaseParser.COLUMNS);
            this.state = 803;
            _la = this._input.LA(1);
            if (!(_la === SqlBaseParser.FROM || _la === SqlBaseParser.IN)) {
              this._errHandler.recoverInline(this);
            } else {
              if (this._input.LA(1) === Token.EOF) {
                this.matchedEOF = true;
              }

              this._errHandler.reportMatch(this);
              this.consume();
            }
            this.state = 804;
            (_localctx as ShowColumnsContext)._table = this.multipartIdentifier();
            this.state = 807;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.FROM || _la === SqlBaseParser.IN) {
              {
                this.state = 805;
                _la = this._input.LA(1);
                if (!(_la === SqlBaseParser.FROM || _la === SqlBaseParser.IN)) {
                  this._errHandler.recoverInline(this);
                } else {
                  if (this._input.LA(1) === Token.EOF) {
                    this.matchedEOF = true;
                  }

                  this._errHandler.reportMatch(this);
                  this.consume();
                }
                this.state = 806;
                (_localctx as ShowColumnsContext)._ns = this.multipartIdentifier();
              }
            }
          }
          break;

        case 44:
          _localctx = new ShowViewsContext(_localctx);
          this.enterOuterAlt(_localctx, 44);
          {
            this.state = 809;
            this.match(SqlBaseParser.SHOW);
            this.state = 810;
            this.match(SqlBaseParser.VIEWS);
            this.state = 813;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.FROM || _la === SqlBaseParser.IN) {
              {
                this.state = 811;
                _la = this._input.LA(1);
                if (!(_la === SqlBaseParser.FROM || _la === SqlBaseParser.IN)) {
                  this._errHandler.recoverInline(this);
                } else {
                  if (this._input.LA(1) === Token.EOF) {
                    this.matchedEOF = true;
                  }

                  this._errHandler.reportMatch(this);
                  this.consume();
                }
                this.state = 812;
                this.multipartIdentifier();
              }
            }

            this.state = 819;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.LIKE || _la === SqlBaseParser.STRING) {
              {
                this.state = 816;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SqlBaseParser.LIKE) {
                  {
                    this.state = 815;
                    this.match(SqlBaseParser.LIKE);
                  }
                }

                this.state = 818;
                (_localctx as ShowViewsContext)._pattern = this.match(SqlBaseParser.STRING);
              }
            }
          }
          break;

        case 45:
          _localctx = new ShowPartitionsContext(_localctx);
          this.enterOuterAlt(_localctx, 45);
          {
            this.state = 821;
            this.match(SqlBaseParser.SHOW);
            this.state = 822;
            this.match(SqlBaseParser.PARTITIONS);
            this.state = 823;
            this.multipartIdentifier();
            this.state = 825;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.PARTITION) {
              {
                this.state = 824;
                this.partitionSpec();
              }
            }
          }
          break;

        case 46:
          _localctx = new ShowFunctionsContext(_localctx);
          this.enterOuterAlt(_localctx, 46);
          {
            this.state = 827;
            this.match(SqlBaseParser.SHOW);
            this.state = 829;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 76, this._ctx)) {
              case 1:
                {
                  this.state = 828;
                  this.identifier();
                }
                break;
            }
            this.state = 831;
            this.match(SqlBaseParser.FUNCTIONS);
            this.state = 839;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 79, this._ctx)) {
              case 1:
                {
                  this.state = 833;
                  this._errHandler.sync(this);
                  switch (this.interpreter.adaptivePredict(this._input, 77, this._ctx)) {
                    case 1:
                      {
                        this.state = 832;
                        this.match(SqlBaseParser.LIKE);
                      }
                      break;
                  }
                  this.state = 837;
                  this._errHandler.sync(this);
                  switch (this.interpreter.adaptivePredict(this._input, 78, this._ctx)) {
                    case 1:
                      {
                        this.state = 835;
                        this.multipartIdentifier();
                      }
                      break;

                    case 2:
                      {
                        this.state = 836;
                        (_localctx as ShowFunctionsContext)._pattern = this.match(SqlBaseParser.STRING);
                      }
                      break;
                  }
                }
                break;
            }
          }
          break;

        case 47:
          _localctx = new ShowCreateTableContext(_localctx);
          this.enterOuterAlt(_localctx, 47);
          {
            this.state = 841;
            this.match(SqlBaseParser.SHOW);
            this.state = 842;
            this.match(SqlBaseParser.CREATE);
            this.state = 843;
            this.match(SqlBaseParser.TABLE);
            this.state = 844;
            this.multipartIdentifier();
            this.state = 847;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.AS) {
              {
                this.state = 845;
                this.match(SqlBaseParser.AS);
                this.state = 846;
                this.match(SqlBaseParser.SERDE);
              }
            }
          }
          break;

        case 48:
          _localctx = new ShowCurrentNamespaceContext(_localctx);
          this.enterOuterAlt(_localctx, 48);
          {
            this.state = 849;
            this.match(SqlBaseParser.SHOW);
            this.state = 850;
            this.match(SqlBaseParser.CURRENT);
            this.state = 851;
            this.match(SqlBaseParser.NAMESPACE);
          }
          break;

        case 49:
          _localctx = new DescribeFunctionContext(_localctx);
          this.enterOuterAlt(_localctx, 49);
          {
            this.state = 852;
            _la = this._input.LA(1);
            if (!(_la === SqlBaseParser.DESC || _la === SqlBaseParser.DESCRIBE)) {
              this._errHandler.recoverInline(this);
            } else {
              if (this._input.LA(1) === Token.EOF) {
                this.matchedEOF = true;
              }

              this._errHandler.reportMatch(this);
              this.consume();
            }
            this.state = 853;
            this.match(SqlBaseParser.FUNCTION);
            this.state = 855;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 81, this._ctx)) {
              case 1:
                {
                  this.state = 854;
                  this.match(SqlBaseParser.EXTENDED);
                }
                break;
            }
            this.state = 857;
            this.describeFuncName();
          }
          break;

        case 50:
          _localctx = new DescribeNamespaceContext(_localctx);
          this.enterOuterAlt(_localctx, 50);
          {
            this.state = 858;
            _la = this._input.LA(1);
            if (!(_la === SqlBaseParser.DESC || _la === SqlBaseParser.DESCRIBE)) {
              this._errHandler.recoverInline(this);
            } else {
              if (this._input.LA(1) === Token.EOF) {
                this.matchedEOF = true;
              }

              this._errHandler.reportMatch(this);
              this.consume();
            }
            this.state = 859;
            this.namespace();
            this.state = 861;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 82, this._ctx)) {
              case 1:
                {
                  this.state = 860;
                  this.match(SqlBaseParser.EXTENDED);
                }
                break;
            }
            this.state = 863;
            this.multipartIdentifier();
          }
          break;

        case 51:
          _localctx = new DescribeRelationContext(_localctx);
          this.enterOuterAlt(_localctx, 51);
          {
            this.state = 865;
            _la = this._input.LA(1);
            if (!(_la === SqlBaseParser.DESC || _la === SqlBaseParser.DESCRIBE)) {
              this._errHandler.recoverInline(this);
            } else {
              if (this._input.LA(1) === Token.EOF) {
                this.matchedEOF = true;
              }

              this._errHandler.reportMatch(this);
              this.consume();
            }
            this.state = 867;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 83, this._ctx)) {
              case 1:
                {
                  this.state = 866;
                  this.match(SqlBaseParser.TABLE);
                }
                break;
            }
            this.state = 870;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 84, this._ctx)) {
              case 1:
                {
                  this.state = 869;
                  (_localctx as DescribeRelationContext)._option = this._input.LT(1);
                  _la = this._input.LA(1);
                  if (!(_la === SqlBaseParser.EXTENDED || _la === SqlBaseParser.FORMATTED)) {
                    (_localctx as DescribeRelationContext)._option = this._errHandler.recoverInline(this);
                  } else {
                    if (this._input.LA(1) === Token.EOF) {
                      this.matchedEOF = true;
                    }

                    this._errHandler.reportMatch(this);
                    this.consume();
                  }
                }
                break;
            }
            this.state = 872;
            this.multipartIdentifier();
            this.state = 874;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 85, this._ctx)) {
              case 1:
                {
                  this.state = 873;
                  this.partitionSpec();
                }
                break;
            }
            this.state = 877;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 86, this._ctx)) {
              case 1:
                {
                  this.state = 876;
                  this.describeColName();
                }
                break;
            }
          }
          break;

        case 52:
          _localctx = new DescribeQueryContext(_localctx);
          this.enterOuterAlt(_localctx, 52);
          {
            this.state = 879;
            _la = this._input.LA(1);
            if (!(_la === SqlBaseParser.DESC || _la === SqlBaseParser.DESCRIBE)) {
              this._errHandler.recoverInline(this);
            } else {
              if (this._input.LA(1) === Token.EOF) {
                this.matchedEOF = true;
              }

              this._errHandler.reportMatch(this);
              this.consume();
            }
            this.state = 881;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.QUERY) {
              {
                this.state = 880;
                this.match(SqlBaseParser.QUERY);
              }
            }

            this.state = 883;
            this.query();
          }
          break;

        case 53:
          _localctx = new CommentNamespaceContext(_localctx);
          this.enterOuterAlt(_localctx, 53);
          {
            this.state = 884;
            this.match(SqlBaseParser.COMMENT);
            this.state = 885;
            this.match(SqlBaseParser.ON);
            this.state = 886;
            this.namespace();
            this.state = 887;
            this.multipartIdentifier();
            this.state = 888;
            this.match(SqlBaseParser.IS);
            this.state = 889;
            (_localctx as CommentNamespaceContext)._comment = this._input.LT(1);
            _la = this._input.LA(1);
            if (!(_la === SqlBaseParser.NULL || _la === SqlBaseParser.STRING)) {
              (_localctx as CommentNamespaceContext)._comment = this._errHandler.recoverInline(this);
            } else {
              if (this._input.LA(1) === Token.EOF) {
                this.matchedEOF = true;
              }

              this._errHandler.reportMatch(this);
              this.consume();
            }
          }
          break;

        case 54:
          _localctx = new CommentTableContext(_localctx);
          this.enterOuterAlt(_localctx, 54);
          {
            this.state = 891;
            this.match(SqlBaseParser.COMMENT);
            this.state = 892;
            this.match(SqlBaseParser.ON);
            this.state = 893;
            this.match(SqlBaseParser.TABLE);
            this.state = 894;
            this.multipartIdentifier();
            this.state = 895;
            this.match(SqlBaseParser.IS);
            this.state = 896;
            (_localctx as CommentTableContext)._comment = this._input.LT(1);
            _la = this._input.LA(1);
            if (!(_la === SqlBaseParser.NULL || _la === SqlBaseParser.STRING)) {
              (_localctx as CommentTableContext)._comment = this._errHandler.recoverInline(this);
            } else {
              if (this._input.LA(1) === Token.EOF) {
                this.matchedEOF = true;
              }

              this._errHandler.reportMatch(this);
              this.consume();
            }
          }
          break;

        case 55:
          _localctx = new RefreshTableContext(_localctx);
          this.enterOuterAlt(_localctx, 55);
          {
            this.state = 898;
            this.match(SqlBaseParser.REFRESH);
            this.state = 899;
            this.match(SqlBaseParser.TABLE);
            this.state = 900;
            this.multipartIdentifier();
          }
          break;

        case 56:
          _localctx = new RefreshFunctionContext(_localctx);
          this.enterOuterAlt(_localctx, 56);
          {
            this.state = 901;
            this.match(SqlBaseParser.REFRESH);
            this.state = 902;
            this.match(SqlBaseParser.FUNCTION);
            this.state = 903;
            this.multipartIdentifier();
          }
          break;

        case 57:
          _localctx = new RefreshResourceContext(_localctx);
          this.enterOuterAlt(_localctx, 57);
          {
            this.state = 904;
            this.match(SqlBaseParser.REFRESH);
            this.state = 912;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 89, this._ctx)) {
              case 1:
                {
                  this.state = 905;
                  this.match(SqlBaseParser.STRING);
                }
                break;

              case 2:
                {
                  this.state = 909;
                  this._errHandler.sync(this);
                  _alt = this.interpreter.adaptivePredict(this._input, 88, this._ctx);
                  while (_alt !== 1 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1 + 1) {
                      {
                        {
                          this.state = 906;
                          this.matchWildcard();
                        }
                      }
                    }
                    this.state = 911;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 88, this._ctx);
                  }
                }
                break;
            }
          }
          break;

        case 58:
          _localctx = new CacheTableContext(_localctx);
          this.enterOuterAlt(_localctx, 58);
          {
            this.state = 914;
            this.match(SqlBaseParser.CACHE);
            this.state = 916;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.LAZY) {
              {
                this.state = 915;
                this.match(SqlBaseParser.LAZY);
              }
            }

            this.state = 918;
            this.match(SqlBaseParser.TABLE);
            this.state = 919;
            this.multipartIdentifier();
            this.state = 922;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.OPTIONS) {
              {
                this.state = 920;
                this.match(SqlBaseParser.OPTIONS);
                this.state = 921;
                (_localctx as CacheTableContext)._options = this.tablePropertyList();
              }
            }

            this.state = 928;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (
              _la === SqlBaseParser.T__1 ||
              _la === SqlBaseParser.AS ||
              _la === SqlBaseParser.FROM ||
              _la === SqlBaseParser.MAP ||
              _la === SqlBaseParser.REDUCE ||
              _la === SqlBaseParser.SELECT ||
              _la === SqlBaseParser.TABLE ||
              _la === SqlBaseParser.VALUES ||
              _la === SqlBaseParser.WITH
            ) {
              {
                this.state = 925;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SqlBaseParser.AS) {
                  {
                    this.state = 924;
                    this.match(SqlBaseParser.AS);
                  }
                }

                this.state = 927;
                this.query();
              }
            }
          }
          break;

        case 59:
          _localctx = new UncacheTableContext(_localctx);
          this.enterOuterAlt(_localctx, 59);
          {
            this.state = 930;
            this.match(SqlBaseParser.UNCACHE);
            this.state = 931;
            this.match(SqlBaseParser.TABLE);
            this.state = 934;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 94, this._ctx)) {
              case 1:
                {
                  this.state = 932;
                  this.match(SqlBaseParser.IF);
                  this.state = 933;
                  this.match(SqlBaseParser.EXISTS);
                }
                break;
            }
            this.state = 936;
            this.multipartIdentifier();
          }
          break;

        case 60:
          _localctx = new ClearCacheContext(_localctx);
          this.enterOuterAlt(_localctx, 60);
          {
            this.state = 937;
            this.match(SqlBaseParser.CLEAR);
            this.state = 938;
            this.match(SqlBaseParser.CACHE);
          }
          break;

        case 61:
          _localctx = new LoadDataContext(_localctx);
          this.enterOuterAlt(_localctx, 61);
          {
            this.state = 939;
            this.match(SqlBaseParser.LOAD);
            this.state = 940;
            this.match(SqlBaseParser.DATA);
            this.state = 942;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.LOCAL) {
              {
                this.state = 941;
                this.match(SqlBaseParser.LOCAL);
              }
            }

            this.state = 944;
            this.match(SqlBaseParser.INPATH);
            this.state = 945;
            (_localctx as LoadDataContext)._path = this.match(SqlBaseParser.STRING);
            this.state = 947;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.OVERWRITE) {
              {
                this.state = 946;
                this.match(SqlBaseParser.OVERWRITE);
              }
            }

            this.state = 949;
            this.match(SqlBaseParser.INTO);
            this.state = 950;
            this.match(SqlBaseParser.TABLE);
            this.state = 951;
            this.multipartIdentifier();
            this.state = 953;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.PARTITION) {
              {
                this.state = 952;
                this.partitionSpec();
              }
            }
          }
          break;

        case 62:
          _localctx = new TruncateTableContext(_localctx);
          this.enterOuterAlt(_localctx, 62);
          {
            this.state = 955;
            this.match(SqlBaseParser.TRUNCATE);
            this.state = 956;
            this.match(SqlBaseParser.TABLE);
            this.state = 957;
            this.multipartIdentifier();
            this.state = 959;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.PARTITION) {
              {
                this.state = 958;
                this.partitionSpec();
              }
            }
          }
          break;

        case 63:
          _localctx = new RepairTableContext(_localctx);
          this.enterOuterAlt(_localctx, 63);
          {
            this.state = 961;
            this.match(SqlBaseParser.MSCK);
            this.state = 962;
            this.match(SqlBaseParser.REPAIR);
            this.state = 963;
            this.match(SqlBaseParser.TABLE);
            this.state = 964;
            this.multipartIdentifier();
            this.state = 967;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.ADD || _la === SqlBaseParser.DROP || _la === SqlBaseParser.SYNC) {
              {
                this.state = 965;
                (_localctx as RepairTableContext)._option = this._input.LT(1);
                _la = this._input.LA(1);
                if (!(_la === SqlBaseParser.ADD || _la === SqlBaseParser.DROP || _la === SqlBaseParser.SYNC)) {
                  (_localctx as RepairTableContext)._option = this._errHandler.recoverInline(this);
                } else {
                  if (this._input.LA(1) === Token.EOF) {
                    this.matchedEOF = true;
                  }

                  this._errHandler.reportMatch(this);
                  this.consume();
                }
                this.state = 966;
                this.match(SqlBaseParser.PARTITIONS);
              }
            }
          }
          break;

        case 64:
          _localctx = new ManageResourceContext(_localctx);
          this.enterOuterAlt(_localctx, 64);
          {
            this.state = 969;
            (_localctx as ManageResourceContext)._op = this._input.LT(1);
            _la = this._input.LA(1);
            if (!(_la === SqlBaseParser.ADD || _la === SqlBaseParser.LIST)) {
              (_localctx as ManageResourceContext)._op = this._errHandler.recoverInline(this);
            } else {
              if (this._input.LA(1) === Token.EOF) {
                this.matchedEOF = true;
              }

              this._errHandler.reportMatch(this);
              this.consume();
            }
            this.state = 970;
            this.identifier();
            this.state = 974;
            this._errHandler.sync(this);
            _alt = this.interpreter.adaptivePredict(this._input, 100, this._ctx);
            while (_alt !== 1 && _alt !== ATN.INVALID_ALT_NUMBER) {
              if (_alt === 1 + 1) {
                {
                  {
                    this.state = 971;
                    this.matchWildcard();
                  }
                }
              }
              this.state = 976;
              this._errHandler.sync(this);
              _alt = this.interpreter.adaptivePredict(this._input, 100, this._ctx);
            }
          }
          break;

        case 65:
          _localctx = new FailNativeCommandContext(_localctx);
          this.enterOuterAlt(_localctx, 65);
          {
            this.state = 977;
            this.match(SqlBaseParser.SET);
            this.state = 978;
            this.match(SqlBaseParser.ROLE);
            this.state = 982;
            this._errHandler.sync(this);
            _alt = this.interpreter.adaptivePredict(this._input, 101, this._ctx);
            while (_alt !== 1 && _alt !== ATN.INVALID_ALT_NUMBER) {
              if (_alt === 1 + 1) {
                {
                  {
                    this.state = 979;
                    this.matchWildcard();
                  }
                }
              }
              this.state = 984;
              this._errHandler.sync(this);
              _alt = this.interpreter.adaptivePredict(this._input, 101, this._ctx);
            }
          }
          break;

        case 66:
          _localctx = new SetTimeZoneContext(_localctx);
          this.enterOuterAlt(_localctx, 66);
          {
            this.state = 985;
            this.match(SqlBaseParser.SET);
            this.state = 986;
            this.match(SqlBaseParser.TIME);
            this.state = 987;
            this.match(SqlBaseParser.ZONE);
            this.state = 988;
            this.interval();
          }
          break;

        case 67:
          _localctx = new SetTimeZoneContext(_localctx);
          this.enterOuterAlt(_localctx, 67);
          {
            this.state = 989;
            this.match(SqlBaseParser.SET);
            this.state = 990;
            this.match(SqlBaseParser.TIME);
            this.state = 991;
            this.match(SqlBaseParser.ZONE);
            this.state = 992;
            (_localctx as SetTimeZoneContext)._timezone = this._input.LT(1);
            _la = this._input.LA(1);
            if (!(_la === SqlBaseParser.LOCAL || _la === SqlBaseParser.STRING)) {
              (_localctx as SetTimeZoneContext)._timezone = this._errHandler.recoverInline(this);
            } else {
              if (this._input.LA(1) === Token.EOF) {
                this.matchedEOF = true;
              }

              this._errHandler.reportMatch(this);
              this.consume();
            }
          }
          break;

        case 68:
          _localctx = new SetTimeZoneContext(_localctx);
          this.enterOuterAlt(_localctx, 68);
          {
            this.state = 993;
            this.match(SqlBaseParser.SET);
            this.state = 994;
            this.match(SqlBaseParser.TIME);
            this.state = 995;
            this.match(SqlBaseParser.ZONE);
            this.state = 999;
            this._errHandler.sync(this);
            _alt = this.interpreter.adaptivePredict(this._input, 102, this._ctx);
            while (_alt !== 1 && _alt !== ATN.INVALID_ALT_NUMBER) {
              if (_alt === 1 + 1) {
                {
                  {
                    this.state = 996;
                    this.matchWildcard();
                  }
                }
              }
              this.state = 1001;
              this._errHandler.sync(this);
              _alt = this.interpreter.adaptivePredict(this._input, 102, this._ctx);
            }
          }
          break;

        case 69:
          _localctx = new SetQuotedConfigurationContext(_localctx);
          this.enterOuterAlt(_localctx, 69);
          {
            this.state = 1002;
            this.match(SqlBaseParser.SET);
            this.state = 1003;
            this.configKey();
            this.state = 1004;
            this.match(SqlBaseParser.EQ);
            this.state = 1005;
            this.configValue();
          }
          break;

        case 70:
          _localctx = new SetQuotedConfigurationContext(_localctx);
          this.enterOuterAlt(_localctx, 70);
          {
            this.state = 1007;
            this.match(SqlBaseParser.SET);
            this.state = 1008;
            this.configKey();
            this.state = 1016;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.EQ) {
              {
                this.state = 1009;
                this.match(SqlBaseParser.EQ);
                this.state = 1013;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 103, this._ctx);
                while (_alt !== 1 && _alt !== ATN.INVALID_ALT_NUMBER) {
                  if (_alt === 1 + 1) {
                    {
                      {
                        this.state = 1010;
                        this.matchWildcard();
                      }
                    }
                  }
                  this.state = 1015;
                  this._errHandler.sync(this);
                  _alt = this.interpreter.adaptivePredict(this._input, 103, this._ctx);
                }
              }
            }
          }
          break;

        case 71:
          _localctx = new SetQuotedConfigurationContext(_localctx);
          this.enterOuterAlt(_localctx, 71);
          {
            this.state = 1018;
            this.match(SqlBaseParser.SET);
            this.state = 1022;
            this._errHandler.sync(this);
            _alt = this.interpreter.adaptivePredict(this._input, 105, this._ctx);
            while (_alt !== 1 && _alt !== ATN.INVALID_ALT_NUMBER) {
              if (_alt === 1 + 1) {
                {
                  {
                    this.state = 1019;
                    this.matchWildcard();
                  }
                }
              }
              this.state = 1024;
              this._errHandler.sync(this);
              _alt = this.interpreter.adaptivePredict(this._input, 105, this._ctx);
            }
            this.state = 1025;
            this.match(SqlBaseParser.EQ);
            this.state = 1026;
            this.configValue();
          }
          break;

        case 72:
          _localctx = new SetConfigurationContext(_localctx);
          this.enterOuterAlt(_localctx, 72);
          {
            this.state = 1027;
            this.match(SqlBaseParser.SET);
            this.state = 1031;
            this._errHandler.sync(this);
            _alt = this.interpreter.adaptivePredict(this._input, 106, this._ctx);
            while (_alt !== 1 && _alt !== ATN.INVALID_ALT_NUMBER) {
              if (_alt === 1 + 1) {
                {
                  {
                    this.state = 1028;
                    this.matchWildcard();
                  }
                }
              }
              this.state = 1033;
              this._errHandler.sync(this);
              _alt = this.interpreter.adaptivePredict(this._input, 106, this._ctx);
            }
          }
          break;

        case 73:
          _localctx = new ResetQuotedConfigurationContext(_localctx);
          this.enterOuterAlt(_localctx, 73);
          {
            this.state = 1034;
            this.match(SqlBaseParser.RESET);
            this.state = 1035;
            this.configKey();
          }
          break;

        case 74:
          _localctx = new ResetConfigurationContext(_localctx);
          this.enterOuterAlt(_localctx, 74);
          {
            this.state = 1036;
            this.match(SqlBaseParser.RESET);
            this.state = 1040;
            this._errHandler.sync(this);
            _alt = this.interpreter.adaptivePredict(this._input, 107, this._ctx);
            while (_alt !== 1 && _alt !== ATN.INVALID_ALT_NUMBER) {
              if (_alt === 1 + 1) {
                {
                  {
                    this.state = 1037;
                    this.matchWildcard();
                  }
                }
              }
              this.state = 1042;
              this._errHandler.sync(this);
              _alt = this.interpreter.adaptivePredict(this._input, 107, this._ctx);
            }
          }
          break;

        case 75:
          _localctx = new FailNativeCommandContext(_localctx);
          this.enterOuterAlt(_localctx, 75);
          {
            this.state = 1043;
            this.unsupportedHiveNativeCommands();
            this.state = 1047;
            this._errHandler.sync(this);
            _alt = this.interpreter.adaptivePredict(this._input, 108, this._ctx);
            while (_alt !== 1 && _alt !== ATN.INVALID_ALT_NUMBER) {
              if (_alt === 1 + 1) {
                {
                  {
                    this.state = 1044;
                    this.matchWildcard();
                  }
                }
              }
              this.state = 1049;
              this._errHandler.sync(this);
              _alt = this.interpreter.adaptivePredict(this._input, 108, this._ctx);
            }
          }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public configKey(): ConfigKeyContext {
    const _localctx: ConfigKeyContext = new ConfigKeyContext(this._ctx, this.state);
    this.enterRule(_localctx, 16, SqlBaseParser.RULE_configKey);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1052;
        this.quotedIdentifier();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public configValue(): ConfigValueContext {
    const _localctx: ConfigValueContext = new ConfigValueContext(this._ctx, this.state);
    this.enterRule(_localctx, 18, SqlBaseParser.RULE_configValue);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1054;
        this.quotedIdentifier();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public unsupportedHiveNativeCommands(): UnsupportedHiveNativeCommandsContext {
    const _localctx: UnsupportedHiveNativeCommandsContext = new UnsupportedHiveNativeCommandsContext(
      this._ctx,
      this.state
    );
    this.enterRule(_localctx, 20, SqlBaseParser.RULE_unsupportedHiveNativeCommands);
    let _la: number;
    try {
      this.state = 1224;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 117, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 1056;
            _localctx._kw1 = this.match(SqlBaseParser.CREATE);
            this.state = 1057;
            _localctx._kw2 = this.match(SqlBaseParser.ROLE);
          }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 1058;
            _localctx._kw1 = this.match(SqlBaseParser.DROP);
            this.state = 1059;
            _localctx._kw2 = this.match(SqlBaseParser.ROLE);
          }
          break;

        case 3:
          this.enterOuterAlt(_localctx, 3);
          {
            this.state = 1060;
            _localctx._kw1 = this.match(SqlBaseParser.GRANT);
            this.state = 1062;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 110, this._ctx)) {
              case 1:
                {
                  this.state = 1061;
                  _localctx._kw2 = this.match(SqlBaseParser.ROLE);
                }
                break;
            }
          }
          break;

        case 4:
          this.enterOuterAlt(_localctx, 4);
          {
            this.state = 1064;
            _localctx._kw1 = this.match(SqlBaseParser.REVOKE);
            this.state = 1066;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 111, this._ctx)) {
              case 1:
                {
                  this.state = 1065;
                  _localctx._kw2 = this.match(SqlBaseParser.ROLE);
                }
                break;
            }
          }
          break;

        case 5:
          this.enterOuterAlt(_localctx, 5);
          {
            this.state = 1068;
            _localctx._kw1 = this.match(SqlBaseParser.SHOW);
            this.state = 1069;
            _localctx._kw2 = this.match(SqlBaseParser.GRANT);
          }
          break;

        case 6:
          this.enterOuterAlt(_localctx, 6);
          {
            this.state = 1070;
            _localctx._kw1 = this.match(SqlBaseParser.SHOW);
            this.state = 1071;
            _localctx._kw2 = this.match(SqlBaseParser.ROLE);
            this.state = 1073;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 112, this._ctx)) {
              case 1:
                {
                  this.state = 1072;
                  _localctx._kw3 = this.match(SqlBaseParser.GRANT);
                }
                break;
            }
          }
          break;

        case 7:
          this.enterOuterAlt(_localctx, 7);
          {
            this.state = 1075;
            _localctx._kw1 = this.match(SqlBaseParser.SHOW);
            this.state = 1076;
            _localctx._kw2 = this.match(SqlBaseParser.PRINCIPALS);
          }
          break;

        case 8:
          this.enterOuterAlt(_localctx, 8);
          {
            this.state = 1077;
            _localctx._kw1 = this.match(SqlBaseParser.SHOW);
            this.state = 1078;
            _localctx._kw2 = this.match(SqlBaseParser.ROLES);
          }
          break;

        case 9:
          this.enterOuterAlt(_localctx, 9);
          {
            this.state = 1079;
            _localctx._kw1 = this.match(SqlBaseParser.SHOW);
            this.state = 1080;
            _localctx._kw2 = this.match(SqlBaseParser.CURRENT);
            this.state = 1081;
            _localctx._kw3 = this.match(SqlBaseParser.ROLES);
          }
          break;

        case 10:
          this.enterOuterAlt(_localctx, 10);
          {
            this.state = 1082;
            _localctx._kw1 = this.match(SqlBaseParser.EXPORT);
            this.state = 1083;
            _localctx._kw2 = this.match(SqlBaseParser.TABLE);
          }
          break;

        case 11:
          this.enterOuterAlt(_localctx, 11);
          {
            this.state = 1084;
            _localctx._kw1 = this.match(SqlBaseParser.IMPORT);
            this.state = 1085;
            _localctx._kw2 = this.match(SqlBaseParser.TABLE);
          }
          break;

        case 12:
          this.enterOuterAlt(_localctx, 12);
          {
            this.state = 1086;
            _localctx._kw1 = this.match(SqlBaseParser.SHOW);
            this.state = 1087;
            _localctx._kw2 = this.match(SqlBaseParser.COMPACTIONS);
          }
          break;

        case 13:
          this.enterOuterAlt(_localctx, 13);
          {
            this.state = 1088;
            _localctx._kw1 = this.match(SqlBaseParser.SHOW);
            this.state = 1089;
            _localctx._kw2 = this.match(SqlBaseParser.CREATE);
            this.state = 1090;
            _localctx._kw3 = this.match(SqlBaseParser.TABLE);
          }
          break;

        case 14:
          this.enterOuterAlt(_localctx, 14);
          {
            this.state = 1091;
            _localctx._kw1 = this.match(SqlBaseParser.SHOW);
            this.state = 1092;
            _localctx._kw2 = this.match(SqlBaseParser.TRANSACTIONS);
          }
          break;

        case 15:
          this.enterOuterAlt(_localctx, 15);
          {
            this.state = 1093;
            _localctx._kw1 = this.match(SqlBaseParser.SHOW);
            this.state = 1094;
            _localctx._kw2 = this.match(SqlBaseParser.INDEXES);
          }
          break;

        case 16:
          this.enterOuterAlt(_localctx, 16);
          {
            this.state = 1095;
            _localctx._kw1 = this.match(SqlBaseParser.SHOW);
            this.state = 1096;
            _localctx._kw2 = this.match(SqlBaseParser.LOCKS);
          }
          break;

        case 17:
          this.enterOuterAlt(_localctx, 17);
          {
            this.state = 1097;
            _localctx._kw1 = this.match(SqlBaseParser.CREATE);
            this.state = 1098;
            _localctx._kw2 = this.match(SqlBaseParser.INDEX);
          }
          break;

        case 18:
          this.enterOuterAlt(_localctx, 18);
          {
            this.state = 1099;
            _localctx._kw1 = this.match(SqlBaseParser.DROP);
            this.state = 1100;
            _localctx._kw2 = this.match(SqlBaseParser.INDEX);
          }
          break;

        case 19:
          this.enterOuterAlt(_localctx, 19);
          {
            this.state = 1101;
            _localctx._kw1 = this.match(SqlBaseParser.ALTER);
            this.state = 1102;
            _localctx._kw2 = this.match(SqlBaseParser.INDEX);
          }
          break;

        case 20:
          this.enterOuterAlt(_localctx, 20);
          {
            this.state = 1103;
            _localctx._kw1 = this.match(SqlBaseParser.LOCK);
            this.state = 1104;
            _localctx._kw2 = this.match(SqlBaseParser.TABLE);
          }
          break;

        case 21:
          this.enterOuterAlt(_localctx, 21);
          {
            this.state = 1105;
            _localctx._kw1 = this.match(SqlBaseParser.LOCK);
            this.state = 1106;
            _localctx._kw2 = this.match(SqlBaseParser.DATABASE);
          }
          break;

        case 22:
          this.enterOuterAlt(_localctx, 22);
          {
            this.state = 1107;
            _localctx._kw1 = this.match(SqlBaseParser.UNLOCK);
            this.state = 1108;
            _localctx._kw2 = this.match(SqlBaseParser.TABLE);
          }
          break;

        case 23:
          this.enterOuterAlt(_localctx, 23);
          {
            this.state = 1109;
            _localctx._kw1 = this.match(SqlBaseParser.UNLOCK);
            this.state = 1110;
            _localctx._kw2 = this.match(SqlBaseParser.DATABASE);
          }
          break;

        case 24:
          this.enterOuterAlt(_localctx, 24);
          {
            this.state = 1111;
            _localctx._kw1 = this.match(SqlBaseParser.CREATE);
            this.state = 1112;
            _localctx._kw2 = this.match(SqlBaseParser.TEMPORARY);
            this.state = 1113;
            _localctx._kw3 = this.match(SqlBaseParser.MACRO);
          }
          break;

        case 25:
          this.enterOuterAlt(_localctx, 25);
          {
            this.state = 1114;
            _localctx._kw1 = this.match(SqlBaseParser.DROP);
            this.state = 1115;
            _localctx._kw2 = this.match(SqlBaseParser.TEMPORARY);
            this.state = 1116;
            _localctx._kw3 = this.match(SqlBaseParser.MACRO);
          }
          break;

        case 26:
          this.enterOuterAlt(_localctx, 26);
          {
            this.state = 1117;
            _localctx._kw1 = this.match(SqlBaseParser.ALTER);
            this.state = 1118;
            _localctx._kw2 = this.match(SqlBaseParser.TABLE);
            this.state = 1119;
            this.tableIdentifier();
            this.state = 1120;
            _localctx._kw3 = this.match(SqlBaseParser.NOT);
            this.state = 1121;
            _localctx._kw4 = this.match(SqlBaseParser.CLUSTERED);
          }
          break;

        case 27:
          this.enterOuterAlt(_localctx, 27);
          {
            this.state = 1123;
            _localctx._kw1 = this.match(SqlBaseParser.ALTER);
            this.state = 1124;
            _localctx._kw2 = this.match(SqlBaseParser.TABLE);
            this.state = 1125;
            this.tableIdentifier();
            this.state = 1126;
            _localctx._kw3 = this.match(SqlBaseParser.CLUSTERED);
            this.state = 1127;
            _localctx._kw4 = this.match(SqlBaseParser.BY);
          }
          break;

        case 28:
          this.enterOuterAlt(_localctx, 28);
          {
            this.state = 1129;
            _localctx._kw1 = this.match(SqlBaseParser.ALTER);
            this.state = 1130;
            _localctx._kw2 = this.match(SqlBaseParser.TABLE);
            this.state = 1131;
            this.tableIdentifier();
            this.state = 1132;
            _localctx._kw3 = this.match(SqlBaseParser.NOT);
            this.state = 1133;
            _localctx._kw4 = this.match(SqlBaseParser.SORTED);
          }
          break;

        case 29:
          this.enterOuterAlt(_localctx, 29);
          {
            this.state = 1135;
            _localctx._kw1 = this.match(SqlBaseParser.ALTER);
            this.state = 1136;
            _localctx._kw2 = this.match(SqlBaseParser.TABLE);
            this.state = 1137;
            this.tableIdentifier();
            this.state = 1138;
            _localctx._kw3 = this.match(SqlBaseParser.SKEWED);
            this.state = 1139;
            _localctx._kw4 = this.match(SqlBaseParser.BY);
          }
          break;

        case 30:
          this.enterOuterAlt(_localctx, 30);
          {
            this.state = 1141;
            _localctx._kw1 = this.match(SqlBaseParser.ALTER);
            this.state = 1142;
            _localctx._kw2 = this.match(SqlBaseParser.TABLE);
            this.state = 1143;
            this.tableIdentifier();
            this.state = 1144;
            _localctx._kw3 = this.match(SqlBaseParser.NOT);
            this.state = 1145;
            _localctx._kw4 = this.match(SqlBaseParser.SKEWED);
          }
          break;

        case 31:
          this.enterOuterAlt(_localctx, 31);
          {
            this.state = 1147;
            _localctx._kw1 = this.match(SqlBaseParser.ALTER);
            this.state = 1148;
            _localctx._kw2 = this.match(SqlBaseParser.TABLE);
            this.state = 1149;
            this.tableIdentifier();
            this.state = 1150;
            _localctx._kw3 = this.match(SqlBaseParser.NOT);
            this.state = 1151;
            _localctx._kw4 = this.match(SqlBaseParser.STORED);
            this.state = 1152;
            _localctx._kw5 = this.match(SqlBaseParser.AS);
            this.state = 1153;
            _localctx._kw6 = this.match(SqlBaseParser.DIRECTORIES);
          }
          break;

        case 32:
          this.enterOuterAlt(_localctx, 32);
          {
            this.state = 1155;
            _localctx._kw1 = this.match(SqlBaseParser.ALTER);
            this.state = 1156;
            _localctx._kw2 = this.match(SqlBaseParser.TABLE);
            this.state = 1157;
            this.tableIdentifier();
            this.state = 1158;
            _localctx._kw3 = this.match(SqlBaseParser.SET);
            this.state = 1159;
            _localctx._kw4 = this.match(SqlBaseParser.SKEWED);
            this.state = 1160;
            _localctx._kw5 = this.match(SqlBaseParser.LOCATION);
          }
          break;

        case 33:
          this.enterOuterAlt(_localctx, 33);
          {
            this.state = 1162;
            _localctx._kw1 = this.match(SqlBaseParser.ALTER);
            this.state = 1163;
            _localctx._kw2 = this.match(SqlBaseParser.TABLE);
            this.state = 1164;
            this.tableIdentifier();
            this.state = 1165;
            _localctx._kw3 = this.match(SqlBaseParser.EXCHANGE);
            this.state = 1166;
            _localctx._kw4 = this.match(SqlBaseParser.PARTITION);
          }
          break;

        case 34:
          this.enterOuterAlt(_localctx, 34);
          {
            this.state = 1168;
            _localctx._kw1 = this.match(SqlBaseParser.ALTER);
            this.state = 1169;
            _localctx._kw2 = this.match(SqlBaseParser.TABLE);
            this.state = 1170;
            this.tableIdentifier();
            this.state = 1171;
            _localctx._kw3 = this.match(SqlBaseParser.ARCHIVE);
            this.state = 1172;
            _localctx._kw4 = this.match(SqlBaseParser.PARTITION);
          }
          break;

        case 35:
          this.enterOuterAlt(_localctx, 35);
          {
            this.state = 1174;
            _localctx._kw1 = this.match(SqlBaseParser.ALTER);
            this.state = 1175;
            _localctx._kw2 = this.match(SqlBaseParser.TABLE);
            this.state = 1176;
            this.tableIdentifier();
            this.state = 1177;
            _localctx._kw3 = this.match(SqlBaseParser.UNARCHIVE);
            this.state = 1178;
            _localctx._kw4 = this.match(SqlBaseParser.PARTITION);
          }
          break;

        case 36:
          this.enterOuterAlt(_localctx, 36);
          {
            this.state = 1180;
            _localctx._kw1 = this.match(SqlBaseParser.ALTER);
            this.state = 1181;
            _localctx._kw2 = this.match(SqlBaseParser.TABLE);
            this.state = 1182;
            this.tableIdentifier();
            this.state = 1183;
            _localctx._kw3 = this.match(SqlBaseParser.TOUCH);
          }
          break;

        case 37:
          this.enterOuterAlt(_localctx, 37);
          {
            this.state = 1185;
            _localctx._kw1 = this.match(SqlBaseParser.ALTER);
            this.state = 1186;
            _localctx._kw2 = this.match(SqlBaseParser.TABLE);
            this.state = 1187;
            this.tableIdentifier();
            this.state = 1189;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.PARTITION) {
              {
                this.state = 1188;
                this.partitionSpec();
              }
            }

            this.state = 1191;
            _localctx._kw3 = this.match(SqlBaseParser.COMPACT);
          }
          break;

        case 38:
          this.enterOuterAlt(_localctx, 38);
          {
            this.state = 1193;
            _localctx._kw1 = this.match(SqlBaseParser.ALTER);
            this.state = 1194;
            _localctx._kw2 = this.match(SqlBaseParser.TABLE);
            this.state = 1195;
            this.tableIdentifier();
            this.state = 1197;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.PARTITION) {
              {
                this.state = 1196;
                this.partitionSpec();
              }
            }

            this.state = 1199;
            _localctx._kw3 = this.match(SqlBaseParser.CONCATENATE);
          }
          break;

        case 39:
          this.enterOuterAlt(_localctx, 39);
          {
            this.state = 1201;
            _localctx._kw1 = this.match(SqlBaseParser.ALTER);
            this.state = 1202;
            _localctx._kw2 = this.match(SqlBaseParser.TABLE);
            this.state = 1203;
            this.tableIdentifier();
            this.state = 1205;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.PARTITION) {
              {
                this.state = 1204;
                this.partitionSpec();
              }
            }

            this.state = 1207;
            _localctx._kw3 = this.match(SqlBaseParser.SET);
            this.state = 1208;
            _localctx._kw4 = this.match(SqlBaseParser.FILEFORMAT);
          }
          break;

        case 40:
          this.enterOuterAlt(_localctx, 40);
          {
            this.state = 1210;
            _localctx._kw1 = this.match(SqlBaseParser.ALTER);
            this.state = 1211;
            _localctx._kw2 = this.match(SqlBaseParser.TABLE);
            this.state = 1212;
            this.tableIdentifier();
            this.state = 1214;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.PARTITION) {
              {
                this.state = 1213;
                this.partitionSpec();
              }
            }

            this.state = 1216;
            _localctx._kw3 = this.match(SqlBaseParser.REPLACE);
            this.state = 1217;
            _localctx._kw4 = this.match(SqlBaseParser.COLUMNS);
          }
          break;

        case 41:
          this.enterOuterAlt(_localctx, 41);
          {
            this.state = 1219;
            _localctx._kw1 = this.match(SqlBaseParser.START);
            this.state = 1220;
            _localctx._kw2 = this.match(SqlBaseParser.TRANSACTION);
          }
          break;

        case 42:
          this.enterOuterAlt(_localctx, 42);
          {
            this.state = 1221;
            _localctx._kw1 = this.match(SqlBaseParser.COMMIT);
          }
          break;

        case 43:
          this.enterOuterAlt(_localctx, 43);
          {
            this.state = 1222;
            _localctx._kw1 = this.match(SqlBaseParser.ROLLBACK);
          }
          break;

        case 44:
          this.enterOuterAlt(_localctx, 44);
          {
            this.state = 1223;
            _localctx._kw1 = this.match(SqlBaseParser.DFS);
          }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public createTableHeader(): CreateTableHeaderContext {
    const _localctx: CreateTableHeaderContext = new CreateTableHeaderContext(this._ctx, this.state);
    this.enterRule(_localctx, 22, SqlBaseParser.RULE_createTableHeader);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1226;
        this.match(SqlBaseParser.CREATE);
        this.state = 1228;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === SqlBaseParser.TEMPORARY) {
          {
            this.state = 1227;
            this.match(SqlBaseParser.TEMPORARY);
          }
        }

        this.state = 1231;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === SqlBaseParser.EXTERNAL) {
          {
            this.state = 1230;
            this.match(SqlBaseParser.EXTERNAL);
          }
        }

        this.state = 1233;
        this.match(SqlBaseParser.TABLE);
        this.state = 1237;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 120, this._ctx)) {
          case 1:
            {
              this.state = 1234;
              this.match(SqlBaseParser.IF);
              this.state = 1235;
              this.match(SqlBaseParser.NOT);
              this.state = 1236;
              this.match(SqlBaseParser.EXISTS);
            }
            break;
        }
        this.state = 1239;
        this.multipartIdentifier();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public replaceTableHeader(): ReplaceTableHeaderContext {
    const _localctx: ReplaceTableHeaderContext = new ReplaceTableHeaderContext(this._ctx, this.state);
    this.enterRule(_localctx, 24, SqlBaseParser.RULE_replaceTableHeader);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1243;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === SqlBaseParser.CREATE) {
          {
            this.state = 1241;
            this.match(SqlBaseParser.CREATE);
            this.state = 1242;
            this.match(SqlBaseParser.OR);
          }
        }

        this.state = 1245;
        this.match(SqlBaseParser.REPLACE);
        this.state = 1246;
        this.match(SqlBaseParser.TABLE);
        this.state = 1247;
        this.multipartIdentifier();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public bucketSpec(): BucketSpecContext {
    const _localctx: BucketSpecContext = new BucketSpecContext(this._ctx, this.state);
    this.enterRule(_localctx, 26, SqlBaseParser.RULE_bucketSpec);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1249;
        this.match(SqlBaseParser.CLUSTERED);
        this.state = 1250;
        this.match(SqlBaseParser.BY);
        this.state = 1251;
        this.identifierList();
        this.state = 1255;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === SqlBaseParser.SORTED) {
          {
            this.state = 1252;
            this.match(SqlBaseParser.SORTED);
            this.state = 1253;
            this.match(SqlBaseParser.BY);
            this.state = 1254;
            this.orderedIdentifierList();
          }
        }

        this.state = 1257;
        this.match(SqlBaseParser.INTO);
        this.state = 1258;
        this.match(SqlBaseParser.INTEGER_VALUE);
        this.state = 1259;
        this.match(SqlBaseParser.BUCKETS);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public skewSpec(): SkewSpecContext {
    const _localctx: SkewSpecContext = new SkewSpecContext(this._ctx, this.state);
    this.enterRule(_localctx, 28, SqlBaseParser.RULE_skewSpec);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1261;
        this.match(SqlBaseParser.SKEWED);
        this.state = 1262;
        this.match(SqlBaseParser.BY);
        this.state = 1263;
        this.identifierList();
        this.state = 1264;
        this.match(SqlBaseParser.ON);
        this.state = 1267;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 123, this._ctx)) {
          case 1:
            {
              this.state = 1265;
              this.constantList();
            }
            break;

          case 2:
            {
              this.state = 1266;
              this.nestedConstantList();
            }
            break;
        }
        this.state = 1272;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 124, this._ctx)) {
          case 1:
            {
              this.state = 1269;
              this.match(SqlBaseParser.STORED);
              this.state = 1270;
              this.match(SqlBaseParser.AS);
              this.state = 1271;
              this.match(SqlBaseParser.DIRECTORIES);
            }
            break;
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public locationSpec(): LocationSpecContext {
    const _localctx: LocationSpecContext = new LocationSpecContext(this._ctx, this.state);
    this.enterRule(_localctx, 30, SqlBaseParser.RULE_locationSpec);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1274;
        this.match(SqlBaseParser.LOCATION);
        this.state = 1275;
        this.match(SqlBaseParser.STRING);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public commentSpec(): CommentSpecContext {
    const _localctx: CommentSpecContext = new CommentSpecContext(this._ctx, this.state);
    this.enterRule(_localctx, 32, SqlBaseParser.RULE_commentSpec);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1277;
        this.match(SqlBaseParser.COMMENT);
        this.state = 1278;
        this.match(SqlBaseParser.STRING);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public query(): QueryContext {
    const _localctx: QueryContext = new QueryContext(this._ctx, this.state);
    this.enterRule(_localctx, 34, SqlBaseParser.RULE_query);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1281;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === SqlBaseParser.WITH) {
          {
            this.state = 1280;
            this.ctes();
          }
        }

        this.state = 1283;
        this.queryTerm(0);
        this.state = 1284;
        this.queryOrganization();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public insertInto(): InsertIntoContext {
    let _localctx: InsertIntoContext = new InsertIntoContext(this._ctx, this.state);
    this.enterRule(_localctx, 36, SqlBaseParser.RULE_insertInto);
    let _la: number;
    try {
      this.state = 1347;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 140, this._ctx)) {
        case 1:
          _localctx = new InsertOverwriteTableContext(_localctx);
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 1286;
            this.match(SqlBaseParser.INSERT);
            this.state = 1287;
            this.match(SqlBaseParser.OVERWRITE);
            this.state = 1289;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 126, this._ctx)) {
              case 1:
                {
                  this.state = 1288;
                  this.match(SqlBaseParser.TABLE);
                }
                break;
            }
            this.state = 1291;
            this.multipartIdentifier();
            this.state = 1298;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.PARTITION) {
              {
                this.state = 1292;
                this.partitionSpec();
                this.state = 1296;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SqlBaseParser.IF) {
                  {
                    this.state = 1293;
                    this.match(SqlBaseParser.IF);
                    this.state = 1294;
                    this.match(SqlBaseParser.NOT);
                    this.state = 1295;
                    this.match(SqlBaseParser.EXISTS);
                  }
                }
              }
            }

            this.state = 1301;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 129, this._ctx)) {
              case 1:
                {
                  this.state = 1300;
                  this.identifierList();
                }
                break;
            }
          }
          break;

        case 2:
          _localctx = new InsertIntoTableContext(_localctx);
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 1303;
            this.match(SqlBaseParser.INSERT);
            this.state = 1304;
            this.match(SqlBaseParser.INTO);
            this.state = 1306;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 130, this._ctx)) {
              case 1:
                {
                  this.state = 1305;
                  this.match(SqlBaseParser.TABLE);
                }
                break;
            }
            this.state = 1308;
            this.multipartIdentifier();
            this.state = 1310;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.PARTITION) {
              {
                this.state = 1309;
                this.partitionSpec();
              }
            }

            this.state = 1315;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.IF) {
              {
                this.state = 1312;
                this.match(SqlBaseParser.IF);
                this.state = 1313;
                this.match(SqlBaseParser.NOT);
                this.state = 1314;
                this.match(SqlBaseParser.EXISTS);
              }
            }

            this.state = 1318;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 133, this._ctx)) {
              case 1:
                {
                  this.state = 1317;
                  this.identifierList();
                }
                break;
            }
          }
          break;

        case 3:
          _localctx = new InsertOverwriteHiveDirContext(_localctx);
          this.enterOuterAlt(_localctx, 3);
          {
            this.state = 1320;
            this.match(SqlBaseParser.INSERT);
            this.state = 1321;
            this.match(SqlBaseParser.OVERWRITE);
            this.state = 1323;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.LOCAL) {
              {
                this.state = 1322;
                this.match(SqlBaseParser.LOCAL);
              }
            }

            this.state = 1325;
            this.match(SqlBaseParser.DIRECTORY);
            this.state = 1326;
            (_localctx as InsertOverwriteHiveDirContext)._path = this.match(SqlBaseParser.STRING);
            this.state = 1328;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.ROW) {
              {
                this.state = 1327;
                this.rowFormat();
              }
            }

            this.state = 1331;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.STORED) {
              {
                this.state = 1330;
                this.createFileFormat();
              }
            }
          }
          break;

        case 4:
          _localctx = new InsertOverwriteDirContext(_localctx);
          this.enterOuterAlt(_localctx, 4);
          {
            this.state = 1333;
            this.match(SqlBaseParser.INSERT);
            this.state = 1334;
            this.match(SqlBaseParser.OVERWRITE);
            this.state = 1336;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.LOCAL) {
              {
                this.state = 1335;
                this.match(SqlBaseParser.LOCAL);
              }
            }

            this.state = 1338;
            this.match(SqlBaseParser.DIRECTORY);
            this.state = 1340;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.STRING) {
              {
                this.state = 1339;
                (_localctx as InsertOverwriteDirContext)._path = this.match(SqlBaseParser.STRING);
              }
            }

            this.state = 1342;
            this.tableProvider();
            this.state = 1345;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.OPTIONS) {
              {
                this.state = 1343;
                this.match(SqlBaseParser.OPTIONS);
                this.state = 1344;
                (_localctx as InsertOverwriteDirContext)._options = this.tablePropertyList();
              }
            }
          }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public partitionSpecLocation(): PartitionSpecLocationContext {
    const _localctx: PartitionSpecLocationContext = new PartitionSpecLocationContext(this._ctx, this.state);
    this.enterRule(_localctx, 38, SqlBaseParser.RULE_partitionSpecLocation);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1349;
        this.partitionSpec();
        this.state = 1351;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === SqlBaseParser.LOCATION) {
          {
            this.state = 1350;
            this.locationSpec();
          }
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public partitionSpec(): PartitionSpecContext {
    const _localctx: PartitionSpecContext = new PartitionSpecContext(this._ctx, this.state);
    this.enterRule(_localctx, 40, SqlBaseParser.RULE_partitionSpec);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1353;
        this.match(SqlBaseParser.PARTITION);
        this.state = 1354;
        this.match(SqlBaseParser.T__1);
        this.state = 1355;
        this.partitionVal();
        this.state = 1360;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === SqlBaseParser.T__3) {
          {
            {
              this.state = 1356;
              this.match(SqlBaseParser.T__3);
              this.state = 1357;
              this.partitionVal();
            }
          }
          this.state = 1362;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
        this.state = 1363;
        this.match(SqlBaseParser.T__2);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public partitionVal(): PartitionValContext {
    const _localctx: PartitionValContext = new PartitionValContext(this._ctx, this.state);
    this.enterRule(_localctx, 42, SqlBaseParser.RULE_partitionVal);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1365;
        this.identifier();
        this.state = 1368;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === SqlBaseParser.EQ) {
          {
            this.state = 1366;
            this.match(SqlBaseParser.EQ);
            this.state = 1367;
            this.constant();
          }
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public namespace(): NamespaceContext {
    const _localctx: NamespaceContext = new NamespaceContext(this._ctx, this.state);
    this.enterRule(_localctx, 44, SqlBaseParser.RULE_namespace);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1370;
        _la = this._input.LA(1);
        if (!(_la === SqlBaseParser.DATABASE || _la === SqlBaseParser.NAMESPACE || _la === SqlBaseParser.SCHEMA)) {
          this._errHandler.recoverInline(this);
        } else {
          if (this._input.LA(1) === Token.EOF) {
            this.matchedEOF = true;
          }

          this._errHandler.reportMatch(this);
          this.consume();
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public describeFuncName(): DescribeFuncNameContext {
    const _localctx: DescribeFuncNameContext = new DescribeFuncNameContext(this._ctx, this.state);
    this.enterRule(_localctx, 46, SqlBaseParser.RULE_describeFuncName);
    try {
      this.state = 1377;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 144, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 1372;
            this.qualifiedName();
          }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 1373;
            this.match(SqlBaseParser.STRING);
          }
          break;

        case 3:
          this.enterOuterAlt(_localctx, 3);
          {
            this.state = 1374;
            this.comparisonOperator();
          }
          break;

        case 4:
          this.enterOuterAlt(_localctx, 4);
          {
            this.state = 1375;
            this.arithmeticOperator();
          }
          break;

        case 5:
          this.enterOuterAlt(_localctx, 5);
          {
            this.state = 1376;
            this.predicateOperator();
          }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public describeColName(): DescribeColNameContext {
    const _localctx: DescribeColNameContext = new DescribeColNameContext(this._ctx, this.state);
    this.enterRule(_localctx, 48, SqlBaseParser.RULE_describeColName);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1379;
        _localctx._identifier = this.identifier();
        _localctx._nameParts.push(_localctx._identifier);
        this.state = 1384;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === SqlBaseParser.T__4) {
          {
            {
              this.state = 1380;
              this.match(SqlBaseParser.T__4);
              this.state = 1381;
              _localctx._identifier = this.identifier();
              _localctx._nameParts.push(_localctx._identifier);
            }
          }
          this.state = 1386;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public ctes(): CtesContext {
    const _localctx: CtesContext = new CtesContext(this._ctx, this.state);
    this.enterRule(_localctx, 50, SqlBaseParser.RULE_ctes);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1387;
        this.match(SqlBaseParser.WITH);
        this.state = 1388;
        this.namedQuery();
        this.state = 1393;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === SqlBaseParser.T__3) {
          {
            {
              this.state = 1389;
              this.match(SqlBaseParser.T__3);
              this.state = 1390;
              this.namedQuery();
            }
          }
          this.state = 1395;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public namedQuery(): NamedQueryContext {
    const _localctx: NamedQueryContext = new NamedQueryContext(this._ctx, this.state);
    this.enterRule(_localctx, 52, SqlBaseParser.RULE_namedQuery);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1396;
        _localctx._name = this.errorCapturingIdentifier();
        this.state = 1398;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 147, this._ctx)) {
          case 1:
            {
              this.state = 1397;
              _localctx._columnAliases = this.identifierList();
            }
            break;
        }
        this.state = 1401;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === SqlBaseParser.AS) {
          {
            this.state = 1400;
            this.match(SqlBaseParser.AS);
          }
        }

        this.state = 1403;
        this.match(SqlBaseParser.T__1);
        this.state = 1404;
        this.query();
        this.state = 1405;
        this.match(SqlBaseParser.T__2);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public tableProvider(): TableProviderContext {
    const _localctx: TableProviderContext = new TableProviderContext(this._ctx, this.state);
    this.enterRule(_localctx, 54, SqlBaseParser.RULE_tableProvider);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1407;
        this.match(SqlBaseParser.USING);
        this.state = 1408;
        this.multipartIdentifier();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public createTableClauses(): CreateTableClausesContext {
    const _localctx: CreateTableClausesContext = new CreateTableClausesContext(this._ctx, this.state);
    this.enterRule(_localctx, 56, SqlBaseParser.RULE_createTableClauses);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1425;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (
          _la === SqlBaseParser.CLUSTERED ||
          _la === SqlBaseParser.COMMENT ||
          _la === SqlBaseParser.LOCATION ||
          _la === SqlBaseParser.OPTIONS ||
          _la === SqlBaseParser.PARTITIONED ||
          (((_la - 204) & ~0x1f) === 0 &&
            ((1 << (_la - 204)) &
              ((1 << (SqlBaseParser.ROW - 204)) |
                (1 << (SqlBaseParser.SKEWED - 204)) |
                (1 << (SqlBaseParser.STORED - 204)) |
                (1 << (SqlBaseParser.TBLPROPERTIES - 204)))) !==
              0)
        ) {
          {
            this.state = 1423;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
              case SqlBaseParser.OPTIONS:
                {
                  {
                    this.state = 1410;
                    this.match(SqlBaseParser.OPTIONS);
                    this.state = 1411;
                    _localctx._options = this.tablePropertyList();
                  }
                }
                break;
              case SqlBaseParser.PARTITIONED:
                {
                  {
                    this.state = 1412;
                    this.match(SqlBaseParser.PARTITIONED);
                    this.state = 1413;
                    this.match(SqlBaseParser.BY);
                    this.state = 1414;
                    _localctx._partitioning = this.partitionFieldList();
                  }
                }
                break;
              case SqlBaseParser.SKEWED:
                {
                  this.state = 1415;
                  this.skewSpec();
                }
                break;
              case SqlBaseParser.CLUSTERED:
                {
                  this.state = 1416;
                  this.bucketSpec();
                }
                break;
              case SqlBaseParser.ROW:
                {
                  this.state = 1417;
                  this.rowFormat();
                }
                break;
              case SqlBaseParser.STORED:
                {
                  this.state = 1418;
                  this.createFileFormat();
                }
                break;
              case SqlBaseParser.LOCATION:
                {
                  this.state = 1419;
                  this.locationSpec();
                }
                break;
              case SqlBaseParser.COMMENT:
                {
                  this.state = 1420;
                  this.commentSpec();
                }
                break;
              case SqlBaseParser.TBLPROPERTIES:
                {
                  {
                    this.state = 1421;
                    this.match(SqlBaseParser.TBLPROPERTIES);
                    this.state = 1422;
                    _localctx._tableProps = this.tablePropertyList();
                  }
                }
                break;
              default:
                throw new NoViableAltException(this);
            }
          }
          this.state = 1427;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public tablePropertyList(): TablePropertyListContext {
    const _localctx: TablePropertyListContext = new TablePropertyListContext(this._ctx, this.state);
    this.enterRule(_localctx, 58, SqlBaseParser.RULE_tablePropertyList);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1428;
        this.match(SqlBaseParser.T__1);
        this.state = 1429;
        this.tableProperty();
        this.state = 1434;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === SqlBaseParser.T__3) {
          {
            {
              this.state = 1430;
              this.match(SqlBaseParser.T__3);
              this.state = 1431;
              this.tableProperty();
            }
          }
          this.state = 1436;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
        this.state = 1437;
        this.match(SqlBaseParser.T__2);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public tableProperty(): TablePropertyContext {
    const _localctx: TablePropertyContext = new TablePropertyContext(this._ctx, this.state);
    this.enterRule(_localctx, 60, SqlBaseParser.RULE_tableProperty);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1439;
        _localctx._key = this.tablePropertyKey();
        this.state = 1444;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (
          _la === SqlBaseParser.FALSE ||
          _la === SqlBaseParser.TRUE ||
          _la === SqlBaseParser.EQ ||
          (((_la - 289) & ~0x1f) === 0 &&
            ((1 << (_la - 289)) &
              ((1 << (SqlBaseParser.STRING - 289)) |
                (1 << (SqlBaseParser.INTEGER_VALUE - 289)) |
                (1 << (SqlBaseParser.DECIMAL_VALUE - 289)))) !==
              0)
        ) {
          {
            this.state = 1441;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.EQ) {
              {
                this.state = 1440;
                this.match(SqlBaseParser.EQ);
              }
            }

            this.state = 1443;
            _localctx._value = this.tablePropertyValue();
          }
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public tablePropertyKey(): TablePropertyKeyContext {
    const _localctx: TablePropertyKeyContext = new TablePropertyKeyContext(this._ctx, this.state);
    this.enterRule(_localctx, 62, SqlBaseParser.RULE_tablePropertyKey);
    let _la: number;
    try {
      this.state = 1455;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 155, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 1446;
            this.identifier();
            this.state = 1451;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === SqlBaseParser.T__4) {
              {
                {
                  this.state = 1447;
                  this.match(SqlBaseParser.T__4);
                  this.state = 1448;
                  this.identifier();
                }
              }
              this.state = 1453;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
            }
          }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 1454;
            this.match(SqlBaseParser.STRING);
          }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public tablePropertyValue(): TablePropertyValueContext {
    const _localctx: TablePropertyValueContext = new TablePropertyValueContext(this._ctx, this.state);
    this.enterRule(_localctx, 64, SqlBaseParser.RULE_tablePropertyValue);
    try {
      this.state = 1461;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case SqlBaseParser.INTEGER_VALUE:
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 1457;
            this.match(SqlBaseParser.INTEGER_VALUE);
          }
          break;
        case SqlBaseParser.DECIMAL_VALUE:
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 1458;
            this.match(SqlBaseParser.DECIMAL_VALUE);
          }
          break;
        case SqlBaseParser.FALSE:
        case SqlBaseParser.TRUE:
          this.enterOuterAlt(_localctx, 3);
          {
            this.state = 1459;
            this.booleanValue();
          }
          break;
        case SqlBaseParser.STRING:
          this.enterOuterAlt(_localctx, 4);
          {
            this.state = 1460;
            this.match(SqlBaseParser.STRING);
          }
          break;
        default:
          throw new NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public constantList(): ConstantListContext {
    const _localctx: ConstantListContext = new ConstantListContext(this._ctx, this.state);
    this.enterRule(_localctx, 66, SqlBaseParser.RULE_constantList);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1463;
        this.match(SqlBaseParser.T__1);
        this.state = 1464;
        this.constant();
        this.state = 1469;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === SqlBaseParser.T__3) {
          {
            {
              this.state = 1465;
              this.match(SqlBaseParser.T__3);
              this.state = 1466;
              this.constant();
            }
          }
          this.state = 1471;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
        this.state = 1472;
        this.match(SqlBaseParser.T__2);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public nestedConstantList(): NestedConstantListContext {
    const _localctx: NestedConstantListContext = new NestedConstantListContext(this._ctx, this.state);
    this.enterRule(_localctx, 68, SqlBaseParser.RULE_nestedConstantList);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1474;
        this.match(SqlBaseParser.T__1);
        this.state = 1475;
        this.constantList();
        this.state = 1480;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === SqlBaseParser.T__3) {
          {
            {
              this.state = 1476;
              this.match(SqlBaseParser.T__3);
              this.state = 1477;
              this.constantList();
            }
          }
          this.state = 1482;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
        this.state = 1483;
        this.match(SqlBaseParser.T__2);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public createFileFormat(): CreateFileFormatContext {
    const _localctx: CreateFileFormatContext = new CreateFileFormatContext(this._ctx, this.state);
    this.enterRule(_localctx, 70, SqlBaseParser.RULE_createFileFormat);
    try {
      this.state = 1491;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 159, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 1485;
            this.match(SqlBaseParser.STORED);
            this.state = 1486;
            this.match(SqlBaseParser.AS);
            this.state = 1487;
            this.fileFormat();
          }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 1488;
            this.match(SqlBaseParser.STORED);
            this.state = 1489;
            this.match(SqlBaseParser.BY);
            this.state = 1490;
            this.storageHandler();
          }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public fileFormat(): FileFormatContext {
    let _localctx: FileFormatContext = new FileFormatContext(this._ctx, this.state);
    this.enterRule(_localctx, 72, SqlBaseParser.RULE_fileFormat);
    try {
      this.state = 1498;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 160, this._ctx)) {
        case 1:
          _localctx = new TableFileFormatContext(_localctx);
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 1493;
            this.match(SqlBaseParser.INPUTFORMAT);
            this.state = 1494;
            (_localctx as TableFileFormatContext)._inFmt = this.match(SqlBaseParser.STRING);
            this.state = 1495;
            this.match(SqlBaseParser.OUTPUTFORMAT);
            this.state = 1496;
            (_localctx as TableFileFormatContext)._outFmt = this.match(SqlBaseParser.STRING);
          }
          break;

        case 2:
          _localctx = new GenericFileFormatContext(_localctx);
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 1497;
            this.identifier();
          }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public storageHandler(): StorageHandlerContext {
    const _localctx: StorageHandlerContext = new StorageHandlerContext(this._ctx, this.state);
    this.enterRule(_localctx, 74, SqlBaseParser.RULE_storageHandler);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1500;
        this.match(SqlBaseParser.STRING);
        this.state = 1504;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 161, this._ctx)) {
          case 1:
            {
              this.state = 1501;
              this.match(SqlBaseParser.WITH);
              this.state = 1502;
              this.match(SqlBaseParser.SERDEPROPERTIES);
              this.state = 1503;
              this.tablePropertyList();
            }
            break;
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public resource(): ResourceContext {
    const _localctx: ResourceContext = new ResourceContext(this._ctx, this.state);
    this.enterRule(_localctx, 76, SqlBaseParser.RULE_resource);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1506;
        this.identifier();
        this.state = 1507;
        this.match(SqlBaseParser.STRING);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public dmlStatementNoWith(): DmlStatementNoWithContext {
    let _localctx: DmlStatementNoWithContext = new DmlStatementNoWithContext(this._ctx, this.state);
    this.enterRule(_localctx, 78, SqlBaseParser.RULE_dmlStatementNoWith);
    let _la: number;
    try {
      let _alt: number;
      this.state = 1560;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case SqlBaseParser.INSERT:
          _localctx = new SingleInsertQueryContext(_localctx);
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 1509;
            this.insertInto();
            this.state = 1510;
            this.queryTerm(0);
            this.state = 1511;
            this.queryOrganization();
          }
          break;
        case SqlBaseParser.FROM:
          _localctx = new MultiInsertQueryContext(_localctx);
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 1513;
            this.fromClause();
            this.state = 1515;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
              {
                {
                  this.state = 1514;
                  this.multiInsertQueryBody();
                }
              }
              this.state = 1517;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
            } while (_la === SqlBaseParser.INSERT);
          }
          break;
        case SqlBaseParser.DELETE:
          _localctx = new DeleteFromTableContext(_localctx);
          this.enterOuterAlt(_localctx, 3);
          {
            this.state = 1519;
            this.match(SqlBaseParser.DELETE);
            this.state = 1520;
            this.match(SqlBaseParser.FROM);
            this.state = 1521;
            this.multipartIdentifier();
            this.state = 1522;
            this.tableAlias();
            this.state = 1524;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.WHERE) {
              {
                this.state = 1523;
                this.whereClause();
              }
            }
          }
          break;
        case SqlBaseParser.UPDATE:
          _localctx = new UpdateTableContext(_localctx);
          this.enterOuterAlt(_localctx, 4);
          {
            this.state = 1526;
            this.match(SqlBaseParser.UPDATE);
            this.state = 1527;
            this.multipartIdentifier();
            this.state = 1528;
            this.tableAlias();
            this.state = 1529;
            this.setClause();
            this.state = 1531;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.WHERE) {
              {
                this.state = 1530;
                this.whereClause();
              }
            }
          }
          break;
        case SqlBaseParser.MERGE:
          _localctx = new MergeIntoTableContext(_localctx);
          this.enterOuterAlt(_localctx, 5);
          {
            this.state = 1533;
            this.match(SqlBaseParser.MERGE);
            this.state = 1534;
            this.match(SqlBaseParser.INTO);
            this.state = 1535;
            (_localctx as MergeIntoTableContext)._target = this.multipartIdentifier();
            this.state = 1536;
            (_localctx as MergeIntoTableContext)._targetAlias = this.tableAlias();
            this.state = 1537;
            this.match(SqlBaseParser.USING);
            this.state = 1543;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 165, this._ctx)) {
              case 1:
                {
                  this.state = 1538;
                  (_localctx as MergeIntoTableContext)._source = this.multipartIdentifier();
                }
                break;

              case 2:
                {
                  this.state = 1539;
                  this.match(SqlBaseParser.T__1);
                  this.state = 1540;
                  (_localctx as MergeIntoTableContext)._sourceQuery = this.query();
                  this.state = 1541;
                  this.match(SqlBaseParser.T__2);
                }
                break;
            }
            this.state = 1545;
            (_localctx as MergeIntoTableContext)._sourceAlias = this.tableAlias();
            this.state = 1546;
            this.match(SqlBaseParser.ON);
            this.state = 1547;
            (_localctx as MergeIntoTableContext)._mergeCondition = this.booleanExpression(0);
            this.state = 1551;
            this._errHandler.sync(this);
            _alt = this.interpreter.adaptivePredict(this._input, 166, this._ctx);
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
              if (_alt === 1) {
                {
                  {
                    this.state = 1548;
                    this.matchedClause();
                  }
                }
              }
              this.state = 1553;
              this._errHandler.sync(this);
              _alt = this.interpreter.adaptivePredict(this._input, 166, this._ctx);
            }
            this.state = 1557;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === SqlBaseParser.WHEN) {
              {
                {
                  this.state = 1554;
                  this.notMatchedClause();
                }
              }
              this.state = 1559;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
            }
          }
          break;
        default:
          throw new NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public queryOrganization(): QueryOrganizationContext {
    const _localctx: QueryOrganizationContext = new QueryOrganizationContext(this._ctx, this.state);
    this.enterRule(_localctx, 80, SqlBaseParser.RULE_queryOrganization);
    try {
      let _alt: number;
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1572;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 170, this._ctx)) {
          case 1:
            {
              this.state = 1562;
              this.match(SqlBaseParser.ORDER);
              this.state = 1563;
              this.match(SqlBaseParser.BY);
              this.state = 1564;
              _localctx._sortItem = this.sortItem();
              _localctx._order.push(_localctx._sortItem);
              this.state = 1569;
              this._errHandler.sync(this);
              _alt = this.interpreter.adaptivePredict(this._input, 169, this._ctx);
              while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                  {
                    {
                      this.state = 1565;
                      this.match(SqlBaseParser.T__3);
                      this.state = 1566;
                      _localctx._sortItem = this.sortItem();
                      _localctx._order.push(_localctx._sortItem);
                    }
                  }
                }
                this.state = 1571;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 169, this._ctx);
              }
            }
            break;
        }
        this.state = 1584;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 172, this._ctx)) {
          case 1:
            {
              this.state = 1574;
              this.match(SqlBaseParser.CLUSTER);
              this.state = 1575;
              this.match(SqlBaseParser.BY);
              this.state = 1576;
              _localctx._expression = this.expression();
              _localctx._clusterBy.push(_localctx._expression);
              this.state = 1581;
              this._errHandler.sync(this);
              _alt = this.interpreter.adaptivePredict(this._input, 171, this._ctx);
              while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                  {
                    {
                      this.state = 1577;
                      this.match(SqlBaseParser.T__3);
                      this.state = 1578;
                      _localctx._expression = this.expression();
                      _localctx._clusterBy.push(_localctx._expression);
                    }
                  }
                }
                this.state = 1583;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 171, this._ctx);
              }
            }
            break;
        }
        this.state = 1596;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 174, this._ctx)) {
          case 1:
            {
              this.state = 1586;
              this.match(SqlBaseParser.DISTRIBUTE);
              this.state = 1587;
              this.match(SqlBaseParser.BY);
              this.state = 1588;
              _localctx._expression = this.expression();
              _localctx._distributeBy.push(_localctx._expression);
              this.state = 1593;
              this._errHandler.sync(this);
              _alt = this.interpreter.adaptivePredict(this._input, 173, this._ctx);
              while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                  {
                    {
                      this.state = 1589;
                      this.match(SqlBaseParser.T__3);
                      this.state = 1590;
                      _localctx._expression = this.expression();
                      _localctx._distributeBy.push(_localctx._expression);
                    }
                  }
                }
                this.state = 1595;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 173, this._ctx);
              }
            }
            break;
        }
        this.state = 1608;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 176, this._ctx)) {
          case 1:
            {
              this.state = 1598;
              this.match(SqlBaseParser.SORT);
              this.state = 1599;
              this.match(SqlBaseParser.BY);
              this.state = 1600;
              _localctx._sortItem = this.sortItem();
              _localctx._sort.push(_localctx._sortItem);
              this.state = 1605;
              this._errHandler.sync(this);
              _alt = this.interpreter.adaptivePredict(this._input, 175, this._ctx);
              while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                  {
                    {
                      this.state = 1601;
                      this.match(SqlBaseParser.T__3);
                      this.state = 1602;
                      _localctx._sortItem = this.sortItem();
                      _localctx._sort.push(_localctx._sortItem);
                    }
                  }
                }
                this.state = 1607;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 175, this._ctx);
              }
            }
            break;
        }
        this.state = 1611;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 177, this._ctx)) {
          case 1:
            {
              this.state = 1610;
              this.windowClause();
            }
            break;
        }
        this.state = 1618;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 179, this._ctx)) {
          case 1:
            {
              this.state = 1613;
              this.match(SqlBaseParser.LIMIT);
              this.state = 1616;
              this._errHandler.sync(this);
              switch (this.interpreter.adaptivePredict(this._input, 178, this._ctx)) {
                case 1:
                  {
                    this.state = 1614;
                    this.match(SqlBaseParser.ALL);
                  }
                  break;

                case 2:
                  {
                    this.state = 1615;
                    _localctx._limit = this.expression();
                  }
                  break;
              }
            }
            break;
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public multiInsertQueryBody(): MultiInsertQueryBodyContext {
    const _localctx: MultiInsertQueryBodyContext = new MultiInsertQueryBodyContext(this._ctx, this.state);
    this.enterRule(_localctx, 82, SqlBaseParser.RULE_multiInsertQueryBody);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1620;
        this.insertInto();
        this.state = 1621;
        this.fromStatementBody();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  public queryTerm(): QueryTermContext;
  public queryTerm(_p: number): QueryTermContext;
  // @RuleVersion(0)
  public queryTerm(_p?: number): QueryTermContext {
    if (_p === undefined) {
      _p = 0;
    }

    const _parentctx: ParserRuleContext = this._ctx;
    const _parentState: number = this.state;
    let _localctx: QueryTermContext = new QueryTermContext(this._ctx, _parentState);
    let _prevctx: QueryTermContext = _localctx;
    const _startState = 84;
    this.enterRecursionRule(_localctx, 84, SqlBaseParser.RULE_queryTerm, _p);
    let _la: number;
    try {
      let _alt: number;
      this.enterOuterAlt(_localctx, 1);
      {
        {
          _localctx = new QueryTermDefaultContext(_localctx);
          this._ctx = _localctx;
          _prevctx = _localctx;

          this.state = 1624;
          this.queryPrimary();
        }
        this._ctx._stop = this._input.tryLT(-1);
        this.state = 1649;
        this._errHandler.sync(this);
        _alt = this.interpreter.adaptivePredict(this._input, 184, this._ctx);
        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            if (this._parseListeners != null) {
              this.triggerExitRuleEvent();
            }
            _prevctx = _localctx;
            {
              this.state = 1647;
              this._errHandler.sync(this);
              switch (this.interpreter.adaptivePredict(this._input, 183, this._ctx)) {
                case 1:
                  {
                    _localctx = new SetOperationContext(new QueryTermContext(_parentctx, _parentState));
                    (_localctx as SetOperationContext)._left = _prevctx;
                    this.pushNewRecursionContext(_localctx, _startState, SqlBaseParser.RULE_queryTerm);
                    this.state = 1626;
                    if (!this.precpred(this._ctx, 3)) {
                      throw this.createFailedPredicateException("this.precpred(this._ctx, 3)");
                    }
                    this.state = 1627;
                    if (!this.legacy_setops_precedence_enabled) {
                      throw this.createFailedPredicateException("this.legacy_setops_precedence_enabled");
                    }
                    this.state = 1628;
                    (_localctx as SetOperationContext)._operator = this._input.LT(1);
                    _la = this._input.LA(1);
                    if (
                      !(
                        _la === SqlBaseParser.EXCEPT ||
                        _la === SqlBaseParser.INTERSECT ||
                        _la === SqlBaseParser.SETMINUS ||
                        _la === SqlBaseParser.UNION
                      )
                    ) {
                      (_localctx as SetOperationContext)._operator = this._errHandler.recoverInline(this);
                    } else {
                      if (this._input.LA(1) === Token.EOF) {
                        this.matchedEOF = true;
                      }

                      this._errHandler.reportMatch(this);
                      this.consume();
                    }
                    this.state = 1630;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === SqlBaseParser.ALL || _la === SqlBaseParser.DISTINCT) {
                      {
                        this.state = 1629;
                        this.setQuantifier();
                      }
                    }

                    this.state = 1632;
                    (_localctx as SetOperationContext)._right = this.queryTerm(4);
                  }
                  break;

                case 2:
                  {
                    _localctx = new SetOperationContext(new QueryTermContext(_parentctx, _parentState));
                    (_localctx as SetOperationContext)._left = _prevctx;
                    this.pushNewRecursionContext(_localctx, _startState, SqlBaseParser.RULE_queryTerm);
                    this.state = 1633;
                    if (!this.precpred(this._ctx, 2)) {
                      throw this.createFailedPredicateException("this.precpred(this._ctx, 2)");
                    }
                    this.state = 1634;
                    if (this.legacy_setops_precedence_enabled) {
                      throw this.createFailedPredicateException("!this.legacy_setops_precedence_enabled");
                    }
                    this.state = 1635;
                    (_localctx as SetOperationContext)._operator = this.match(SqlBaseParser.INTERSECT);
                    this.state = 1637;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === SqlBaseParser.ALL || _la === SqlBaseParser.DISTINCT) {
                      {
                        this.state = 1636;
                        this.setQuantifier();
                      }
                    }

                    this.state = 1639;
                    (_localctx as SetOperationContext)._right = this.queryTerm(3);
                  }
                  break;

                case 3:
                  {
                    _localctx = new SetOperationContext(new QueryTermContext(_parentctx, _parentState));
                    (_localctx as SetOperationContext)._left = _prevctx;
                    this.pushNewRecursionContext(_localctx, _startState, SqlBaseParser.RULE_queryTerm);
                    this.state = 1640;
                    if (!this.precpred(this._ctx, 1)) {
                      throw this.createFailedPredicateException("this.precpred(this._ctx, 1)");
                    }
                    this.state = 1641;
                    if (this.legacy_setops_precedence_enabled) {
                      throw this.createFailedPredicateException("!this.legacy_setops_precedence_enabled");
                    }
                    this.state = 1642;
                    (_localctx as SetOperationContext)._operator = this._input.LT(1);
                    _la = this._input.LA(1);
                    if (
                      !(_la === SqlBaseParser.EXCEPT || _la === SqlBaseParser.SETMINUS || _la === SqlBaseParser.UNION)
                    ) {
                      (_localctx as SetOperationContext)._operator = this._errHandler.recoverInline(this);
                    } else {
                      if (this._input.LA(1) === Token.EOF) {
                        this.matchedEOF = true;
                      }

                      this._errHandler.reportMatch(this);
                      this.consume();
                    }
                    this.state = 1644;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === SqlBaseParser.ALL || _la === SqlBaseParser.DISTINCT) {
                      {
                        this.state = 1643;
                        this.setQuantifier();
                      }
                    }

                    this.state = 1646;
                    (_localctx as SetOperationContext)._right = this.queryTerm(2);
                  }
                  break;
              }
            }
          }
          this.state = 1651;
          this._errHandler.sync(this);
          _alt = this.interpreter.adaptivePredict(this._input, 184, this._ctx);
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.unrollRecursionContexts(_parentctx);
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public queryPrimary(): QueryPrimaryContext {
    let _localctx: QueryPrimaryContext = new QueryPrimaryContext(this._ctx, this.state);
    this.enterRule(_localctx, 86, SqlBaseParser.RULE_queryPrimary);
    try {
      this.state = 1661;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case SqlBaseParser.MAP:
        case SqlBaseParser.REDUCE:
        case SqlBaseParser.SELECT:
          _localctx = new QueryPrimaryDefaultContext(_localctx);
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 1652;
            this.querySpecification();
          }
          break;
        case SqlBaseParser.FROM:
          _localctx = new FromStmtContext(_localctx);
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 1653;
            this.fromStatement();
          }
          break;
        case SqlBaseParser.TABLE:
          _localctx = new TableContext(_localctx);
          this.enterOuterAlt(_localctx, 3);
          {
            this.state = 1654;
            this.match(SqlBaseParser.TABLE);
            this.state = 1655;
            this.multipartIdentifier();
          }
          break;
        case SqlBaseParser.VALUES:
          _localctx = new InlineTableDefault1Context(_localctx);
          this.enterOuterAlt(_localctx, 4);
          {
            this.state = 1656;
            this.inlineTable();
          }
          break;
        case SqlBaseParser.T__1:
          _localctx = new SubqueryContext(_localctx);
          this.enterOuterAlt(_localctx, 5);
          {
            this.state = 1657;
            this.match(SqlBaseParser.T__1);
            this.state = 1658;
            this.query();
            this.state = 1659;
            this.match(SqlBaseParser.T__2);
          }
          break;
        default:
          throw new NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public sortItem(): SortItemContext {
    const _localctx: SortItemContext = new SortItemContext(this._ctx, this.state);
    this.enterRule(_localctx, 88, SqlBaseParser.RULE_sortItem);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1663;
        this.expression();
        this.state = 1665;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 186, this._ctx)) {
          case 1:
            {
              this.state = 1664;
              _localctx._ordering = this._input.LT(1);
              _la = this._input.LA(1);
              if (!(_la === SqlBaseParser.ASC || _la === SqlBaseParser.DESC)) {
                _localctx._ordering = this._errHandler.recoverInline(this);
              } else {
                if (this._input.LA(1) === Token.EOF) {
                  this.matchedEOF = true;
                }

                this._errHandler.reportMatch(this);
                this.consume();
              }
            }
            break;
        }
        this.state = 1669;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 187, this._ctx)) {
          case 1:
            {
              this.state = 1667;
              this.match(SqlBaseParser.NULLS);
              this.state = 1668;
              _localctx._nullOrder = this._input.LT(1);
              _la = this._input.LA(1);
              if (!(_la === SqlBaseParser.FIRST || _la === SqlBaseParser.LAST)) {
                _localctx._nullOrder = this._errHandler.recoverInline(this);
              } else {
                if (this._input.LA(1) === Token.EOF) {
                  this.matchedEOF = true;
                }

                this._errHandler.reportMatch(this);
                this.consume();
              }
            }
            break;
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public fromStatement(): FromStatementContext {
    const _localctx: FromStatementContext = new FromStatementContext(this._ctx, this.state);
    this.enterRule(_localctx, 90, SqlBaseParser.RULE_fromStatement);
    try {
      let _alt: number;
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1671;
        this.fromClause();
        this.state = 1673;
        this._errHandler.sync(this);
        _alt = 1;
        do {
          switch (_alt) {
            case 1:
              {
                {
                  this.state = 1672;
                  this.fromStatementBody();
                }
              }
              break;
            default:
              throw new NoViableAltException(this);
          }
          this.state = 1675;
          this._errHandler.sync(this);
          _alt = this.interpreter.adaptivePredict(this._input, 188, this._ctx);
        } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public fromStatementBody(): FromStatementBodyContext {
    const _localctx: FromStatementBodyContext = new FromStatementBodyContext(this._ctx, this.state);
    this.enterRule(_localctx, 92, SqlBaseParser.RULE_fromStatementBody);
    try {
      let _alt: number;
      this.state = 1704;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 195, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 1677;
            this.transformClause();
            this.state = 1679;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 189, this._ctx)) {
              case 1:
                {
                  this.state = 1678;
                  this.whereClause();
                }
                break;
            }
            this.state = 1681;
            this.queryOrganization();
          }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 1683;
            this.selectClause();
            this.state = 1687;
            this._errHandler.sync(this);
            _alt = this.interpreter.adaptivePredict(this._input, 190, this._ctx);
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
              if (_alt === 1) {
                {
                  {
                    this.state = 1684;
                    this.lateralView();
                  }
                }
              }
              this.state = 1689;
              this._errHandler.sync(this);
              _alt = this.interpreter.adaptivePredict(this._input, 190, this._ctx);
            }
            this.state = 1691;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 191, this._ctx)) {
              case 1:
                {
                  this.state = 1690;
                  this.whereClause();
                }
                break;
            }
            this.state = 1694;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 192, this._ctx)) {
              case 1:
                {
                  this.state = 1693;
                  this.aggregationClause();
                }
                break;
            }
            this.state = 1697;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 193, this._ctx)) {
              case 1:
                {
                  this.state = 1696;
                  this.havingClause();
                }
                break;
            }
            this.state = 1700;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 194, this._ctx)) {
              case 1:
                {
                  this.state = 1699;
                  this.windowClause();
                }
                break;
            }
            this.state = 1702;
            this.queryOrganization();
          }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public querySpecification(): QuerySpecificationContext {
    let _localctx: QuerySpecificationContext = new QuerySpecificationContext(this._ctx, this.state);
    this.enterRule(_localctx, 94, SqlBaseParser.RULE_querySpecification);
    try {
      let _alt: number;
      this.state = 1750;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 208, this._ctx)) {
        case 1:
          _localctx = new TransformQuerySpecificationContext(_localctx);
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 1706;
            this.transformClause();
            this.state = 1708;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 196, this._ctx)) {
              case 1:
                {
                  this.state = 1707;
                  this.fromClause();
                }
                break;
            }
            this.state = 1713;
            this._errHandler.sync(this);
            _alt = this.interpreter.adaptivePredict(this._input, 197, this._ctx);
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
              if (_alt === 1) {
                {
                  {
                    this.state = 1710;
                    this.lateralView();
                  }
                }
              }
              this.state = 1715;
              this._errHandler.sync(this);
              _alt = this.interpreter.adaptivePredict(this._input, 197, this._ctx);
            }
            this.state = 1717;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 198, this._ctx)) {
              case 1:
                {
                  this.state = 1716;
                  this.whereClause();
                }
                break;
            }
            this.state = 1720;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 199, this._ctx)) {
              case 1:
                {
                  this.state = 1719;
                  this.aggregationClause();
                }
                break;
            }
            this.state = 1723;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 200, this._ctx)) {
              case 1:
                {
                  this.state = 1722;
                  this.havingClause();
                }
                break;
            }
            this.state = 1726;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 201, this._ctx)) {
              case 1:
                {
                  this.state = 1725;
                  this.windowClause();
                }
                break;
            }
          }
          break;

        case 2:
          _localctx = new RegularQuerySpecificationContext(_localctx);
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 1728;
            this.selectClause();
            this.state = 1730;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 202, this._ctx)) {
              case 1:
                {
                  this.state = 1729;
                  this.fromClause();
                }
                break;
            }
            this.state = 1735;
            this._errHandler.sync(this);
            _alt = this.interpreter.adaptivePredict(this._input, 203, this._ctx);
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
              if (_alt === 1) {
                {
                  {
                    this.state = 1732;
                    this.lateralView();
                  }
                }
              }
              this.state = 1737;
              this._errHandler.sync(this);
              _alt = this.interpreter.adaptivePredict(this._input, 203, this._ctx);
            }
            this.state = 1739;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 204, this._ctx)) {
              case 1:
                {
                  this.state = 1738;
                  this.whereClause();
                }
                break;
            }
            this.state = 1742;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 205, this._ctx)) {
              case 1:
                {
                  this.state = 1741;
                  this.aggregationClause();
                }
                break;
            }
            this.state = 1745;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 206, this._ctx)) {
              case 1:
                {
                  this.state = 1744;
                  this.havingClause();
                }
                break;
            }
            this.state = 1748;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 207, this._ctx)) {
              case 1:
                {
                  this.state = 1747;
                  this.windowClause();
                }
                break;
            }
          }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public transformClause(): TransformClauseContext {
    const _localctx: TransformClauseContext = new TransformClauseContext(this._ctx, this.state);
    this.enterRule(_localctx, 96, SqlBaseParser.RULE_transformClause);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1771;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case SqlBaseParser.SELECT:
            {
              this.state = 1752;
              this.match(SqlBaseParser.SELECT);
              this.state = 1753;
              _localctx._kind = this.match(SqlBaseParser.TRANSFORM);
              this.state = 1754;
              this.match(SqlBaseParser.T__1);
              this.state = 1756;
              this._errHandler.sync(this);
              switch (this.interpreter.adaptivePredict(this._input, 209, this._ctx)) {
                case 1:
                  {
                    this.state = 1755;
                    this.setQuantifier();
                  }
                  break;
              }
              this.state = 1758;
              this.expressionSeq();
              this.state = 1759;
              this.match(SqlBaseParser.T__2);
            }
            break;
          case SqlBaseParser.MAP:
            {
              this.state = 1761;
              _localctx._kind = this.match(SqlBaseParser.MAP);
              this.state = 1763;
              this._errHandler.sync(this);
              switch (this.interpreter.adaptivePredict(this._input, 210, this._ctx)) {
                case 1:
                  {
                    this.state = 1762;
                    this.setQuantifier();
                  }
                  break;
              }
              this.state = 1765;
              this.expressionSeq();
            }
            break;
          case SqlBaseParser.REDUCE:
            {
              this.state = 1766;
              _localctx._kind = this.match(SqlBaseParser.REDUCE);
              this.state = 1768;
              this._errHandler.sync(this);
              switch (this.interpreter.adaptivePredict(this._input, 211, this._ctx)) {
                case 1:
                  {
                    this.state = 1767;
                    this.setQuantifier();
                  }
                  break;
              }
              this.state = 1770;
              this.expressionSeq();
            }
            break;
          default:
            throw new NoViableAltException(this);
        }
        this.state = 1774;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === SqlBaseParser.ROW) {
          {
            this.state = 1773;
            _localctx._inRowFormat = this.rowFormat();
          }
        }

        this.state = 1778;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === SqlBaseParser.RECORDWRITER) {
          {
            this.state = 1776;
            this.match(SqlBaseParser.RECORDWRITER);
            this.state = 1777;
            _localctx._recordWriter = this.match(SqlBaseParser.STRING);
          }
        }

        this.state = 1780;
        this.match(SqlBaseParser.USING);
        this.state = 1781;
        _localctx._script = this.match(SqlBaseParser.STRING);
        this.state = 1794;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 217, this._ctx)) {
          case 1:
            {
              this.state = 1782;
              this.match(SqlBaseParser.AS);
              this.state = 1792;
              this._errHandler.sync(this);
              switch (this.interpreter.adaptivePredict(this._input, 216, this._ctx)) {
                case 1:
                  {
                    this.state = 1783;
                    this.identifierSeq();
                  }
                  break;

                case 2:
                  {
                    this.state = 1784;
                    this.colTypeList();
                  }
                  break;

                case 3:
                  {
                    {
                      this.state = 1785;
                      this.match(SqlBaseParser.T__1);
                      this.state = 1788;
                      this._errHandler.sync(this);
                      switch (this.interpreter.adaptivePredict(this._input, 215, this._ctx)) {
                        case 1:
                          {
                            this.state = 1786;
                            this.identifierSeq();
                          }
                          break;

                        case 2:
                          {
                            this.state = 1787;
                            this.colTypeList();
                          }
                          break;
                      }
                      this.state = 1790;
                      this.match(SqlBaseParser.T__2);
                    }
                  }
                  break;
              }
            }
            break;
        }
        this.state = 1797;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 218, this._ctx)) {
          case 1:
            {
              this.state = 1796;
              _localctx._outRowFormat = this.rowFormat();
            }
            break;
        }
        this.state = 1801;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 219, this._ctx)) {
          case 1:
            {
              this.state = 1799;
              this.match(SqlBaseParser.RECORDREADER);
              this.state = 1800;
              _localctx._recordReader = this.match(SqlBaseParser.STRING);
            }
            break;
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public selectClause(): SelectClauseContext {
    const _localctx: SelectClauseContext = new SelectClauseContext(this._ctx, this.state);
    this.enterRule(_localctx, 98, SqlBaseParser.RULE_selectClause);
    try {
      let _alt: number;
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1803;
        this.match(SqlBaseParser.SELECT);
        this.state = 1807;
        this._errHandler.sync(this);
        _alt = this.interpreter.adaptivePredict(this._input, 220, this._ctx);
        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            {
              {
                this.state = 1804;
                _localctx._hint = this.hint();
                _localctx._hints.push(_localctx._hint);
              }
            }
          }
          this.state = 1809;
          this._errHandler.sync(this);
          _alt = this.interpreter.adaptivePredict(this._input, 220, this._ctx);
        }
        this.state = 1811;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 221, this._ctx)) {
          case 1:
            {
              this.state = 1810;
              this.setQuantifier();
            }
            break;
        }
        this.state = 1813;
        this.namedExpressionSeq();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public setClause(): SetClauseContext {
    const _localctx: SetClauseContext = new SetClauseContext(this._ctx, this.state);
    this.enterRule(_localctx, 100, SqlBaseParser.RULE_setClause);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1815;
        this.match(SqlBaseParser.SET);
        this.state = 1816;
        this.assignmentList();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public matchedClause(): MatchedClauseContext {
    const _localctx: MatchedClauseContext = new MatchedClauseContext(this._ctx, this.state);
    this.enterRule(_localctx, 102, SqlBaseParser.RULE_matchedClause);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1818;
        this.match(SqlBaseParser.WHEN);
        this.state = 1819;
        this.match(SqlBaseParser.MATCHED);
        this.state = 1822;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === SqlBaseParser.AND) {
          {
            this.state = 1820;
            this.match(SqlBaseParser.AND);
            this.state = 1821;
            _localctx._matchedCond = this.booleanExpression(0);
          }
        }

        this.state = 1824;
        this.match(SqlBaseParser.THEN);
        this.state = 1825;
        this.matchedAction();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public notMatchedClause(): NotMatchedClauseContext {
    const _localctx: NotMatchedClauseContext = new NotMatchedClauseContext(this._ctx, this.state);
    this.enterRule(_localctx, 104, SqlBaseParser.RULE_notMatchedClause);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1827;
        this.match(SqlBaseParser.WHEN);
        this.state = 1828;
        this.match(SqlBaseParser.NOT);
        this.state = 1829;
        this.match(SqlBaseParser.MATCHED);
        this.state = 1832;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === SqlBaseParser.AND) {
          {
            this.state = 1830;
            this.match(SqlBaseParser.AND);
            this.state = 1831;
            _localctx._notMatchedCond = this.booleanExpression(0);
          }
        }

        this.state = 1834;
        this.match(SqlBaseParser.THEN);
        this.state = 1835;
        this.notMatchedAction();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public matchedAction(): MatchedActionContext {
    const _localctx: MatchedActionContext = new MatchedActionContext(this._ctx, this.state);
    this.enterRule(_localctx, 106, SqlBaseParser.RULE_matchedAction);
    try {
      this.state = 1844;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 224, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 1837;
            this.match(SqlBaseParser.DELETE);
          }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 1838;
            this.match(SqlBaseParser.UPDATE);
            this.state = 1839;
            this.match(SqlBaseParser.SET);
            this.state = 1840;
            this.match(SqlBaseParser.ASTERISK);
          }
          break;

        case 3:
          this.enterOuterAlt(_localctx, 3);
          {
            this.state = 1841;
            this.match(SqlBaseParser.UPDATE);
            this.state = 1842;
            this.match(SqlBaseParser.SET);
            this.state = 1843;
            this.assignmentList();
          }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public notMatchedAction(): NotMatchedActionContext {
    const _localctx: NotMatchedActionContext = new NotMatchedActionContext(this._ctx, this.state);
    this.enterRule(_localctx, 108, SqlBaseParser.RULE_notMatchedAction);
    let _la: number;
    try {
      this.state = 1864;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 226, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 1846;
            this.match(SqlBaseParser.INSERT);
            this.state = 1847;
            this.match(SqlBaseParser.ASTERISK);
          }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 1848;
            this.match(SqlBaseParser.INSERT);
            this.state = 1849;
            this.match(SqlBaseParser.T__1);
            this.state = 1850;
            _localctx._columns = this.multipartIdentifierList();
            this.state = 1851;
            this.match(SqlBaseParser.T__2);
            this.state = 1852;
            this.match(SqlBaseParser.VALUES);
            this.state = 1853;
            this.match(SqlBaseParser.T__1);
            this.state = 1854;
            this.expression();
            this.state = 1859;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === SqlBaseParser.T__3) {
              {
                {
                  this.state = 1855;
                  this.match(SqlBaseParser.T__3);
                  this.state = 1856;
                  this.expression();
                }
              }
              this.state = 1861;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
            }
            this.state = 1862;
            this.match(SqlBaseParser.T__2);
          }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public assignmentList(): AssignmentListContext {
    const _localctx: AssignmentListContext = new AssignmentListContext(this._ctx, this.state);
    this.enterRule(_localctx, 110, SqlBaseParser.RULE_assignmentList);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1866;
        this.assignment();
        this.state = 1871;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === SqlBaseParser.T__3) {
          {
            {
              this.state = 1867;
              this.match(SqlBaseParser.T__3);
              this.state = 1868;
              this.assignment();
            }
          }
          this.state = 1873;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public assignment(): AssignmentContext {
    const _localctx: AssignmentContext = new AssignmentContext(this._ctx, this.state);
    this.enterRule(_localctx, 112, SqlBaseParser.RULE_assignment);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1874;
        _localctx._key = this.multipartIdentifier();
        this.state = 1875;
        this.match(SqlBaseParser.EQ);
        this.state = 1876;
        _localctx._value = this.expression();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public whereClause(): WhereClauseContext {
    const _localctx: WhereClauseContext = new WhereClauseContext(this._ctx, this.state);
    this.enterRule(_localctx, 114, SqlBaseParser.RULE_whereClause);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1878;
        this.match(SqlBaseParser.WHERE);
        this.state = 1879;
        this.booleanExpression(0);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public havingClause(): HavingClauseContext {
    const _localctx: HavingClauseContext = new HavingClauseContext(this._ctx, this.state);
    this.enterRule(_localctx, 116, SqlBaseParser.RULE_havingClause);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1881;
        this.match(SqlBaseParser.HAVING);
        this.state = 1882;
        this.booleanExpression(0);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public hint(): HintContext {
    const _localctx: HintContext = new HintContext(this._ctx, this.state);
    this.enterRule(_localctx, 118, SqlBaseParser.RULE_hint);
    try {
      let _alt: number;
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1884;
        this.match(SqlBaseParser.T__5);
        this.state = 1885;
        _localctx._hintStatement = this.hintStatement();
        _localctx._hintStatements.push(_localctx._hintStatement);
        this.state = 1892;
        this._errHandler.sync(this);
        _alt = this.interpreter.adaptivePredict(this._input, 229, this._ctx);
        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            {
              {
                this.state = 1887;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 228, this._ctx)) {
                  case 1:
                    {
                      this.state = 1886;
                      this.match(SqlBaseParser.T__3);
                    }
                    break;
                }
                this.state = 1889;
                _localctx._hintStatement = this.hintStatement();
                _localctx._hintStatements.push(_localctx._hintStatement);
              }
            }
          }
          this.state = 1894;
          this._errHandler.sync(this);
          _alt = this.interpreter.adaptivePredict(this._input, 229, this._ctx);
        }
        this.state = 1895;
        this.match(SqlBaseParser.T__6);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public hintStatement(): HintStatementContext {
    const _localctx: HintStatementContext = new HintStatementContext(this._ctx, this.state);
    this.enterRule(_localctx, 120, SqlBaseParser.RULE_hintStatement);
    let _la: number;
    try {
      this.state = 1910;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 231, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 1897;
            _localctx._hintName = this.identifier();
          }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 1898;
            _localctx._hintName = this.identifier();
            this.state = 1899;
            this.match(SqlBaseParser.T__1);
            this.state = 1900;
            _localctx._primaryExpression = this.primaryExpression(0);
            _localctx._parameters.push(_localctx._primaryExpression);
            this.state = 1905;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === SqlBaseParser.T__3) {
              {
                {
                  this.state = 1901;
                  this.match(SqlBaseParser.T__3);
                  this.state = 1902;
                  _localctx._primaryExpression = this.primaryExpression(0);
                  _localctx._parameters.push(_localctx._primaryExpression);
                }
              }
              this.state = 1907;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
            }
            this.state = 1908;
            this.match(SqlBaseParser.T__2);
          }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public fromClause(): FromClauseContext {
    const _localctx: FromClauseContext = new FromClauseContext(this._ctx, this.state);
    this.enterRule(_localctx, 122, SqlBaseParser.RULE_fromClause);
    try {
      let _alt: number;
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1912;
        this.match(SqlBaseParser.FROM);
        this.state = 1913;
        this.relation();
        this.state = 1918;
        this._errHandler.sync(this);
        _alt = this.interpreter.adaptivePredict(this._input, 232, this._ctx);
        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            {
              {
                this.state = 1914;
                this.match(SqlBaseParser.T__3);
                this.state = 1915;
                this.relation();
              }
            }
          }
          this.state = 1920;
          this._errHandler.sync(this);
          _alt = this.interpreter.adaptivePredict(this._input, 232, this._ctx);
        }
        this.state = 1924;
        this._errHandler.sync(this);
        _alt = this.interpreter.adaptivePredict(this._input, 233, this._ctx);
        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            {
              {
                this.state = 1921;
                this.lateralView();
              }
            }
          }
          this.state = 1926;
          this._errHandler.sync(this);
          _alt = this.interpreter.adaptivePredict(this._input, 233, this._ctx);
        }
        this.state = 1928;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 234, this._ctx)) {
          case 1:
            {
              this.state = 1927;
              this.pivotClause();
            }
            break;
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public aggregationClause(): AggregationClauseContext {
    const _localctx: AggregationClauseContext = new AggregationClauseContext(this._ctx, this.state);
    this.enterRule(_localctx, 124, SqlBaseParser.RULE_aggregationClause);
    let _la: number;
    try {
      let _alt: number;
      this.state = 1969;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 239, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 1930;
            this.match(SqlBaseParser.GROUP);
            this.state = 1931;
            this.match(SqlBaseParser.BY);
            this.state = 1932;
            _localctx._groupByClause = this.groupByClause();
            _localctx._groupingExpressionsWithGroupingAnalytics.push(_localctx._groupByClause);
            this.state = 1937;
            this._errHandler.sync(this);
            _alt = this.interpreter.adaptivePredict(this._input, 235, this._ctx);
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
              if (_alt === 1) {
                {
                  {
                    this.state = 1933;
                    this.match(SqlBaseParser.T__3);
                    this.state = 1934;
                    _localctx._groupByClause = this.groupByClause();
                    _localctx._groupingExpressionsWithGroupingAnalytics.push(_localctx._groupByClause);
                  }
                }
              }
              this.state = 1939;
              this._errHandler.sync(this);
              _alt = this.interpreter.adaptivePredict(this._input, 235, this._ctx);
            }
          }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 1940;
            this.match(SqlBaseParser.GROUP);
            this.state = 1941;
            this.match(SqlBaseParser.BY);
            this.state = 1942;
            _localctx._expression = this.expression();
            _localctx._groupingExpressions.push(_localctx._expression);
            this.state = 1947;
            this._errHandler.sync(this);
            _alt = this.interpreter.adaptivePredict(this._input, 236, this._ctx);
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
              if (_alt === 1) {
                {
                  {
                    this.state = 1943;
                    this.match(SqlBaseParser.T__3);
                    this.state = 1944;
                    _localctx._expression = this.expression();
                    _localctx._groupingExpressions.push(_localctx._expression);
                  }
                }
              }
              this.state = 1949;
              this._errHandler.sync(this);
              _alt = this.interpreter.adaptivePredict(this._input, 236, this._ctx);
            }
            this.state = 1967;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 238, this._ctx)) {
              case 1:
                {
                  this.state = 1950;
                  this.match(SqlBaseParser.WITH);
                  this.state = 1951;
                  _localctx._kind = this.match(SqlBaseParser.ROLLUP);
                }
                break;

              case 2:
                {
                  this.state = 1952;
                  this.match(SqlBaseParser.WITH);
                  this.state = 1953;
                  _localctx._kind = this.match(SqlBaseParser.CUBE);
                }
                break;

              case 3:
                {
                  this.state = 1954;
                  _localctx._kind = this.match(SqlBaseParser.GROUPING);
                  this.state = 1955;
                  this.match(SqlBaseParser.SETS);
                  this.state = 1956;
                  this.match(SqlBaseParser.T__1);
                  this.state = 1957;
                  this.groupingSet();
                  this.state = 1962;
                  this._errHandler.sync(this);
                  _la = this._input.LA(1);
                  while (_la === SqlBaseParser.T__3) {
                    {
                      {
                        this.state = 1958;
                        this.match(SqlBaseParser.T__3);
                        this.state = 1959;
                        this.groupingSet();
                      }
                    }
                    this.state = 1964;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                  }
                  this.state = 1965;
                  this.match(SqlBaseParser.T__2);
                }
                break;
            }
          }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public groupByClause(): GroupByClauseContext {
    const _localctx: GroupByClauseContext = new GroupByClauseContext(this._ctx, this.state);
    this.enterRule(_localctx, 126, SqlBaseParser.RULE_groupByClause);
    try {
      this.state = 1973;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 240, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 1971;
            this.groupingAnalytics();
          }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 1972;
            this.expression();
          }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public groupingAnalytics(): GroupingAnalyticsContext {
    const _localctx: GroupingAnalyticsContext = new GroupingAnalyticsContext(this._ctx, this.state);
    this.enterRule(_localctx, 128, SqlBaseParser.RULE_groupingAnalytics);
    let _la: number;
    try {
      this.state = 2000;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case SqlBaseParser.CUBE:
        case SqlBaseParser.ROLLUP:
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 1975;
            _la = this._input.LA(1);
            if (!(_la === SqlBaseParser.CUBE || _la === SqlBaseParser.ROLLUP)) {
              this._errHandler.recoverInline(this);
            } else {
              if (this._input.LA(1) === Token.EOF) {
                this.matchedEOF = true;
              }

              this._errHandler.reportMatch(this);
              this.consume();
            }
            this.state = 1976;
            this.match(SqlBaseParser.T__1);
            this.state = 1977;
            this.groupingSet();
            this.state = 1982;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === SqlBaseParser.T__3) {
              {
                {
                  this.state = 1978;
                  this.match(SqlBaseParser.T__3);
                  this.state = 1979;
                  this.groupingSet();
                }
              }
              this.state = 1984;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
            }
            this.state = 1985;
            this.match(SqlBaseParser.T__2);
          }
          break;
        case SqlBaseParser.GROUPING:
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 1987;
            this.match(SqlBaseParser.GROUPING);
            this.state = 1988;
            this.match(SqlBaseParser.SETS);
            this.state = 1989;
            this.match(SqlBaseParser.T__1);
            this.state = 1990;
            this.groupingElement();
            this.state = 1995;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === SqlBaseParser.T__3) {
              {
                {
                  this.state = 1991;
                  this.match(SqlBaseParser.T__3);
                  this.state = 1992;
                  this.groupingElement();
                }
              }
              this.state = 1997;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
            }
            this.state = 1998;
            this.match(SqlBaseParser.T__2);
          }
          break;
        default:
          throw new NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public groupingElement(): GroupingElementContext {
    const _localctx: GroupingElementContext = new GroupingElementContext(this._ctx, this.state);
    this.enterRule(_localctx, 130, SqlBaseParser.RULE_groupingElement);
    try {
      this.state = 2004;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 244, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 2002;
            this.groupingAnalytics();
          }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 2003;
            this.groupingSet();
          }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public groupingSet(): GroupingSetContext {
    const _localctx: GroupingSetContext = new GroupingSetContext(this._ctx, this.state);
    this.enterRule(_localctx, 132, SqlBaseParser.RULE_groupingSet);
    let _la: number;
    try {
      this.state = 2019;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 247, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 2006;
            this.match(SqlBaseParser.T__1);
            this.state = 2015;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 246, this._ctx)) {
              case 1:
                {
                  this.state = 2007;
                  this.expression();
                  this.state = 2012;
                  this._errHandler.sync(this);
                  _la = this._input.LA(1);
                  while (_la === SqlBaseParser.T__3) {
                    {
                      {
                        this.state = 2008;
                        this.match(SqlBaseParser.T__3);
                        this.state = 2009;
                        this.expression();
                      }
                    }
                    this.state = 2014;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                  }
                }
                break;
            }
            this.state = 2017;
            this.match(SqlBaseParser.T__2);
          }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 2018;
            this.expression();
          }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public pivotClause(): PivotClauseContext {
    const _localctx: PivotClauseContext = new PivotClauseContext(this._ctx, this.state);
    this.enterRule(_localctx, 134, SqlBaseParser.RULE_pivotClause);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2021;
        this.match(SqlBaseParser.PIVOT);
        this.state = 2022;
        this.match(SqlBaseParser.T__1);
        this.state = 2023;
        _localctx._aggregates = this.namedExpressionSeq();
        this.state = 2024;
        this.match(SqlBaseParser.FOR);
        this.state = 2025;
        this.pivotColumn();
        this.state = 2026;
        this.match(SqlBaseParser.IN);
        this.state = 2027;
        this.match(SqlBaseParser.T__1);
        this.state = 2028;
        _localctx._pivotValue = this.pivotValue();
        _localctx._pivotValues.push(_localctx._pivotValue);
        this.state = 2033;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === SqlBaseParser.T__3) {
          {
            {
              this.state = 2029;
              this.match(SqlBaseParser.T__3);
              this.state = 2030;
              _localctx._pivotValue = this.pivotValue();
              _localctx._pivotValues.push(_localctx._pivotValue);
            }
          }
          this.state = 2035;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
        this.state = 2036;
        this.match(SqlBaseParser.T__2);
        this.state = 2037;
        this.match(SqlBaseParser.T__2);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public pivotColumn(): PivotColumnContext {
    const _localctx: PivotColumnContext = new PivotColumnContext(this._ctx, this.state);
    this.enterRule(_localctx, 136, SqlBaseParser.RULE_pivotColumn);
    let _la: number;
    try {
      this.state = 2051;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 250, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 2039;
            _localctx._identifier = this.identifier();
            _localctx._identifiers.push(_localctx._identifier);
          }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 2040;
            this.match(SqlBaseParser.T__1);
            this.state = 2041;
            _localctx._identifier = this.identifier();
            _localctx._identifiers.push(_localctx._identifier);
            this.state = 2046;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === SqlBaseParser.T__3) {
              {
                {
                  this.state = 2042;
                  this.match(SqlBaseParser.T__3);
                  this.state = 2043;
                  _localctx._identifier = this.identifier();
                  _localctx._identifiers.push(_localctx._identifier);
                }
              }
              this.state = 2048;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
            }
            this.state = 2049;
            this.match(SqlBaseParser.T__2);
          }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public pivotValue(): PivotValueContext {
    const _localctx: PivotValueContext = new PivotValueContext(this._ctx, this.state);
    this.enterRule(_localctx, 138, SqlBaseParser.RULE_pivotValue);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2053;
        this.expression();
        this.state = 2058;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 252, this._ctx)) {
          case 1:
            {
              this.state = 2055;
              this._errHandler.sync(this);
              switch (this.interpreter.adaptivePredict(this._input, 251, this._ctx)) {
                case 1:
                  {
                    this.state = 2054;
                    this.match(SqlBaseParser.AS);
                  }
                  break;
              }
              this.state = 2057;
              this.identifier();
            }
            break;
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public lateralView(): LateralViewContext {
    const _localctx: LateralViewContext = new LateralViewContext(this._ctx, this.state);
    this.enterRule(_localctx, 140, SqlBaseParser.RULE_lateralView);
    let _la: number;
    try {
      let _alt: number;
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2060;
        this.match(SqlBaseParser.LATERAL);
        this.state = 2061;
        this.match(SqlBaseParser.VIEW);
        this.state = 2063;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 253, this._ctx)) {
          case 1:
            {
              this.state = 2062;
              this.match(SqlBaseParser.OUTER);
            }
            break;
        }
        this.state = 2065;
        this.qualifiedName();
        this.state = 2066;
        this.match(SqlBaseParser.T__1);
        this.state = 2075;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 255, this._ctx)) {
          case 1:
            {
              this.state = 2067;
              this.expression();
              this.state = 2072;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              while (_la === SqlBaseParser.T__3) {
                {
                  {
                    this.state = 2068;
                    this.match(SqlBaseParser.T__3);
                    this.state = 2069;
                    this.expression();
                  }
                }
                this.state = 2074;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
              }
            }
            break;
        }
        this.state = 2077;
        this.match(SqlBaseParser.T__2);
        this.state = 2078;
        _localctx._tblName = this.identifier();
        this.state = 2090;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 258, this._ctx)) {
          case 1:
            {
              this.state = 2080;
              this._errHandler.sync(this);
              switch (this.interpreter.adaptivePredict(this._input, 256, this._ctx)) {
                case 1:
                  {
                    this.state = 2079;
                    this.match(SqlBaseParser.AS);
                  }
                  break;
              }
              this.state = 2082;
              _localctx._identifier = this.identifier();
              _localctx._colName.push(_localctx._identifier);
              this.state = 2087;
              this._errHandler.sync(this);
              _alt = this.interpreter.adaptivePredict(this._input, 257, this._ctx);
              while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                  {
                    {
                      this.state = 2083;
                      this.match(SqlBaseParser.T__3);
                      this.state = 2084;
                      _localctx._identifier = this.identifier();
                      _localctx._colName.push(_localctx._identifier);
                    }
                  }
                }
                this.state = 2089;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 257, this._ctx);
              }
            }
            break;
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public setQuantifier(): SetQuantifierContext {
    const _localctx: SetQuantifierContext = new SetQuantifierContext(this._ctx, this.state);
    this.enterRule(_localctx, 142, SqlBaseParser.RULE_setQuantifier);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2092;
        _la = this._input.LA(1);
        if (!(_la === SqlBaseParser.ALL || _la === SqlBaseParser.DISTINCT)) {
          this._errHandler.recoverInline(this);
        } else {
          if (this._input.LA(1) === Token.EOF) {
            this.matchedEOF = true;
          }

          this._errHandler.reportMatch(this);
          this.consume();
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public relation(): RelationContext {
    const _localctx: RelationContext = new RelationContext(this._ctx, this.state);
    this.enterRule(_localctx, 144, SqlBaseParser.RULE_relation);
    try {
      let _alt: number;
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2095;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 259, this._ctx)) {
          case 1:
            {
              this.state = 2094;
              this.match(SqlBaseParser.LATERAL);
            }
            break;
        }
        this.state = 2097;
        this.relationPrimary();
        this.state = 2101;
        this._errHandler.sync(this);
        _alt = this.interpreter.adaptivePredict(this._input, 260, this._ctx);
        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            {
              {
                this.state = 2098;
                this.joinRelation();
              }
            }
          }
          this.state = 2103;
          this._errHandler.sync(this);
          _alt = this.interpreter.adaptivePredict(this._input, 260, this._ctx);
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public joinRelation(): JoinRelationContext {
    const _localctx: JoinRelationContext = new JoinRelationContext(this._ctx, this.state);
    this.enterRule(_localctx, 146, SqlBaseParser.RULE_joinRelation);
    try {
      this.state = 2121;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case SqlBaseParser.ANTI:
        case SqlBaseParser.CROSS:
        case SqlBaseParser.FULL:
        case SqlBaseParser.INNER:
        case SqlBaseParser.JOIN:
        case SqlBaseParser.LEFT:
        case SqlBaseParser.RIGHT:
        case SqlBaseParser.SEMI:
          this.enterOuterAlt(_localctx, 1);
          {
            {
              this.state = 2104;
              this.joinType();
            }
            this.state = 2105;
            this.match(SqlBaseParser.JOIN);
            this.state = 2107;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 261, this._ctx)) {
              case 1:
                {
                  this.state = 2106;
                  this.match(SqlBaseParser.LATERAL);
                }
                break;
            }
            this.state = 2109;
            _localctx._right = this.relationPrimary();
            this.state = 2111;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 262, this._ctx)) {
              case 1:
                {
                  this.state = 2110;
                  this.joinCriteria();
                }
                break;
            }
          }
          break;
        case SqlBaseParser.NATURAL:
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 2113;
            this.match(SqlBaseParser.NATURAL);
            this.state = 2114;
            this.joinType();
            this.state = 2115;
            this.match(SqlBaseParser.JOIN);
            this.state = 2117;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 263, this._ctx)) {
              case 1:
                {
                  this.state = 2116;
                  this.match(SqlBaseParser.LATERAL);
                }
                break;
            }
            this.state = 2119;
            _localctx._right = this.relationPrimary();
          }
          break;
        default:
          throw new NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public joinType(): JoinTypeContext {
    const _localctx: JoinTypeContext = new JoinTypeContext(this._ctx, this.state);
    this.enterRule(_localctx, 148, SqlBaseParser.RULE_joinType);
    let _la: number;
    try {
      this.state = 2147;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 271, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 2124;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.INNER) {
              {
                this.state = 2123;
                this.match(SqlBaseParser.INNER);
              }
            }
          }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 2126;
            this.match(SqlBaseParser.CROSS);
          }
          break;

        case 3:
          this.enterOuterAlt(_localctx, 3);
          {
            this.state = 2127;
            this.match(SqlBaseParser.LEFT);
            this.state = 2129;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.OUTER) {
              {
                this.state = 2128;
                this.match(SqlBaseParser.OUTER);
              }
            }
          }
          break;

        case 4:
          this.enterOuterAlt(_localctx, 4);
          {
            this.state = 2132;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.LEFT) {
              {
                this.state = 2131;
                this.match(SqlBaseParser.LEFT);
              }
            }

            this.state = 2134;
            this.match(SqlBaseParser.SEMI);
          }
          break;

        case 5:
          this.enterOuterAlt(_localctx, 5);
          {
            this.state = 2135;
            this.match(SqlBaseParser.RIGHT);
            this.state = 2137;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.OUTER) {
              {
                this.state = 2136;
                this.match(SqlBaseParser.OUTER);
              }
            }
          }
          break;

        case 6:
          this.enterOuterAlt(_localctx, 6);
          {
            this.state = 2139;
            this.match(SqlBaseParser.FULL);
            this.state = 2141;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.OUTER) {
              {
                this.state = 2140;
                this.match(SqlBaseParser.OUTER);
              }
            }
          }
          break;

        case 7:
          this.enterOuterAlt(_localctx, 7);
          {
            this.state = 2144;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.LEFT) {
              {
                this.state = 2143;
                this.match(SqlBaseParser.LEFT);
              }
            }

            this.state = 2146;
            this.match(SqlBaseParser.ANTI);
          }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public joinCriteria(): JoinCriteriaContext {
    const _localctx: JoinCriteriaContext = new JoinCriteriaContext(this._ctx, this.state);
    this.enterRule(_localctx, 150, SqlBaseParser.RULE_joinCriteria);
    try {
      this.state = 2153;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case SqlBaseParser.ON:
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 2149;
            this.match(SqlBaseParser.ON);
            this.state = 2150;
            this.booleanExpression(0);
          }
          break;
        case SqlBaseParser.USING:
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 2151;
            this.match(SqlBaseParser.USING);
            this.state = 2152;
            this.identifierList();
          }
          break;
        default:
          throw new NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public sample(): SampleContext {
    const _localctx: SampleContext = new SampleContext(this._ctx, this.state);
    this.enterRule(_localctx, 152, SqlBaseParser.RULE_sample);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2155;
        this.match(SqlBaseParser.TABLESAMPLE);
        this.state = 2156;
        this.match(SqlBaseParser.T__1);
        this.state = 2158;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 273, this._ctx)) {
          case 1:
            {
              this.state = 2157;
              this.sampleMethod();
            }
            break;
        }
        this.state = 2160;
        this.match(SqlBaseParser.T__2);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public sampleMethod(): SampleMethodContext {
    let _localctx: SampleMethodContext = new SampleMethodContext(this._ctx, this.state);
    this.enterRule(_localctx, 154, SqlBaseParser.RULE_sampleMethod);
    let _la: number;
    try {
      this.state = 2186;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 277, this._ctx)) {
        case 1:
          _localctx = new SampleByPercentileContext(_localctx);
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 2163;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.MINUS) {
              {
                this.state = 2162;
                (_localctx as SampleByPercentileContext)._negativeSign = this.match(SqlBaseParser.MINUS);
              }
            }

            this.state = 2165;
            (_localctx as SampleByPercentileContext)._percentage = this._input.LT(1);
            _la = this._input.LA(1);
            if (!(_la === SqlBaseParser.INTEGER_VALUE || _la === SqlBaseParser.DECIMAL_VALUE)) {
              (_localctx as SampleByPercentileContext)._percentage = this._errHandler.recoverInline(this);
            } else {
              if (this._input.LA(1) === Token.EOF) {
                this.matchedEOF = true;
              }

              this._errHandler.reportMatch(this);
              this.consume();
            }
            this.state = 2166;
            this.match(SqlBaseParser.PERCENTLIT);
          }
          break;

        case 2:
          _localctx = new SampleByRowsContext(_localctx);
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 2167;
            this.expression();
            this.state = 2168;
            this.match(SqlBaseParser.ROWS);
          }
          break;

        case 3:
          _localctx = new SampleByBucketContext(_localctx);
          this.enterOuterAlt(_localctx, 3);
          {
            this.state = 2170;
            (_localctx as SampleByBucketContext)._sampleType = this.match(SqlBaseParser.BUCKET);
            this.state = 2171;
            (_localctx as SampleByBucketContext)._numerator = this.match(SqlBaseParser.INTEGER_VALUE);
            this.state = 2172;
            this.match(SqlBaseParser.OUT);
            this.state = 2173;
            this.match(SqlBaseParser.OF);
            this.state = 2174;
            (_localctx as SampleByBucketContext)._denominator = this.match(SqlBaseParser.INTEGER_VALUE);
            this.state = 2183;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.ON) {
              {
                this.state = 2175;
                this.match(SqlBaseParser.ON);
                this.state = 2181;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 275, this._ctx)) {
                  case 1:
                    {
                      this.state = 2176;
                      this.identifier();
                    }
                    break;

                  case 2:
                    {
                      this.state = 2177;
                      this.qualifiedName();
                      this.state = 2178;
                      this.match(SqlBaseParser.T__1);
                      this.state = 2179;
                      this.match(SqlBaseParser.T__2);
                    }
                    break;
                }
              }
            }
          }
          break;

        case 4:
          _localctx = new SampleByBytesContext(_localctx);
          this.enterOuterAlt(_localctx, 4);
          {
            this.state = 2185;
            (_localctx as SampleByBytesContext)._bytes = this.expression();
          }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public identifierList(): IdentifierListContext {
    const _localctx: IdentifierListContext = new IdentifierListContext(this._ctx, this.state);
    this.enterRule(_localctx, 156, SqlBaseParser.RULE_identifierList);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2188;
        this.match(SqlBaseParser.T__1);
        this.state = 2189;
        this.identifierSeq();
        this.state = 2190;
        this.match(SqlBaseParser.T__2);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public identifierSeq(): IdentifierSeqContext {
    const _localctx: IdentifierSeqContext = new IdentifierSeqContext(this._ctx, this.state);
    this.enterRule(_localctx, 158, SqlBaseParser.RULE_identifierSeq);
    try {
      let _alt: number;
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2192;
        _localctx._errorCapturingIdentifier = this.errorCapturingIdentifier();
        _localctx._ident.push(_localctx._errorCapturingIdentifier);
        this.state = 2197;
        this._errHandler.sync(this);
        _alt = this.interpreter.adaptivePredict(this._input, 278, this._ctx);
        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            {
              {
                this.state = 2193;
                this.match(SqlBaseParser.T__3);
                this.state = 2194;
                _localctx._errorCapturingIdentifier = this.errorCapturingIdentifier();
                _localctx._ident.push(_localctx._errorCapturingIdentifier);
              }
            }
          }
          this.state = 2199;
          this._errHandler.sync(this);
          _alt = this.interpreter.adaptivePredict(this._input, 278, this._ctx);
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public orderedIdentifierList(): OrderedIdentifierListContext {
    const _localctx: OrderedIdentifierListContext = new OrderedIdentifierListContext(this._ctx, this.state);
    this.enterRule(_localctx, 160, SqlBaseParser.RULE_orderedIdentifierList);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2200;
        this.match(SqlBaseParser.T__1);
        this.state = 2201;
        this.orderedIdentifier();
        this.state = 2206;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === SqlBaseParser.T__3) {
          {
            {
              this.state = 2202;
              this.match(SqlBaseParser.T__3);
              this.state = 2203;
              this.orderedIdentifier();
            }
          }
          this.state = 2208;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
        this.state = 2209;
        this.match(SqlBaseParser.T__2);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public orderedIdentifier(): OrderedIdentifierContext {
    const _localctx: OrderedIdentifierContext = new OrderedIdentifierContext(this._ctx, this.state);
    this.enterRule(_localctx, 162, SqlBaseParser.RULE_orderedIdentifier);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2211;
        _localctx._ident = this.errorCapturingIdentifier();
        this.state = 2213;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === SqlBaseParser.ASC || _la === SqlBaseParser.DESC) {
          {
            this.state = 2212;
            _localctx._ordering = this._input.LT(1);
            _la = this._input.LA(1);
            if (!(_la === SqlBaseParser.ASC || _la === SqlBaseParser.DESC)) {
              _localctx._ordering = this._errHandler.recoverInline(this);
            } else {
              if (this._input.LA(1) === Token.EOF) {
                this.matchedEOF = true;
              }

              this._errHandler.reportMatch(this);
              this.consume();
            }
          }
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public identifierCommentList(): IdentifierCommentListContext {
    const _localctx: IdentifierCommentListContext = new IdentifierCommentListContext(this._ctx, this.state);
    this.enterRule(_localctx, 164, SqlBaseParser.RULE_identifierCommentList);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2215;
        this.match(SqlBaseParser.T__1);
        this.state = 2216;
        this.identifierComment();
        this.state = 2221;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === SqlBaseParser.T__3) {
          {
            {
              this.state = 2217;
              this.match(SqlBaseParser.T__3);
              this.state = 2218;
              this.identifierComment();
            }
          }
          this.state = 2223;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
        this.state = 2224;
        this.match(SqlBaseParser.T__2);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public identifierComment(): IdentifierCommentContext {
    const _localctx: IdentifierCommentContext = new IdentifierCommentContext(this._ctx, this.state);
    this.enterRule(_localctx, 166, SqlBaseParser.RULE_identifierComment);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2226;
        this.identifier();
        this.state = 2228;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === SqlBaseParser.COMMENT) {
          {
            this.state = 2227;
            this.commentSpec();
          }
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public relationPrimary(): RelationPrimaryContext {
    let _localctx: RelationPrimaryContext = new RelationPrimaryContext(this._ctx, this.state);
    this.enterRule(_localctx, 168, SqlBaseParser.RULE_relationPrimary);
    try {
      this.state = 2254;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 286, this._ctx)) {
        case 1:
          _localctx = new TableNameContext(_localctx);
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 2230;
            this.multipartIdentifier();
            this.state = 2232;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 283, this._ctx)) {
              case 1:
                {
                  this.state = 2231;
                  this.sample();
                }
                break;
            }
            this.state = 2234;
            this.tableAlias();
          }
          break;

        case 2:
          _localctx = new AliasedQueryContext(_localctx);
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 2236;
            this.match(SqlBaseParser.T__1);
            this.state = 2237;
            this.query();
            this.state = 2238;
            this.match(SqlBaseParser.T__2);
            this.state = 2240;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 284, this._ctx)) {
              case 1:
                {
                  this.state = 2239;
                  this.sample();
                }
                break;
            }
            this.state = 2242;
            this.tableAlias();
          }
          break;

        case 3:
          _localctx = new AliasedRelationContext(_localctx);
          this.enterOuterAlt(_localctx, 3);
          {
            this.state = 2244;
            this.match(SqlBaseParser.T__1);
            this.state = 2245;
            this.relation();
            this.state = 2246;
            this.match(SqlBaseParser.T__2);
            this.state = 2248;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 285, this._ctx)) {
              case 1:
                {
                  this.state = 2247;
                  this.sample();
                }
                break;
            }
            this.state = 2250;
            this.tableAlias();
          }
          break;

        case 4:
          _localctx = new InlineTableDefault2Context(_localctx);
          this.enterOuterAlt(_localctx, 4);
          {
            this.state = 2252;
            this.inlineTable();
          }
          break;

        case 5:
          _localctx = new TableValuedFunctionContext(_localctx);
          this.enterOuterAlt(_localctx, 5);
          {
            this.state = 2253;
            this.functionTable();
          }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public inlineTable(): InlineTableContext {
    const _localctx: InlineTableContext = new InlineTableContext(this._ctx, this.state);
    this.enterRule(_localctx, 170, SqlBaseParser.RULE_inlineTable);
    try {
      let _alt: number;
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2256;
        this.match(SqlBaseParser.VALUES);
        this.state = 2257;
        this.expression();
        this.state = 2262;
        this._errHandler.sync(this);
        _alt = this.interpreter.adaptivePredict(this._input, 287, this._ctx);
        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            {
              {
                this.state = 2258;
                this.match(SqlBaseParser.T__3);
                this.state = 2259;
                this.expression();
              }
            }
          }
          this.state = 2264;
          this._errHandler.sync(this);
          _alt = this.interpreter.adaptivePredict(this._input, 287, this._ctx);
        }
        this.state = 2265;
        this.tableAlias();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public functionTable(): FunctionTableContext {
    const _localctx: FunctionTableContext = new FunctionTableContext(this._ctx, this.state);
    this.enterRule(_localctx, 172, SqlBaseParser.RULE_functionTable);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2267;
        _localctx._funcName = this.functionName();
        this.state = 2268;
        this.match(SqlBaseParser.T__1);
        this.state = 2277;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 289, this._ctx)) {
          case 1:
            {
              this.state = 2269;
              this.expression();
              this.state = 2274;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              while (_la === SqlBaseParser.T__3) {
                {
                  {
                    this.state = 2270;
                    this.match(SqlBaseParser.T__3);
                    this.state = 2271;
                    this.expression();
                  }
                }
                this.state = 2276;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
              }
            }
            break;
        }
        this.state = 2279;
        this.match(SqlBaseParser.T__2);
        this.state = 2280;
        this.tableAlias();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public tableAlias(): TableAliasContext {
    const _localctx: TableAliasContext = new TableAliasContext(this._ctx, this.state);
    this.enterRule(_localctx, 174, SqlBaseParser.RULE_tableAlias);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2289;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 292, this._ctx)) {
          case 1:
            {
              this.state = 2283;
              this._errHandler.sync(this);
              switch (this.interpreter.adaptivePredict(this._input, 290, this._ctx)) {
                case 1:
                  {
                    this.state = 2282;
                    this.match(SqlBaseParser.AS);
                  }
                  break;
              }
              this.state = 2285;
              this.strictIdentifier();
              this.state = 2287;
              this._errHandler.sync(this);
              switch (this.interpreter.adaptivePredict(this._input, 291, this._ctx)) {
                case 1:
                  {
                    this.state = 2286;
                    this.identifierList();
                  }
                  break;
              }
            }
            break;
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public rowFormat(): RowFormatContext {
    let _localctx: RowFormatContext = new RowFormatContext(this._ctx, this.state);
    this.enterRule(_localctx, 176, SqlBaseParser.RULE_rowFormat);
    try {
      this.state = 2340;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 300, this._ctx)) {
        case 1:
          _localctx = new RowFormatSerdeContext(_localctx);
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 2291;
            this.match(SqlBaseParser.ROW);
            this.state = 2292;
            this.match(SqlBaseParser.FORMAT);
            this.state = 2293;
            this.match(SqlBaseParser.SERDE);
            this.state = 2294;
            (_localctx as RowFormatSerdeContext)._name = this.match(SqlBaseParser.STRING);
            this.state = 2298;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 293, this._ctx)) {
              case 1:
                {
                  this.state = 2295;
                  this.match(SqlBaseParser.WITH);
                  this.state = 2296;
                  this.match(SqlBaseParser.SERDEPROPERTIES);
                  this.state = 2297;
                  (_localctx as RowFormatSerdeContext)._props = this.tablePropertyList();
                }
                break;
            }
          }
          break;

        case 2:
          _localctx = new RowFormatDelimitedContext(_localctx);
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 2300;
            this.match(SqlBaseParser.ROW);
            this.state = 2301;
            this.match(SqlBaseParser.FORMAT);
            this.state = 2302;
            this.match(SqlBaseParser.DELIMITED);
            this.state = 2312;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 295, this._ctx)) {
              case 1:
                {
                  this.state = 2303;
                  this.match(SqlBaseParser.FIELDS);
                  this.state = 2304;
                  this.match(SqlBaseParser.TERMINATED);
                  this.state = 2305;
                  this.match(SqlBaseParser.BY);
                  this.state = 2306;
                  (_localctx as RowFormatDelimitedContext)._fieldsTerminatedBy = this.match(SqlBaseParser.STRING);
                  this.state = 2310;
                  this._errHandler.sync(this);
                  switch (this.interpreter.adaptivePredict(this._input, 294, this._ctx)) {
                    case 1:
                      {
                        this.state = 2307;
                        this.match(SqlBaseParser.ESCAPED);
                        this.state = 2308;
                        this.match(SqlBaseParser.BY);
                        this.state = 2309;
                        (_localctx as RowFormatDelimitedContext)._escapedBy = this.match(SqlBaseParser.STRING);
                      }
                      break;
                  }
                }
                break;
            }
            this.state = 2319;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 296, this._ctx)) {
              case 1:
                {
                  this.state = 2314;
                  this.match(SqlBaseParser.COLLECTION);
                  this.state = 2315;
                  this.match(SqlBaseParser.ITEMS);
                  this.state = 2316;
                  this.match(SqlBaseParser.TERMINATED);
                  this.state = 2317;
                  this.match(SqlBaseParser.BY);
                  this.state = 2318;
                  (_localctx as RowFormatDelimitedContext)._collectionItemsTerminatedBy = this.match(
                    SqlBaseParser.STRING
                  );
                }
                break;
            }
            this.state = 2326;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 297, this._ctx)) {
              case 1:
                {
                  this.state = 2321;
                  this.match(SqlBaseParser.MAP);
                  this.state = 2322;
                  this.match(SqlBaseParser.KEYS);
                  this.state = 2323;
                  this.match(SqlBaseParser.TERMINATED);
                  this.state = 2324;
                  this.match(SqlBaseParser.BY);
                  this.state = 2325;
                  (_localctx as RowFormatDelimitedContext)._keysTerminatedBy = this.match(SqlBaseParser.STRING);
                }
                break;
            }
            this.state = 2332;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 298, this._ctx)) {
              case 1:
                {
                  this.state = 2328;
                  this.match(SqlBaseParser.LINES);
                  this.state = 2329;
                  this.match(SqlBaseParser.TERMINATED);
                  this.state = 2330;
                  this.match(SqlBaseParser.BY);
                  this.state = 2331;
                  (_localctx as RowFormatDelimitedContext)._linesSeparatedBy = this.match(SqlBaseParser.STRING);
                }
                break;
            }
            this.state = 2338;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 299, this._ctx)) {
              case 1:
                {
                  this.state = 2334;
                  this.match(SqlBaseParser.NULL);
                  this.state = 2335;
                  this.match(SqlBaseParser.DEFINED);
                  this.state = 2336;
                  this.match(SqlBaseParser.AS);
                  this.state = 2337;
                  (_localctx as RowFormatDelimitedContext)._nullDefinedAs = this.match(SqlBaseParser.STRING);
                }
                break;
            }
          }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public multipartIdentifierList(): MultipartIdentifierListContext {
    const _localctx: MultipartIdentifierListContext = new MultipartIdentifierListContext(this._ctx, this.state);
    this.enterRule(_localctx, 178, SqlBaseParser.RULE_multipartIdentifierList);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2342;
        this.multipartIdentifier();
        this.state = 2347;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === SqlBaseParser.T__3) {
          {
            {
              this.state = 2343;
              this.match(SqlBaseParser.T__3);
              this.state = 2344;
              this.multipartIdentifier();
            }
          }
          this.state = 2349;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public multipartIdentifier(): MultipartIdentifierContext {
    const _localctx: MultipartIdentifierContext = new MultipartIdentifierContext(this._ctx, this.state);
    this.enterRule(_localctx, 180, SqlBaseParser.RULE_multipartIdentifier);
    try {
      let _alt: number;
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2350;
        _localctx._errorCapturingIdentifier = this.errorCapturingIdentifier();
        _localctx._parts.push(_localctx._errorCapturingIdentifier);
        this.state = 2355;
        this._errHandler.sync(this);
        _alt = this.interpreter.adaptivePredict(this._input, 302, this._ctx);
        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            {
              {
                this.state = 2351;
                this.match(SqlBaseParser.T__4);
                this.state = 2352;
                _localctx._errorCapturingIdentifier = this.errorCapturingIdentifier();
                _localctx._parts.push(_localctx._errorCapturingIdentifier);
              }
            }
          }
          this.state = 2357;
          this._errHandler.sync(this);
          _alt = this.interpreter.adaptivePredict(this._input, 302, this._ctx);
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public tableIdentifier(): TableIdentifierContext {
    const _localctx: TableIdentifierContext = new TableIdentifierContext(this._ctx, this.state);
    this.enterRule(_localctx, 182, SqlBaseParser.RULE_tableIdentifier);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2361;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 303, this._ctx)) {
          case 1:
            {
              this.state = 2358;
              _localctx._db = this.errorCapturingIdentifier();
              this.state = 2359;
              this.match(SqlBaseParser.T__4);
            }
            break;
        }
        this.state = 2363;
        _localctx._table = this.errorCapturingIdentifier();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public functionIdentifier(): FunctionIdentifierContext {
    const _localctx: FunctionIdentifierContext = new FunctionIdentifierContext(this._ctx, this.state);
    this.enterRule(_localctx, 184, SqlBaseParser.RULE_functionIdentifier);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2368;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 304, this._ctx)) {
          case 1:
            {
              this.state = 2365;
              _localctx._db = this.errorCapturingIdentifier();
              this.state = 2366;
              this.match(SqlBaseParser.T__4);
            }
            break;
        }
        this.state = 2370;
        _localctx._funcName = this.errorCapturingIdentifier();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public namedExpression(): NamedExpressionContext {
    const _localctx: NamedExpressionContext = new NamedExpressionContext(this._ctx, this.state);
    this.enterRule(_localctx, 186, SqlBaseParser.RULE_namedExpression);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2372;
        this.expression();
        this.state = 2380;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 307, this._ctx)) {
          case 1:
            {
              this.state = 2374;
              this._errHandler.sync(this);
              switch (this.interpreter.adaptivePredict(this._input, 305, this._ctx)) {
                case 1:
                  {
                    this.state = 2373;
                    this.match(SqlBaseParser.AS);
                  }
                  break;
              }
              this.state = 2378;
              this._errHandler.sync(this);
              switch (this.interpreter.adaptivePredict(this._input, 306, this._ctx)) {
                case 1:
                  {
                    this.state = 2376;
                    _localctx._name = this.errorCapturingIdentifier();
                  }
                  break;

                case 2:
                  {
                    this.state = 2377;
                    this.identifierList();
                  }
                  break;
              }
            }
            break;
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public namedExpressionSeq(): NamedExpressionSeqContext {
    const _localctx: NamedExpressionSeqContext = new NamedExpressionSeqContext(this._ctx, this.state);
    this.enterRule(_localctx, 188, SqlBaseParser.RULE_namedExpressionSeq);
    try {
      let _alt: number;
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2382;
        this.namedExpression();
        this.state = 2387;
        this._errHandler.sync(this);
        _alt = this.interpreter.adaptivePredict(this._input, 308, this._ctx);
        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            {
              {
                this.state = 2383;
                this.match(SqlBaseParser.T__3);
                this.state = 2384;
                this.namedExpression();
              }
            }
          }
          this.state = 2389;
          this._errHandler.sync(this);
          _alt = this.interpreter.adaptivePredict(this._input, 308, this._ctx);
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public partitionFieldList(): PartitionFieldListContext {
    const _localctx: PartitionFieldListContext = new PartitionFieldListContext(this._ctx, this.state);
    this.enterRule(_localctx, 190, SqlBaseParser.RULE_partitionFieldList);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2390;
        this.match(SqlBaseParser.T__1);
        this.state = 2391;
        _localctx._partitionField = this.partitionField();
        _localctx._fields.push(_localctx._partitionField);
        this.state = 2396;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === SqlBaseParser.T__3) {
          {
            {
              this.state = 2392;
              this.match(SqlBaseParser.T__3);
              this.state = 2393;
              _localctx._partitionField = this.partitionField();
              _localctx._fields.push(_localctx._partitionField);
            }
          }
          this.state = 2398;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
        this.state = 2399;
        this.match(SqlBaseParser.T__2);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public partitionField(): PartitionFieldContext {
    let _localctx: PartitionFieldContext = new PartitionFieldContext(this._ctx, this.state);
    this.enterRule(_localctx, 192, SqlBaseParser.RULE_partitionField);
    try {
      this.state = 2403;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 310, this._ctx)) {
        case 1:
          _localctx = new PartitionTransformContext(_localctx);
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 2401;
            this.transform();
          }
          break;

        case 2:
          _localctx = new PartitionColumnContext(_localctx);
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 2402;
            this.colType();
          }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public transform(): TransformContext {
    let _localctx: TransformContext = new TransformContext(this._ctx, this.state);
    this.enterRule(_localctx, 194, SqlBaseParser.RULE_transform);
    let _la: number;
    try {
      this.state = 2418;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 312, this._ctx)) {
        case 1:
          _localctx = new IdentityTransformContext(_localctx);
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 2405;
            this.qualifiedName();
          }
          break;

        case 2:
          _localctx = new ApplyTransformContext(_localctx);
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 2406;
            (_localctx as ApplyTransformContext)._transformName = this.identifier();
            this.state = 2407;
            this.match(SqlBaseParser.T__1);
            this.state = 2408;
            (_localctx as ApplyTransformContext)._transformArgument = this.transformArgument();
            (_localctx as ApplyTransformContext)._argument.push(
              (_localctx as ApplyTransformContext)._transformArgument
            );
            this.state = 2413;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === SqlBaseParser.T__3) {
              {
                {
                  this.state = 2409;
                  this.match(SqlBaseParser.T__3);
                  this.state = 2410;
                  (_localctx as ApplyTransformContext)._transformArgument = this.transformArgument();
                  (_localctx as ApplyTransformContext)._argument.push(
                    (_localctx as ApplyTransformContext)._transformArgument
                  );
                }
              }
              this.state = 2415;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
            }
            this.state = 2416;
            this.match(SqlBaseParser.T__2);
          }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public transformArgument(): TransformArgumentContext {
    const _localctx: TransformArgumentContext = new TransformArgumentContext(this._ctx, this.state);
    this.enterRule(_localctx, 196, SqlBaseParser.RULE_transformArgument);
    try {
      this.state = 2422;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 313, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 2420;
            this.qualifiedName();
          }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 2421;
            this.constant();
          }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public expression(): ExpressionContext {
    const _localctx: ExpressionContext = new ExpressionContext(this._ctx, this.state);
    this.enterRule(_localctx, 198, SqlBaseParser.RULE_expression);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2424;
        this.booleanExpression(0);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public expressionSeq(): ExpressionSeqContext {
    const _localctx: ExpressionSeqContext = new ExpressionSeqContext(this._ctx, this.state);
    this.enterRule(_localctx, 200, SqlBaseParser.RULE_expressionSeq);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2426;
        this.expression();
        this.state = 2431;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === SqlBaseParser.T__3) {
          {
            {
              this.state = 2427;
              this.match(SqlBaseParser.T__3);
              this.state = 2428;
              this.expression();
            }
          }
          this.state = 2433;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  public booleanExpression(): BooleanExpressionContext;
  public booleanExpression(_p: number): BooleanExpressionContext;
  // @RuleVersion(0)
  public booleanExpression(_p?: number): BooleanExpressionContext {
    if (_p === undefined) {
      _p = 0;
    }

    const _parentctx: ParserRuleContext = this._ctx;
    const _parentState: number = this.state;
    let _localctx: BooleanExpressionContext = new BooleanExpressionContext(this._ctx, _parentState);
    let _prevctx: BooleanExpressionContext = _localctx;
    const _startState = 202;
    this.enterRecursionRule(_localctx, 202, SqlBaseParser.RULE_booleanExpression, _p);
    try {
      let _alt: number;
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2446;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 316, this._ctx)) {
          case 1:
            {
              _localctx = new LogicalNotContext(_localctx);
              this._ctx = _localctx;
              _prevctx = _localctx;

              this.state = 2435;
              this.match(SqlBaseParser.NOT);
              this.state = 2436;
              this.booleanExpression(5);
            }
            break;

          case 2:
            {
              _localctx = new ExistsContext(_localctx);
              this._ctx = _localctx;
              _prevctx = _localctx;
              this.state = 2437;
              this.match(SqlBaseParser.EXISTS);
              this.state = 2438;
              this.match(SqlBaseParser.T__1);
              this.state = 2439;
              this.query();
              this.state = 2440;
              this.match(SqlBaseParser.T__2);
            }
            break;

          case 3:
            {
              _localctx = new PredicatedContext(_localctx);
              this._ctx = _localctx;
              _prevctx = _localctx;
              this.state = 2442;
              this.valueExpression(0);
              this.state = 2444;
              this._errHandler.sync(this);
              switch (this.interpreter.adaptivePredict(this._input, 315, this._ctx)) {
                case 1:
                  {
                    this.state = 2443;
                    this.predicate();
                  }
                  break;
              }
            }
            break;
        }
        this._ctx._stop = this._input.tryLT(-1);
        this.state = 2456;
        this._errHandler.sync(this);
        _alt = this.interpreter.adaptivePredict(this._input, 318, this._ctx);
        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            if (this._parseListeners != null) {
              this.triggerExitRuleEvent();
            }
            _prevctx = _localctx;
            {
              this.state = 2454;
              this._errHandler.sync(this);
              switch (this.interpreter.adaptivePredict(this._input, 317, this._ctx)) {
                case 1:
                  {
                    _localctx = new LogicalBinaryContext(new BooleanExpressionContext(_parentctx, _parentState));
                    (_localctx as LogicalBinaryContext)._left = _prevctx;
                    this.pushNewRecursionContext(_localctx, _startState, SqlBaseParser.RULE_booleanExpression);
                    this.state = 2448;
                    if (!this.precpred(this._ctx, 2)) {
                      throw this.createFailedPredicateException("this.precpred(this._ctx, 2)");
                    }
                    this.state = 2449;
                    (_localctx as LogicalBinaryContext)._operator = this.match(SqlBaseParser.AND);
                    this.state = 2450;
                    (_localctx as LogicalBinaryContext)._right = this.booleanExpression(3);
                  }
                  break;

                case 2:
                  {
                    _localctx = new LogicalBinaryContext(new BooleanExpressionContext(_parentctx, _parentState));
                    (_localctx as LogicalBinaryContext)._left = _prevctx;
                    this.pushNewRecursionContext(_localctx, _startState, SqlBaseParser.RULE_booleanExpression);
                    this.state = 2451;
                    if (!this.precpred(this._ctx, 1)) {
                      throw this.createFailedPredicateException("this.precpred(this._ctx, 1)");
                    }
                    this.state = 2452;
                    (_localctx as LogicalBinaryContext)._operator = this.match(SqlBaseParser.OR);
                    this.state = 2453;
                    (_localctx as LogicalBinaryContext)._right = this.booleanExpression(2);
                  }
                  break;
              }
            }
          }
          this.state = 2458;
          this._errHandler.sync(this);
          _alt = this.interpreter.adaptivePredict(this._input, 318, this._ctx);
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.unrollRecursionContexts(_parentctx);
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public predicate(): PredicateContext {
    const _localctx: PredicateContext = new PredicateContext(this._ctx, this.state);
    this.enterRule(_localctx, 204, SqlBaseParser.RULE_predicate);
    let _la: number;
    try {
      this.state = 2541;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 332, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 2460;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.NOT) {
              {
                this.state = 2459;
                this.match(SqlBaseParser.NOT);
              }
            }

            this.state = 2462;
            _localctx._kind = this.match(SqlBaseParser.BETWEEN);
            this.state = 2463;
            _localctx._lower = this.valueExpression(0);
            this.state = 2464;
            this.match(SqlBaseParser.AND);
            this.state = 2465;
            _localctx._upper = this.valueExpression(0);
          }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 2468;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.NOT) {
              {
                this.state = 2467;
                this.match(SqlBaseParser.NOT);
              }
            }

            this.state = 2470;
            _localctx._kind = this.match(SqlBaseParser.IN);
            this.state = 2471;
            this.match(SqlBaseParser.T__1);
            this.state = 2472;
            this.expression();
            this.state = 2477;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === SqlBaseParser.T__3) {
              {
                {
                  this.state = 2473;
                  this.match(SqlBaseParser.T__3);
                  this.state = 2474;
                  this.expression();
                }
              }
              this.state = 2479;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
            }
            this.state = 2480;
            this.match(SqlBaseParser.T__2);
          }
          break;

        case 3:
          this.enterOuterAlt(_localctx, 3);
          {
            this.state = 2483;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.NOT) {
              {
                this.state = 2482;
                this.match(SqlBaseParser.NOT);
              }
            }

            this.state = 2485;
            _localctx._kind = this.match(SqlBaseParser.IN);
            this.state = 2486;
            this.match(SqlBaseParser.T__1);
            this.state = 2487;
            this.query();
            this.state = 2488;
            this.match(SqlBaseParser.T__2);
          }
          break;

        case 4:
          this.enterOuterAlt(_localctx, 4);
          {
            this.state = 2491;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.NOT) {
              {
                this.state = 2490;
                this.match(SqlBaseParser.NOT);
              }
            }

            this.state = 2493;
            _localctx._kind = this.match(SqlBaseParser.RLIKE);
            this.state = 2494;
            _localctx._pattern = this.valueExpression(0);
          }
          break;

        case 5:
          this.enterOuterAlt(_localctx, 5);
          {
            this.state = 2496;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.NOT) {
              {
                this.state = 2495;
                this.match(SqlBaseParser.NOT);
              }
            }

            this.state = 2498;
            _localctx._kind = this.match(SqlBaseParser.LIKE);
            this.state = 2499;
            _localctx._quantifier = this._input.LT(1);
            _la = this._input.LA(1);
            if (!(_la === SqlBaseParser.ALL || _la === SqlBaseParser.ANY || _la === SqlBaseParser.SOME)) {
              _localctx._quantifier = this._errHandler.recoverInline(this);
            } else {
              if (this._input.LA(1) === Token.EOF) {
                this.matchedEOF = true;
              }

              this._errHandler.reportMatch(this);
              this.consume();
            }
            this.state = 2513;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 326, this._ctx)) {
              case 1:
                {
                  this.state = 2500;
                  this.match(SqlBaseParser.T__1);
                  this.state = 2501;
                  this.match(SqlBaseParser.T__2);
                }
                break;

              case 2:
                {
                  this.state = 2502;
                  this.match(SqlBaseParser.T__1);
                  this.state = 2503;
                  this.expression();
                  this.state = 2508;
                  this._errHandler.sync(this);
                  _la = this._input.LA(1);
                  while (_la === SqlBaseParser.T__3) {
                    {
                      {
                        this.state = 2504;
                        this.match(SqlBaseParser.T__3);
                        this.state = 2505;
                        this.expression();
                      }
                    }
                    this.state = 2510;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                  }
                  this.state = 2511;
                  this.match(SqlBaseParser.T__2);
                }
                break;
            }
          }
          break;

        case 6:
          this.enterOuterAlt(_localctx, 6);
          {
            this.state = 2516;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.NOT) {
              {
                this.state = 2515;
                this.match(SqlBaseParser.NOT);
              }
            }

            this.state = 2518;
            _localctx._kind = this.match(SqlBaseParser.LIKE);
            this.state = 2519;
            _localctx._pattern = this.valueExpression(0);
            this.state = 2522;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 328, this._ctx)) {
              case 1:
                {
                  this.state = 2520;
                  this.match(SqlBaseParser.ESCAPE);
                  this.state = 2521;
                  _localctx._escapeChar = this.match(SqlBaseParser.STRING);
                }
                break;
            }
          }
          break;

        case 7:
          this.enterOuterAlt(_localctx, 7);
          {
            this.state = 2524;
            this.match(SqlBaseParser.IS);
            this.state = 2526;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.NOT) {
              {
                this.state = 2525;
                this.match(SqlBaseParser.NOT);
              }
            }

            this.state = 2528;
            _localctx._kind = this.match(SqlBaseParser.NULL);
          }
          break;

        case 8:
          this.enterOuterAlt(_localctx, 8);
          {
            this.state = 2529;
            this.match(SqlBaseParser.IS);
            this.state = 2531;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.NOT) {
              {
                this.state = 2530;
                this.match(SqlBaseParser.NOT);
              }
            }

            this.state = 2533;
            _localctx._kind = this._input.LT(1);
            _la = this._input.LA(1);
            if (!(_la === SqlBaseParser.FALSE || _la === SqlBaseParser.TRUE || _la === SqlBaseParser.UNKNOWN)) {
              _localctx._kind = this._errHandler.recoverInline(this);
            } else {
              if (this._input.LA(1) === Token.EOF) {
                this.matchedEOF = true;
              }

              this._errHandler.reportMatch(this);
              this.consume();
            }
          }
          break;

        case 9:
          this.enterOuterAlt(_localctx, 9);
          {
            this.state = 2534;
            this.match(SqlBaseParser.IS);
            this.state = 2536;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.NOT) {
              {
                this.state = 2535;
                this.match(SqlBaseParser.NOT);
              }
            }

            this.state = 2538;
            _localctx._kind = this.match(SqlBaseParser.DISTINCT);
            this.state = 2539;
            this.match(SqlBaseParser.FROM);
            this.state = 2540;
            _localctx._right = this.valueExpression(0);
          }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  public valueExpression(): ValueExpressionContext;
  public valueExpression(_p: number): ValueExpressionContext;
  // @RuleVersion(0)
  public valueExpression(_p?: number): ValueExpressionContext {
    if (_p === undefined) {
      _p = 0;
    }

    const _parentctx: ParserRuleContext = this._ctx;
    const _parentState: number = this.state;
    let _localctx: ValueExpressionContext = new ValueExpressionContext(this._ctx, _parentState);
    let _prevctx: ValueExpressionContext = _localctx;
    const _startState = 206;
    this.enterRecursionRule(_localctx, 206, SqlBaseParser.RULE_valueExpression, _p);
    let _la: number;
    try {
      let _alt: number;
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2547;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 333, this._ctx)) {
          case 1:
            {
              _localctx = new ValueExpressionDefaultContext(_localctx);
              this._ctx = _localctx;
              _prevctx = _localctx;

              this.state = 2544;
              this.primaryExpression(0);
            }
            break;

          case 2:
            {
              _localctx = new ArithmeticUnaryContext(_localctx);
              this._ctx = _localctx;
              _prevctx = _localctx;
              this.state = 2545;
              (_localctx as ArithmeticUnaryContext)._operator = this._input.LT(1);
              _la = this._input.LA(1);
              if (
                !(
                  ((_la - 278) & ~0x1f) === 0 &&
                  ((1 << (_la - 278)) &
                    ((1 << (SqlBaseParser.PLUS - 278)) |
                      (1 << (SqlBaseParser.MINUS - 278)) |
                      (1 << (SqlBaseParser.TILDE - 278)))) !==
                    0
                )
              ) {
                (_localctx as ArithmeticUnaryContext)._operator = this._errHandler.recoverInline(this);
              } else {
                if (this._input.LA(1) === Token.EOF) {
                  this.matchedEOF = true;
                }

                this._errHandler.reportMatch(this);
                this.consume();
              }
              this.state = 2546;
              this.valueExpression(7);
            }
            break;
        }
        this._ctx._stop = this._input.tryLT(-1);
        this.state = 2570;
        this._errHandler.sync(this);
        _alt = this.interpreter.adaptivePredict(this._input, 335, this._ctx);
        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            if (this._parseListeners != null) {
              this.triggerExitRuleEvent();
            }
            _prevctx = _localctx;
            {
              this.state = 2568;
              this._errHandler.sync(this);
              switch (this.interpreter.adaptivePredict(this._input, 334, this._ctx)) {
                case 1:
                  {
                    _localctx = new ArithmeticBinaryContext(new ValueExpressionContext(_parentctx, _parentState));
                    (_localctx as ArithmeticBinaryContext)._left = _prevctx;
                    this.pushNewRecursionContext(_localctx, _startState, SqlBaseParser.RULE_valueExpression);
                    this.state = 2549;
                    if (!this.precpred(this._ctx, 6)) {
                      throw this.createFailedPredicateException("this.precpred(this._ctx, 6)");
                    }
                    this.state = 2550;
                    (_localctx as ArithmeticBinaryContext)._operator = this._input.LT(1);
                    _la = this._input.LA(1);
                    if (
                      !(
                        _la === SqlBaseParser.DIV ||
                        (((_la - 280) & ~0x1f) === 0 &&
                          ((1 << (_la - 280)) &
                            ((1 << (SqlBaseParser.ASTERISK - 280)) |
                              (1 << (SqlBaseParser.SLASH - 280)) |
                              (1 << (SqlBaseParser.PERCENT - 280)))) !==
                            0)
                      )
                    ) {
                      (_localctx as ArithmeticBinaryContext)._operator = this._errHandler.recoverInline(this);
                    } else {
                      if (this._input.LA(1) === Token.EOF) {
                        this.matchedEOF = true;
                      }

                      this._errHandler.reportMatch(this);
                      this.consume();
                    }
                    this.state = 2551;
                    (_localctx as ArithmeticBinaryContext)._right = this.valueExpression(7);
                  }
                  break;

                case 2:
                  {
                    _localctx = new ArithmeticBinaryContext(new ValueExpressionContext(_parentctx, _parentState));
                    (_localctx as ArithmeticBinaryContext)._left = _prevctx;
                    this.pushNewRecursionContext(_localctx, _startState, SqlBaseParser.RULE_valueExpression);
                    this.state = 2552;
                    if (!this.precpred(this._ctx, 5)) {
                      throw this.createFailedPredicateException("this.precpred(this._ctx, 5)");
                    }
                    this.state = 2553;
                    (_localctx as ArithmeticBinaryContext)._operator = this._input.LT(1);
                    _la = this._input.LA(1);
                    if (
                      !(
                        ((_la - 278) & ~0x1f) === 0 &&
                        ((1 << (_la - 278)) &
                          ((1 << (SqlBaseParser.PLUS - 278)) |
                            (1 << (SqlBaseParser.MINUS - 278)) |
                            (1 << (SqlBaseParser.CONCAT_PIPE - 278)))) !==
                          0
                      )
                    ) {
                      (_localctx as ArithmeticBinaryContext)._operator = this._errHandler.recoverInline(this);
                    } else {
                      if (this._input.LA(1) === Token.EOF) {
                        this.matchedEOF = true;
                      }

                      this._errHandler.reportMatch(this);
                      this.consume();
                    }
                    this.state = 2554;
                    (_localctx as ArithmeticBinaryContext)._right = this.valueExpression(6);
                  }
                  break;

                case 3:
                  {
                    _localctx = new ArithmeticBinaryContext(new ValueExpressionContext(_parentctx, _parentState));
                    (_localctx as ArithmeticBinaryContext)._left = _prevctx;
                    this.pushNewRecursionContext(_localctx, _startState, SqlBaseParser.RULE_valueExpression);
                    this.state = 2555;
                    if (!this.precpred(this._ctx, 4)) {
                      throw this.createFailedPredicateException("this.precpred(this._ctx, 4)");
                    }
                    this.state = 2556;
                    (_localctx as ArithmeticBinaryContext)._operator = this.match(SqlBaseParser.AMPERSAND);
                    this.state = 2557;
                    (_localctx as ArithmeticBinaryContext)._right = this.valueExpression(5);
                  }
                  break;

                case 4:
                  {
                    _localctx = new ArithmeticBinaryContext(new ValueExpressionContext(_parentctx, _parentState));
                    (_localctx as ArithmeticBinaryContext)._left = _prevctx;
                    this.pushNewRecursionContext(_localctx, _startState, SqlBaseParser.RULE_valueExpression);
                    this.state = 2558;
                    if (!this.precpred(this._ctx, 3)) {
                      throw this.createFailedPredicateException("this.precpred(this._ctx, 3)");
                    }
                    this.state = 2559;
                    (_localctx as ArithmeticBinaryContext)._operator = this.match(SqlBaseParser.HAT);
                    this.state = 2560;
                    (_localctx as ArithmeticBinaryContext)._right = this.valueExpression(4);
                  }
                  break;

                case 5:
                  {
                    _localctx = new ArithmeticBinaryContext(new ValueExpressionContext(_parentctx, _parentState));
                    (_localctx as ArithmeticBinaryContext)._left = _prevctx;
                    this.pushNewRecursionContext(_localctx, _startState, SqlBaseParser.RULE_valueExpression);
                    this.state = 2561;
                    if (!this.precpred(this._ctx, 2)) {
                      throw this.createFailedPredicateException("this.precpred(this._ctx, 2)");
                    }
                    this.state = 2562;
                    (_localctx as ArithmeticBinaryContext)._operator = this.match(SqlBaseParser.PIPE);
                    this.state = 2563;
                    (_localctx as ArithmeticBinaryContext)._right = this.valueExpression(3);
                  }
                  break;

                case 6:
                  {
                    _localctx = new ComparisonContext(new ValueExpressionContext(_parentctx, _parentState));
                    (_localctx as ComparisonContext)._left = _prevctx;
                    this.pushNewRecursionContext(_localctx, _startState, SqlBaseParser.RULE_valueExpression);
                    this.state = 2564;
                    if (!this.precpred(this._ctx, 1)) {
                      throw this.createFailedPredicateException("this.precpred(this._ctx, 1)");
                    }
                    this.state = 2565;
                    this.comparisonOperator();
                    this.state = 2566;
                    (_localctx as ComparisonContext)._right = this.valueExpression(2);
                  }
                  break;
              }
            }
          }
          this.state = 2572;
          this._errHandler.sync(this);
          _alt = this.interpreter.adaptivePredict(this._input, 335, this._ctx);
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.unrollRecursionContexts(_parentctx);
    }
    return _localctx;
  }

  public primaryExpression(): PrimaryExpressionContext;
  public primaryExpression(_p: number): PrimaryExpressionContext;
  // @RuleVersion(0)
  public primaryExpression(_p?: number): PrimaryExpressionContext {
    if (_p === undefined) {
      _p = 0;
    }

    const _parentctx: ParserRuleContext = this._ctx;
    const _parentState: number = this.state;
    let _localctx: PrimaryExpressionContext = new PrimaryExpressionContext(this._ctx, _parentState);
    let _prevctx: PrimaryExpressionContext = _localctx;
    const _startState = 208;
    this.enterRecursionRule(_localctx, 208, SqlBaseParser.RULE_primaryExpression, _p);
    let _la: number;
    try {
      let _alt: number;
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2761;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 356, this._ctx)) {
          case 1:
            {
              _localctx = new CurrentLikeContext(_localctx);
              this._ctx = _localctx;
              _prevctx = _localctx;

              this.state = 2574;
              (_localctx as CurrentLikeContext)._name = this._input.LT(1);
              _la = this._input.LA(1);
              if (
                !(
                  ((_la - 57) & ~0x1f) === 0 &&
                  ((1 << (_la - 57)) &
                    ((1 << (SqlBaseParser.CURRENT_DATE - 57)) |
                      (1 << (SqlBaseParser.CURRENT_TIMESTAMP - 57)) |
                      (1 << (SqlBaseParser.CURRENT_USER - 57)))) !==
                    0
                )
              ) {
                (_localctx as CurrentLikeContext)._name = this._errHandler.recoverInline(this);
              } else {
                if (this._input.LA(1) === Token.EOF) {
                  this.matchedEOF = true;
                }

                this._errHandler.reportMatch(this);
                this.consume();
              }
            }
            break;

          case 2:
            {
              _localctx = new SearchedCaseContext(_localctx);
              this._ctx = _localctx;
              _prevctx = _localctx;
              this.state = 2575;
              this.match(SqlBaseParser.CASE);
              this.state = 2577;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              do {
                {
                  {
                    this.state = 2576;
                    this.whenClause();
                  }
                }
                this.state = 2579;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
              } while (_la === SqlBaseParser.WHEN);
              this.state = 2583;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === SqlBaseParser.ELSE) {
                {
                  this.state = 2581;
                  this.match(SqlBaseParser.ELSE);
                  this.state = 2582;
                  (_localctx as SearchedCaseContext)._elseExpression = this.expression();
                }
              }

              this.state = 2585;
              this.match(SqlBaseParser.END);
            }
            break;

          case 3:
            {
              _localctx = new SimpleCaseContext(_localctx);
              this._ctx = _localctx;
              _prevctx = _localctx;
              this.state = 2587;
              this.match(SqlBaseParser.CASE);
              this.state = 2588;
              (_localctx as SimpleCaseContext)._value = this.expression();
              this.state = 2590;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              do {
                {
                  {
                    this.state = 2589;
                    this.whenClause();
                  }
                }
                this.state = 2592;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
              } while (_la === SqlBaseParser.WHEN);
              this.state = 2596;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === SqlBaseParser.ELSE) {
                {
                  this.state = 2594;
                  this.match(SqlBaseParser.ELSE);
                  this.state = 2595;
                  (_localctx as SimpleCaseContext)._elseExpression = this.expression();
                }
              }

              this.state = 2598;
              this.match(SqlBaseParser.END);
            }
            break;

          case 4:
            {
              _localctx = new CastContext(_localctx);
              this._ctx = _localctx;
              _prevctx = _localctx;
              this.state = 2600;
              (_localctx as CastContext)._name = this._input.LT(1);
              _la = this._input.LA(1);
              if (!(_la === SqlBaseParser.CAST || _la === SqlBaseParser.TRY_CAST)) {
                (_localctx as CastContext)._name = this._errHandler.recoverInline(this);
              } else {
                if (this._input.LA(1) === Token.EOF) {
                  this.matchedEOF = true;
                }

                this._errHandler.reportMatch(this);
                this.consume();
              }
              this.state = 2601;
              this.match(SqlBaseParser.T__1);
              this.state = 2602;
              this.expression();
              this.state = 2603;
              this.match(SqlBaseParser.AS);
              this.state = 2604;
              this.dataType();
              this.state = 2605;
              this.match(SqlBaseParser.T__2);
            }
            break;

          case 5:
            {
              _localctx = new StructContext(_localctx);
              this._ctx = _localctx;
              _prevctx = _localctx;
              this.state = 2607;
              this.match(SqlBaseParser.STRUCT);
              this.state = 2608;
              this.match(SqlBaseParser.T__1);
              this.state = 2617;
              this._errHandler.sync(this);
              switch (this.interpreter.adaptivePredict(this._input, 341, this._ctx)) {
                case 1:
                  {
                    this.state = 2609;
                    (_localctx as StructContext)._namedExpression = this.namedExpression();
                    (_localctx as StructContext)._argument.push((_localctx as StructContext)._namedExpression);
                    this.state = 2614;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === SqlBaseParser.T__3) {
                      {
                        {
                          this.state = 2610;
                          this.match(SqlBaseParser.T__3);
                          this.state = 2611;
                          (_localctx as StructContext)._namedExpression = this.namedExpression();
                          (_localctx as StructContext)._argument.push((_localctx as StructContext)._namedExpression);
                        }
                      }
                      this.state = 2616;
                      this._errHandler.sync(this);
                      _la = this._input.LA(1);
                    }
                  }
                  break;
              }
              this.state = 2619;
              this.match(SqlBaseParser.T__2);
            }
            break;

          case 6:
            {
              _localctx = new FirstContext(_localctx);
              this._ctx = _localctx;
              _prevctx = _localctx;
              this.state = 2620;
              this.match(SqlBaseParser.FIRST);
              this.state = 2621;
              this.match(SqlBaseParser.T__1);
              this.state = 2622;
              this.expression();
              this.state = 2625;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === SqlBaseParser.IGNORE) {
                {
                  this.state = 2623;
                  this.match(SqlBaseParser.IGNORE);
                  this.state = 2624;
                  this.match(SqlBaseParser.NULLS);
                }
              }

              this.state = 2627;
              this.match(SqlBaseParser.T__2);
            }
            break;

          case 7:
            {
              _localctx = new LastContext(_localctx);
              this._ctx = _localctx;
              _prevctx = _localctx;
              this.state = 2629;
              this.match(SqlBaseParser.LAST);
              this.state = 2630;
              this.match(SqlBaseParser.T__1);
              this.state = 2631;
              this.expression();
              this.state = 2634;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === SqlBaseParser.IGNORE) {
                {
                  this.state = 2632;
                  this.match(SqlBaseParser.IGNORE);
                  this.state = 2633;
                  this.match(SqlBaseParser.NULLS);
                }
              }

              this.state = 2636;
              this.match(SqlBaseParser.T__2);
            }
            break;

          case 8:
            {
              _localctx = new PositionContext(_localctx);
              this._ctx = _localctx;
              _prevctx = _localctx;
              this.state = 2638;
              this.match(SqlBaseParser.POSITION);
              this.state = 2639;
              this.match(SqlBaseParser.T__1);
              this.state = 2640;
              (_localctx as PositionContext)._substr = this.valueExpression(0);
              this.state = 2641;
              this.match(SqlBaseParser.IN);
              this.state = 2642;
              (_localctx as PositionContext)._str = this.valueExpression(0);
              this.state = 2643;
              this.match(SqlBaseParser.T__2);
            }
            break;

          case 9:
            {
              _localctx = new ConstantDefaultContext(_localctx);
              this._ctx = _localctx;
              _prevctx = _localctx;
              this.state = 2645;
              this.constant();
            }
            break;

          case 10:
            {
              _localctx = new StarContext(_localctx);
              this._ctx = _localctx;
              _prevctx = _localctx;
              this.state = 2646;
              this.match(SqlBaseParser.ASTERISK);
            }
            break;

          case 11:
            {
              _localctx = new StarContext(_localctx);
              this._ctx = _localctx;
              _prevctx = _localctx;
              this.state = 2647;
              this.qualifiedName();
              this.state = 2648;
              this.match(SqlBaseParser.T__4);
              this.state = 2649;
              this.match(SqlBaseParser.ASTERISK);
            }
            break;

          case 12:
            {
              _localctx = new RowConstructorContext(_localctx);
              this._ctx = _localctx;
              _prevctx = _localctx;
              this.state = 2651;
              this.match(SqlBaseParser.T__1);
              this.state = 2652;
              this.namedExpression();
              this.state = 2655;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              do {
                {
                  {
                    this.state = 2653;
                    this.match(SqlBaseParser.T__3);
                    this.state = 2654;
                    this.namedExpression();
                  }
                }
                this.state = 2657;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
              } while (_la === SqlBaseParser.T__3);
              this.state = 2659;
              this.match(SqlBaseParser.T__2);
            }
            break;

          case 13:
            {
              _localctx = new SubqueryExpressionContext(_localctx);
              this._ctx = _localctx;
              _prevctx = _localctx;
              this.state = 2661;
              this.match(SqlBaseParser.T__1);
              this.state = 2662;
              this.query();
              this.state = 2663;
              this.match(SqlBaseParser.T__2);
            }
            break;

          case 14:
            {
              _localctx = new FunctionCallContext(_localctx);
              this._ctx = _localctx;
              _prevctx = _localctx;
              this.state = 2665;
              this.functionName();
              this.state = 2666;
              this.match(SqlBaseParser.T__1);
              this.state = 2678;
              this._errHandler.sync(this);
              switch (this.interpreter.adaptivePredict(this._input, 347, this._ctx)) {
                case 1:
                  {
                    this.state = 2668;
                    this._errHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this._input, 345, this._ctx)) {
                      case 1:
                        {
                          this.state = 2667;
                          this.setQuantifier();
                        }
                        break;
                    }
                    this.state = 2670;
                    (_localctx as FunctionCallContext)._expression = this.expression();
                    (_localctx as FunctionCallContext)._argument.push((_localctx as FunctionCallContext)._expression);
                    this.state = 2675;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === SqlBaseParser.T__3) {
                      {
                        {
                          this.state = 2671;
                          this.match(SqlBaseParser.T__3);
                          this.state = 2672;
                          (_localctx as FunctionCallContext)._expression = this.expression();
                          (_localctx as FunctionCallContext)._argument.push(
                            (_localctx as FunctionCallContext)._expression
                          );
                        }
                      }
                      this.state = 2677;
                      this._errHandler.sync(this);
                      _la = this._input.LA(1);
                    }
                  }
                  break;
              }
              this.state = 2680;
              this.match(SqlBaseParser.T__2);
              this.state = 2687;
              this._errHandler.sync(this);
              switch (this.interpreter.adaptivePredict(this._input, 348, this._ctx)) {
                case 1:
                  {
                    this.state = 2681;
                    this.match(SqlBaseParser.FILTER);
                    this.state = 2682;
                    this.match(SqlBaseParser.T__1);
                    this.state = 2683;
                    this.match(SqlBaseParser.WHERE);
                    this.state = 2684;
                    (_localctx as FunctionCallContext)._where = this.booleanExpression(0);
                    this.state = 2685;
                    this.match(SqlBaseParser.T__2);
                  }
                  break;
              }
              this.state = 2691;
              this._errHandler.sync(this);
              switch (this.interpreter.adaptivePredict(this._input, 349, this._ctx)) {
                case 1:
                  {
                    this.state = 2689;
                    (_localctx as FunctionCallContext)._nullsOption = this._input.LT(1);
                    _la = this._input.LA(1);
                    if (!(_la === SqlBaseParser.IGNORE || _la === SqlBaseParser.RESPECT)) {
                      (_localctx as FunctionCallContext)._nullsOption = this._errHandler.recoverInline(this);
                    } else {
                      if (this._input.LA(1) === Token.EOF) {
                        this.matchedEOF = true;
                      }

                      this._errHandler.reportMatch(this);
                      this.consume();
                    }
                    this.state = 2690;
                    this.match(SqlBaseParser.NULLS);
                  }
                  break;
              }
              this.state = 2695;
              this._errHandler.sync(this);
              switch (this.interpreter.adaptivePredict(this._input, 350, this._ctx)) {
                case 1:
                  {
                    this.state = 2693;
                    this.match(SqlBaseParser.OVER);
                    this.state = 2694;
                    this.windowSpec();
                  }
                  break;
              }
            }
            break;

          case 15:
            {
              _localctx = new LambdaContext(_localctx);
              this._ctx = _localctx;
              _prevctx = _localctx;
              this.state = 2697;
              this.identifier();
              this.state = 2698;
              this.match(SqlBaseParser.T__7);
              this.state = 2699;
              this.expression();
            }
            break;

          case 16:
            {
              _localctx = new LambdaContext(_localctx);
              this._ctx = _localctx;
              _prevctx = _localctx;
              this.state = 2701;
              this.match(SqlBaseParser.T__1);
              this.state = 2702;
              this.identifier();
              this.state = 2705;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              do {
                {
                  {
                    this.state = 2703;
                    this.match(SqlBaseParser.T__3);
                    this.state = 2704;
                    this.identifier();
                  }
                }
                this.state = 2707;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
              } while (_la === SqlBaseParser.T__3);
              this.state = 2709;
              this.match(SqlBaseParser.T__2);
              this.state = 2710;
              this.match(SqlBaseParser.T__7);
              this.state = 2711;
              this.expression();
            }
            break;

          case 17:
            {
              _localctx = new ColumnReferenceContext(_localctx);
              this._ctx = _localctx;
              _prevctx = _localctx;
              this.state = 2713;
              this.identifier();
            }
            break;

          case 18:
            {
              _localctx = new ParenthesizedExpressionContext(_localctx);
              this._ctx = _localctx;
              _prevctx = _localctx;
              this.state = 2714;
              this.match(SqlBaseParser.T__1);
              this.state = 2715;
              this.expression();
              this.state = 2716;
              this.match(SqlBaseParser.T__2);
            }
            break;

          case 19:
            {
              _localctx = new ExtractContext(_localctx);
              this._ctx = _localctx;
              _prevctx = _localctx;
              this.state = 2718;
              this.match(SqlBaseParser.EXTRACT);
              this.state = 2719;
              this.match(SqlBaseParser.T__1);
              this.state = 2720;
              (_localctx as ExtractContext)._field = this.identifier();
              this.state = 2721;
              this.match(SqlBaseParser.FROM);
              this.state = 2722;
              (_localctx as ExtractContext)._source = this.valueExpression(0);
              this.state = 2723;
              this.match(SqlBaseParser.T__2);
            }
            break;

          case 20:
            {
              _localctx = new SubstringContext(_localctx);
              this._ctx = _localctx;
              _prevctx = _localctx;
              this.state = 2725;
              _la = this._input.LA(1);
              if (!(_la === SqlBaseParser.SUBSTR || _la === SqlBaseParser.SUBSTRING)) {
                this._errHandler.recoverInline(this);
              } else {
                if (this._input.LA(1) === Token.EOF) {
                  this.matchedEOF = true;
                }

                this._errHandler.reportMatch(this);
                this.consume();
              }
              this.state = 2726;
              this.match(SqlBaseParser.T__1);
              this.state = 2727;
              (_localctx as SubstringContext)._str = this.valueExpression(0);
              this.state = 2728;
              _la = this._input.LA(1);
              if (!(_la === SqlBaseParser.T__3 || _la === SqlBaseParser.FROM)) {
                this._errHandler.recoverInline(this);
              } else {
                if (this._input.LA(1) === Token.EOF) {
                  this.matchedEOF = true;
                }

                this._errHandler.reportMatch(this);
                this.consume();
              }
              this.state = 2729;
              (_localctx as SubstringContext)._pos = this.valueExpression(0);
              this.state = 2732;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === SqlBaseParser.T__3 || _la === SqlBaseParser.FOR) {
                {
                  this.state = 2730;
                  _la = this._input.LA(1);
                  if (!(_la === SqlBaseParser.T__3 || _la === SqlBaseParser.FOR)) {
                    this._errHandler.recoverInline(this);
                  } else {
                    if (this._input.LA(1) === Token.EOF) {
                      this.matchedEOF = true;
                    }

                    this._errHandler.reportMatch(this);
                    this.consume();
                  }
                  this.state = 2731;
                  (_localctx as SubstringContext)._len = this.valueExpression(0);
                }
              }

              this.state = 2734;
              this.match(SqlBaseParser.T__2);
            }
            break;

          case 21:
            {
              _localctx = new TrimContext(_localctx);
              this._ctx = _localctx;
              _prevctx = _localctx;
              this.state = 2736;
              this.match(SqlBaseParser.TRIM);
              this.state = 2737;
              this.match(SqlBaseParser.T__1);
              this.state = 2739;
              this._errHandler.sync(this);
              switch (this.interpreter.adaptivePredict(this._input, 353, this._ctx)) {
                case 1:
                  {
                    this.state = 2738;
                    (_localctx as TrimContext)._trimOption = this._input.LT(1);
                    _la = this._input.LA(1);
                    if (
                      !(_la === SqlBaseParser.BOTH || _la === SqlBaseParser.LEADING || _la === SqlBaseParser.TRAILING)
                    ) {
                      (_localctx as TrimContext)._trimOption = this._errHandler.recoverInline(this);
                    } else {
                      if (this._input.LA(1) === Token.EOF) {
                        this.matchedEOF = true;
                      }

                      this._errHandler.reportMatch(this);
                      this.consume();
                    }
                  }
                  break;
              }
              this.state = 2742;
              this._errHandler.sync(this);
              switch (this.interpreter.adaptivePredict(this._input, 354, this._ctx)) {
                case 1:
                  {
                    this.state = 2741;
                    (_localctx as TrimContext)._trimStr = this.valueExpression(0);
                  }
                  break;
              }
              this.state = 2744;
              this.match(SqlBaseParser.FROM);
              this.state = 2745;
              (_localctx as TrimContext)._srcStr = this.valueExpression(0);
              this.state = 2746;
              this.match(SqlBaseParser.T__2);
            }
            break;

          case 22:
            {
              _localctx = new OverlayContext(_localctx);
              this._ctx = _localctx;
              _prevctx = _localctx;
              this.state = 2748;
              this.match(SqlBaseParser.OVERLAY);
              this.state = 2749;
              this.match(SqlBaseParser.T__1);
              this.state = 2750;
              (_localctx as OverlayContext)._input = this.valueExpression(0);
              this.state = 2751;
              this.match(SqlBaseParser.PLACING);
              this.state = 2752;
              (_localctx as OverlayContext)._replace = this.valueExpression(0);
              this.state = 2753;
              this.match(SqlBaseParser.FROM);
              this.state = 2754;
              (_localctx as OverlayContext)._position = this.valueExpression(0);
              this.state = 2757;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === SqlBaseParser.FOR) {
                {
                  this.state = 2755;
                  this.match(SqlBaseParser.FOR);
                  this.state = 2756;
                  (_localctx as OverlayContext)._length = this.valueExpression(0);
                }
              }

              this.state = 2759;
              this.match(SqlBaseParser.T__2);
            }
            break;
        }
        this._ctx._stop = this._input.tryLT(-1);
        this.state = 2776;
        this._errHandler.sync(this);
        _alt = this.interpreter.adaptivePredict(this._input, 358, this._ctx);
        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            if (this._parseListeners != null) {
              this.triggerExitRuleEvent();
            }
            _prevctx = _localctx;
            {
              this.state = 2774;
              this._errHandler.sync(this);
              switch (this.interpreter.adaptivePredict(this._input, 357, this._ctx)) {
                case 1:
                  {
                    _localctx = new SubscriptContext(new PrimaryExpressionContext(_parentctx, _parentState));
                    (_localctx as SubscriptContext)._value = _prevctx;
                    this.pushNewRecursionContext(_localctx, _startState, SqlBaseParser.RULE_primaryExpression);
                    this.state = 2763;
                    if (!this.precpred(this._ctx, 9)) {
                      throw this.createFailedPredicateException("this.precpred(this._ctx, 9)");
                    }
                    this.state = 2764;
                    this.match(SqlBaseParser.T__8);
                    this.state = 2765;
                    (_localctx as SubscriptContext)._index = this.valueExpression(0);
                    this.state = 2766;
                    this.match(SqlBaseParser.T__9);
                  }
                  break;

                case 2:
                  {
                    _localctx = new DereferenceContext(new PrimaryExpressionContext(_parentctx, _parentState));
                    (_localctx as DereferenceContext)._base = _prevctx;
                    this.pushNewRecursionContext(_localctx, _startState, SqlBaseParser.RULE_primaryExpression);
                    this.state = 2768;
                    if (!this.precpred(this._ctx, 7)) {
                      throw this.createFailedPredicateException("this.precpred(this._ctx, 7)");
                    }
                    this.state = 2769;
                    this.match(SqlBaseParser.T__4);
                    this.state = 2770;
                    (_localctx as DereferenceContext)._fieldName = this.identifier();
                  }
                  break;

                case 3:
                  {
                    _localctx = new PostgresCastContext(new PrimaryExpressionContext(_parentctx, _parentState));
                    (_localctx as PostgresCastContext)._value = _prevctx;
                    this.pushNewRecursionContext(_localctx, _startState, SqlBaseParser.RULE_primaryExpression);
                    this.state = 2771;
                    if (!this.precpred(this._ctx, 6)) {
                      throw this.createFailedPredicateException("this.precpred(this._ctx, 6)");
                    }
                    this.state = 2772;
                    this.match(SqlBaseParser.DOUBLE_COLON);
                    this.state = 2773;
                    this.dataType();
                  }
                  break;
              }
            }
          }
          this.state = 2778;
          this._errHandler.sync(this);
          _alt = this.interpreter.adaptivePredict(this._input, 358, this._ctx);
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.unrollRecursionContexts(_parentctx);
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public constant(): ConstantContext {
    let _localctx: ConstantContext = new ConstantContext(this._ctx, this.state);
    this.enterRule(_localctx, 210, SqlBaseParser.RULE_constant);
    try {
      let _alt: number;
      this.state = 2791;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 360, this._ctx)) {
        case 1:
          _localctx = new NullLiteralContext(_localctx);
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 2779;
            this.match(SqlBaseParser.NULL);
          }
          break;

        case 2:
          _localctx = new IntervalLiteralContext(_localctx);
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 2780;
            this.interval();
          }
          break;

        case 3:
          _localctx = new TypeConstructorContext(_localctx);
          this.enterOuterAlt(_localctx, 3);
          {
            this.state = 2781;
            this.identifier();
            this.state = 2782;
            this.match(SqlBaseParser.STRING);
          }
          break;

        case 4:
          _localctx = new NumericLiteralContext(_localctx);
          this.enterOuterAlt(_localctx, 4);
          {
            this.state = 2784;
            this.number();
          }
          break;

        case 5:
          _localctx = new BooleanLiteralContext(_localctx);
          this.enterOuterAlt(_localctx, 5);
          {
            this.state = 2785;
            this.booleanValue();
          }
          break;

        case 6:
          _localctx = new StringLiteralContext(_localctx);
          this.enterOuterAlt(_localctx, 6);
          {
            this.state = 2787;
            this._errHandler.sync(this);
            _alt = 1;
            do {
              switch (_alt) {
                case 1:
                  {
                    {
                      this.state = 2786;
                      this.match(SqlBaseParser.STRING);
                    }
                  }
                  break;
                default:
                  throw new NoViableAltException(this);
              }
              this.state = 2789;
              this._errHandler.sync(this);
              _alt = this.interpreter.adaptivePredict(this._input, 359, this._ctx);
            } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
          }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public comparisonOperator(): ComparisonOperatorContext {
    const _localctx: ComparisonOperatorContext = new ComparisonOperatorContext(this._ctx, this.state);
    this.enterRule(_localctx, 212, SqlBaseParser.RULE_comparisonOperator);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2793;
        _la = this._input.LA(1);
        if (
          !(
            ((_la - 270) & ~0x1f) === 0 &&
            ((1 << (_la - 270)) &
              ((1 << (SqlBaseParser.EQ - 270)) |
                (1 << (SqlBaseParser.NSEQ - 270)) |
                (1 << (SqlBaseParser.NEQ - 270)) |
                (1 << (SqlBaseParser.NEQJ - 270)) |
                (1 << (SqlBaseParser.LT - 270)) |
                (1 << (SqlBaseParser.LTE - 270)) |
                (1 << (SqlBaseParser.GT - 270)) |
                (1 << (SqlBaseParser.GTE - 270)))) !==
              0
          )
        ) {
          this._errHandler.recoverInline(this);
        } else {
          if (this._input.LA(1) === Token.EOF) {
            this.matchedEOF = true;
          }

          this._errHandler.reportMatch(this);
          this.consume();
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public arithmeticOperator(): ArithmeticOperatorContext {
    const _localctx: ArithmeticOperatorContext = new ArithmeticOperatorContext(this._ctx, this.state);
    this.enterRule(_localctx, 214, SqlBaseParser.RULE_arithmeticOperator);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2795;
        _la = this._input.LA(1);
        if (
          !(
            _la === SqlBaseParser.DIV ||
            (((_la - 278) & ~0x1f) === 0 &&
              ((1 << (_la - 278)) &
                ((1 << (SqlBaseParser.PLUS - 278)) |
                  (1 << (SqlBaseParser.MINUS - 278)) |
                  (1 << (SqlBaseParser.ASTERISK - 278)) |
                  (1 << (SqlBaseParser.SLASH - 278)) |
                  (1 << (SqlBaseParser.PERCENT - 278)) |
                  (1 << (SqlBaseParser.TILDE - 278)) |
                  (1 << (SqlBaseParser.AMPERSAND - 278)) |
                  (1 << (SqlBaseParser.PIPE - 278)) |
                  (1 << (SqlBaseParser.CONCAT_PIPE - 278)) |
                  (1 << (SqlBaseParser.HAT - 278)))) !==
                0)
          )
        ) {
          this._errHandler.recoverInline(this);
        } else {
          if (this._input.LA(1) === Token.EOF) {
            this.matchedEOF = true;
          }

          this._errHandler.reportMatch(this);
          this.consume();
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public predicateOperator(): PredicateOperatorContext {
    const _localctx: PredicateOperatorContext = new PredicateOperatorContext(this._ctx, this.state);
    this.enterRule(_localctx, 216, SqlBaseParser.RULE_predicateOperator);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2797;
        _la = this._input.LA(1);
        if (
          !(
            _la === SqlBaseParser.AND ||
            _la === SqlBaseParser.IN ||
            _la === SqlBaseParser.NOT ||
            _la === SqlBaseParser.OR
          )
        ) {
          this._errHandler.recoverInline(this);
        } else {
          if (this._input.LA(1) === Token.EOF) {
            this.matchedEOF = true;
          }

          this._errHandler.reportMatch(this);
          this.consume();
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public booleanValue(): BooleanValueContext {
    const _localctx: BooleanValueContext = new BooleanValueContext(this._ctx, this.state);
    this.enterRule(_localctx, 218, SqlBaseParser.RULE_booleanValue);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2799;
        _la = this._input.LA(1);
        if (!(_la === SqlBaseParser.FALSE || _la === SqlBaseParser.TRUE)) {
          this._errHandler.recoverInline(this);
        } else {
          if (this._input.LA(1) === Token.EOF) {
            this.matchedEOF = true;
          }

          this._errHandler.reportMatch(this);
          this.consume();
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public interval(): IntervalContext {
    const _localctx: IntervalContext = new IntervalContext(this._ctx, this.state);
    this.enterRule(_localctx, 220, SqlBaseParser.RULE_interval);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2801;
        this.match(SqlBaseParser.INTERVAL);
        this.state = 2804;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 361, this._ctx)) {
          case 1:
            {
              this.state = 2802;
              this.errorCapturingMultiUnitsInterval();
            }
            break;

          case 2:
            {
              this.state = 2803;
              this.errorCapturingUnitToUnitInterval();
            }
            break;
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public errorCapturingMultiUnitsInterval(): ErrorCapturingMultiUnitsIntervalContext {
    const _localctx: ErrorCapturingMultiUnitsIntervalContext = new ErrorCapturingMultiUnitsIntervalContext(
      this._ctx,
      this.state
    );
    this.enterRule(_localctx, 222, SqlBaseParser.RULE_errorCapturingMultiUnitsInterval);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2806;
        this.multiUnitsInterval();
        this.state = 2808;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 362, this._ctx)) {
          case 1:
            {
              this.state = 2807;
              this.unitToUnitInterval();
            }
            break;
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public multiUnitsInterval(): MultiUnitsIntervalContext {
    const _localctx: MultiUnitsIntervalContext = new MultiUnitsIntervalContext(this._ctx, this.state);
    this.enterRule(_localctx, 224, SqlBaseParser.RULE_multiUnitsInterval);
    try {
      let _alt: number;
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2813;
        this._errHandler.sync(this);
        _alt = 1;
        do {
          switch (_alt) {
            case 1:
              {
                {
                  this.state = 2810;
                  this.intervalValue();
                  this.state = 2811;
                  _localctx._identifier = this.identifier();
                  _localctx._unit.push(_localctx._identifier);
                }
              }
              break;
            default:
              throw new NoViableAltException(this);
          }
          this.state = 2815;
          this._errHandler.sync(this);
          _alt = this.interpreter.adaptivePredict(this._input, 363, this._ctx);
        } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public errorCapturingUnitToUnitInterval(): ErrorCapturingUnitToUnitIntervalContext {
    const _localctx: ErrorCapturingUnitToUnitIntervalContext = new ErrorCapturingUnitToUnitIntervalContext(
      this._ctx,
      this.state
    );
    this.enterRule(_localctx, 226, SqlBaseParser.RULE_errorCapturingUnitToUnitInterval);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2817;
        _localctx._body = this.unitToUnitInterval();
        this.state = 2820;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 364, this._ctx)) {
          case 1:
            {
              this.state = 2818;
              _localctx._error1 = this.multiUnitsInterval();
            }
            break;

          case 2:
            {
              this.state = 2819;
              _localctx._error2 = this.unitToUnitInterval();
            }
            break;
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public unitToUnitInterval(): UnitToUnitIntervalContext {
    const _localctx: UnitToUnitIntervalContext = new UnitToUnitIntervalContext(this._ctx, this.state);
    this.enterRule(_localctx, 228, SqlBaseParser.RULE_unitToUnitInterval);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2822;
        _localctx._value = this.intervalValue();
        this.state = 2823;
        _localctx._from = this.identifier();
        this.state = 2824;
        this.match(SqlBaseParser.TO);
        this.state = 2825;
        _localctx._to = this.identifier();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public intervalValue(): IntervalValueContext {
    const _localctx: IntervalValueContext = new IntervalValueContext(this._ctx, this.state);
    this.enterRule(_localctx, 230, SqlBaseParser.RULE_intervalValue);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2828;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === SqlBaseParser.PLUS || _la === SqlBaseParser.MINUS) {
          {
            this.state = 2827;
            _la = this._input.LA(1);
            if (!(_la === SqlBaseParser.PLUS || _la === SqlBaseParser.MINUS)) {
              this._errHandler.recoverInline(this);
            } else {
              if (this._input.LA(1) === Token.EOF) {
                this.matchedEOF = true;
              }

              this._errHandler.reportMatch(this);
              this.consume();
            }
          }
        }

        this.state = 2830;
        _la = this._input.LA(1);
        if (
          !(
            ((_la - 289) & ~0x1f) === 0 &&
            ((1 << (_la - 289)) &
              ((1 << (SqlBaseParser.STRING - 289)) |
                (1 << (SqlBaseParser.INTEGER_VALUE - 289)) |
                (1 << (SqlBaseParser.DECIMAL_VALUE - 289)))) !==
              0
          )
        ) {
          this._errHandler.recoverInline(this);
        } else {
          if (this._input.LA(1) === Token.EOF) {
            this.matchedEOF = true;
          }

          this._errHandler.reportMatch(this);
          this.consume();
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public colPosition(): ColPositionContext {
    const _localctx: ColPositionContext = new ColPositionContext(this._ctx, this.state);
    this.enterRule(_localctx, 232, SqlBaseParser.RULE_colPosition);
    try {
      this.state = 2835;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case SqlBaseParser.FIRST:
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 2832;
            _localctx._position = this.match(SqlBaseParser.FIRST);
          }
          break;
        case SqlBaseParser.AFTER:
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 2833;
            _localctx._position = this.match(SqlBaseParser.AFTER);
            this.state = 2834;
            _localctx._afterCol = this.errorCapturingIdentifier();
          }
          break;
        default:
          throw new NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public dataType(): DataTypeContext {
    let _localctx: DataTypeContext = new DataTypeContext(this._ctx, this.state);
    this.enterRule(_localctx, 234, SqlBaseParser.RULE_dataType);
    let _la: number;
    try {
      this.state = 2883;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 373, this._ctx)) {
        case 1:
          _localctx = new ComplexDataTypeContext(_localctx);
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 2837;
            (_localctx as ComplexDataTypeContext)._complex = this.match(SqlBaseParser.ARRAY);
            this.state = 2838;
            this.match(SqlBaseParser.LT);
            this.state = 2839;
            this.dataType();
            this.state = 2840;
            this.match(SqlBaseParser.GT);
          }
          break;

        case 2:
          _localctx = new ComplexDataTypeContext(_localctx);
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 2842;
            (_localctx as ComplexDataTypeContext)._complex = this.match(SqlBaseParser.MAP);
            this.state = 2843;
            this.match(SqlBaseParser.LT);
            this.state = 2844;
            this.dataType();
            this.state = 2845;
            this.match(SqlBaseParser.T__3);
            this.state = 2846;
            this.dataType();
            this.state = 2847;
            this.match(SqlBaseParser.GT);
          }
          break;

        case 3:
          _localctx = new ComplexDataTypeContext(_localctx);
          this.enterOuterAlt(_localctx, 3);
          {
            this.state = 2849;
            (_localctx as ComplexDataTypeContext)._complex = this.match(SqlBaseParser.STRUCT);
            this.state = 2856;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
              case SqlBaseParser.LT:
                {
                  this.state = 2850;
                  this.match(SqlBaseParser.LT);
                  this.state = 2852;
                  this._errHandler.sync(this);
                  switch (this.interpreter.adaptivePredict(this._input, 367, this._ctx)) {
                    case 1:
                      {
                        this.state = 2851;
                        this.complexColTypeList();
                      }
                      break;
                  }
                  this.state = 2854;
                  this.match(SqlBaseParser.GT);
                }
                break;
              case SqlBaseParser.NEQ:
                {
                  this.state = 2855;
                  this.match(SqlBaseParser.NEQ);
                }
                break;
              default:
                throw new NoViableAltException(this);
            }
          }
          break;

        case 4:
          _localctx = new YearMonthIntervalDataTypeContext(_localctx);
          this.enterOuterAlt(_localctx, 4);
          {
            this.state = 2858;
            this.match(SqlBaseParser.INTERVAL);
            this.state = 2859;
            (_localctx as YearMonthIntervalDataTypeContext)._from = this._input.LT(1);
            _la = this._input.LA(1);
            if (!(_la === SqlBaseParser.MONTH || _la === SqlBaseParser.YEAR)) {
              (_localctx as YearMonthIntervalDataTypeContext)._from = this._errHandler.recoverInline(this);
            } else {
              if (this._input.LA(1) === Token.EOF) {
                this.matchedEOF = true;
              }

              this._errHandler.reportMatch(this);
              this.consume();
            }
            this.state = 2862;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 369, this._ctx)) {
              case 1:
                {
                  this.state = 2860;
                  this.match(SqlBaseParser.TO);
                  this.state = 2861;
                  (_localctx as YearMonthIntervalDataTypeContext)._to = this.match(SqlBaseParser.MONTH);
                }
                break;
            }
          }
          break;

        case 5:
          _localctx = new DayTimeIntervalDataTypeContext(_localctx);
          this.enterOuterAlt(_localctx, 5);
          {
            this.state = 2864;
            this.match(SqlBaseParser.INTERVAL);
            this.state = 2865;
            (_localctx as DayTimeIntervalDataTypeContext)._from = this._input.LT(1);
            _la = this._input.LA(1);
            if (
              !(
                _la === SqlBaseParser.DAY ||
                _la === SqlBaseParser.HOUR ||
                _la === SqlBaseParser.MINUTE ||
                _la === SqlBaseParser.SECOND
              )
            ) {
              (_localctx as DayTimeIntervalDataTypeContext)._from = this._errHandler.recoverInline(this);
            } else {
              if (this._input.LA(1) === Token.EOF) {
                this.matchedEOF = true;
              }

              this._errHandler.reportMatch(this);
              this.consume();
            }
            this.state = 2868;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 370, this._ctx)) {
              case 1:
                {
                  this.state = 2866;
                  this.match(SqlBaseParser.TO);
                  this.state = 2867;
                  (_localctx as DayTimeIntervalDataTypeContext)._to = this._input.LT(1);
                  _la = this._input.LA(1);
                  if (!(_la === SqlBaseParser.HOUR || _la === SqlBaseParser.MINUTE || _la === SqlBaseParser.SECOND)) {
                    (_localctx as DayTimeIntervalDataTypeContext)._to = this._errHandler.recoverInline(this);
                  } else {
                    if (this._input.LA(1) === Token.EOF) {
                      this.matchedEOF = true;
                    }

                    this._errHandler.reportMatch(this);
                    this.consume();
                  }
                }
                break;
            }
          }
          break;

        case 6:
          _localctx = new PrimitiveDataTypeContext(_localctx);
          this.enterOuterAlt(_localctx, 6);
          {
            this.state = 2870;
            this.identifier();
            this.state = 2881;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 372, this._ctx)) {
              case 1:
                {
                  this.state = 2871;
                  this.match(SqlBaseParser.T__1);
                  this.state = 2872;
                  this.match(SqlBaseParser.INTEGER_VALUE);
                  this.state = 2877;
                  this._errHandler.sync(this);
                  _la = this._input.LA(1);
                  while (_la === SqlBaseParser.T__3) {
                    {
                      {
                        this.state = 2873;
                        this.match(SqlBaseParser.T__3);
                        this.state = 2874;
                        this.match(SqlBaseParser.INTEGER_VALUE);
                      }
                    }
                    this.state = 2879;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                  }
                  this.state = 2880;
                  this.match(SqlBaseParser.T__2);
                }
                break;
            }
          }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public qualifiedColTypeWithPositionList(): QualifiedColTypeWithPositionListContext {
    const _localctx: QualifiedColTypeWithPositionListContext = new QualifiedColTypeWithPositionListContext(
      this._ctx,
      this.state
    );
    this.enterRule(_localctx, 236, SqlBaseParser.RULE_qualifiedColTypeWithPositionList);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2885;
        this.qualifiedColTypeWithPosition();
        this.state = 2890;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === SqlBaseParser.T__3) {
          {
            {
              this.state = 2886;
              this.match(SqlBaseParser.T__3);
              this.state = 2887;
              this.qualifiedColTypeWithPosition();
            }
          }
          this.state = 2892;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public qualifiedColTypeWithPosition(): QualifiedColTypeWithPositionContext {
    const _localctx: QualifiedColTypeWithPositionContext = new QualifiedColTypeWithPositionContext(
      this._ctx,
      this.state
    );
    this.enterRule(_localctx, 238, SqlBaseParser.RULE_qualifiedColTypeWithPosition);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2893;
        _localctx._name = this.multipartIdentifier();
        this.state = 2894;
        this.dataType();
        this.state = 2897;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === SqlBaseParser.NOT) {
          {
            this.state = 2895;
            this.match(SqlBaseParser.NOT);
            this.state = 2896;
            this.match(SqlBaseParser.NULL);
          }
        }

        this.state = 2900;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === SqlBaseParser.COMMENT) {
          {
            this.state = 2899;
            this.commentSpec();
          }
        }

        this.state = 2903;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === SqlBaseParser.AFTER || _la === SqlBaseParser.FIRST) {
          {
            this.state = 2902;
            this.colPosition();
          }
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public colTypeList(): ColTypeListContext {
    const _localctx: ColTypeListContext = new ColTypeListContext(this._ctx, this.state);
    this.enterRule(_localctx, 240, SqlBaseParser.RULE_colTypeList);
    try {
      let _alt: number;
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2905;
        this.colType();
        this.state = 2910;
        this._errHandler.sync(this);
        _alt = this.interpreter.adaptivePredict(this._input, 378, this._ctx);
        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            {
              {
                this.state = 2906;
                this.match(SqlBaseParser.T__3);
                this.state = 2907;
                this.colType();
              }
            }
          }
          this.state = 2912;
          this._errHandler.sync(this);
          _alt = this.interpreter.adaptivePredict(this._input, 378, this._ctx);
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public colType(): ColTypeContext {
    const _localctx: ColTypeContext = new ColTypeContext(this._ctx, this.state);
    this.enterRule(_localctx, 242, SqlBaseParser.RULE_colType);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2913;
        _localctx._colName = this.errorCapturingIdentifier();
        this.state = 2914;
        this.dataType();
        this.state = 2917;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 379, this._ctx)) {
          case 1:
            {
              this.state = 2915;
              this.match(SqlBaseParser.NOT);
              this.state = 2916;
              this.match(SqlBaseParser.NULL);
            }
            break;
        }
        this.state = 2920;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 380, this._ctx)) {
          case 1:
            {
              this.state = 2919;
              this.commentSpec();
            }
            break;
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public complexColTypeList(): ComplexColTypeListContext {
    const _localctx: ComplexColTypeListContext = new ComplexColTypeListContext(this._ctx, this.state);
    this.enterRule(_localctx, 244, SqlBaseParser.RULE_complexColTypeList);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2922;
        this.complexColType();
        this.state = 2927;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === SqlBaseParser.T__3) {
          {
            {
              this.state = 2923;
              this.match(SqlBaseParser.T__3);
              this.state = 2924;
              this.complexColType();
            }
          }
          this.state = 2929;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public complexColType(): ComplexColTypeContext {
    const _localctx: ComplexColTypeContext = new ComplexColTypeContext(this._ctx, this.state);
    this.enterRule(_localctx, 246, SqlBaseParser.RULE_complexColType);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2930;
        this.identifier();
        this.state = 2932;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 382, this._ctx)) {
          case 1:
            {
              this.state = 2931;
              this.match(SqlBaseParser.T__10);
            }
            break;
        }
        this.state = 2934;
        this.dataType();
        this.state = 2937;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === SqlBaseParser.NOT) {
          {
            this.state = 2935;
            this.match(SqlBaseParser.NOT);
            this.state = 2936;
            this.match(SqlBaseParser.NULL);
          }
        }

        this.state = 2940;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === SqlBaseParser.COMMENT) {
          {
            this.state = 2939;
            this.commentSpec();
          }
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public whenClause(): WhenClauseContext {
    const _localctx: WhenClauseContext = new WhenClauseContext(this._ctx, this.state);
    this.enterRule(_localctx, 248, SqlBaseParser.RULE_whenClause);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2942;
        this.match(SqlBaseParser.WHEN);
        this.state = 2943;
        _localctx._condition = this.expression();
        this.state = 2944;
        this.match(SqlBaseParser.THEN);
        this.state = 2945;
        _localctx._result = this.expression();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public windowClause(): WindowClauseContext {
    const _localctx: WindowClauseContext = new WindowClauseContext(this._ctx, this.state);
    this.enterRule(_localctx, 250, SqlBaseParser.RULE_windowClause);
    try {
      let _alt: number;
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2947;
        this.match(SqlBaseParser.WINDOW);
        this.state = 2948;
        this.namedWindow();
        this.state = 2953;
        this._errHandler.sync(this);
        _alt = this.interpreter.adaptivePredict(this._input, 385, this._ctx);
        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            {
              {
                this.state = 2949;
                this.match(SqlBaseParser.T__3);
                this.state = 2950;
                this.namedWindow();
              }
            }
          }
          this.state = 2955;
          this._errHandler.sync(this);
          _alt = this.interpreter.adaptivePredict(this._input, 385, this._ctx);
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public namedWindow(): NamedWindowContext {
    const _localctx: NamedWindowContext = new NamedWindowContext(this._ctx, this.state);
    this.enterRule(_localctx, 252, SqlBaseParser.RULE_namedWindow);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2956;
        _localctx._name = this.errorCapturingIdentifier();
        this.state = 2957;
        this.match(SqlBaseParser.AS);
        this.state = 2958;
        this.windowSpec();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public windowSpec(): WindowSpecContext {
    let _localctx: WindowSpecContext = new WindowSpecContext(this._ctx, this.state);
    this.enterRule(_localctx, 254, SqlBaseParser.RULE_windowSpec);
    let _la: number;
    try {
      this.state = 3006;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 393, this._ctx)) {
        case 1:
          _localctx = new WindowRefContext(_localctx);
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 2960;
            (_localctx as WindowRefContext)._name = this.errorCapturingIdentifier();
          }
          break;

        case 2:
          _localctx = new WindowRefContext(_localctx);
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 2961;
            this.match(SqlBaseParser.T__1);
            this.state = 2962;
            (_localctx as WindowRefContext)._name = this.errorCapturingIdentifier();
            this.state = 2963;
            this.match(SqlBaseParser.T__2);
          }
          break;

        case 3:
          _localctx = new WindowDefContext(_localctx);
          this.enterOuterAlt(_localctx, 3);
          {
            this.state = 2965;
            this.match(SqlBaseParser.T__1);
            this.state = 3000;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
              case SqlBaseParser.CLUSTER:
                {
                  this.state = 2966;
                  this.match(SqlBaseParser.CLUSTER);
                  this.state = 2967;
                  this.match(SqlBaseParser.BY);
                  this.state = 2968;
                  (_localctx as WindowDefContext)._expression = this.expression();
                  (_localctx as WindowDefContext)._partition.push((_localctx as WindowDefContext)._expression);
                  this.state = 2973;
                  this._errHandler.sync(this);
                  _la = this._input.LA(1);
                  while (_la === SqlBaseParser.T__3) {
                    {
                      {
                        this.state = 2969;
                        this.match(SqlBaseParser.T__3);
                        this.state = 2970;
                        (_localctx as WindowDefContext)._expression = this.expression();
                        (_localctx as WindowDefContext)._partition.push((_localctx as WindowDefContext)._expression);
                      }
                    }
                    this.state = 2975;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                  }
                }
                break;
              case SqlBaseParser.T__2:
              case SqlBaseParser.DISTRIBUTE:
              case SqlBaseParser.ORDER:
              case SqlBaseParser.PARTITION:
              case SqlBaseParser.RANGE:
              case SqlBaseParser.ROWS:
              case SqlBaseParser.SORT:
                {
                  this.state = 2986;
                  this._errHandler.sync(this);
                  _la = this._input.LA(1);
                  if (_la === SqlBaseParser.DISTRIBUTE || _la === SqlBaseParser.PARTITION) {
                    {
                      this.state = 2976;
                      _la = this._input.LA(1);
                      if (!(_la === SqlBaseParser.DISTRIBUTE || _la === SqlBaseParser.PARTITION)) {
                        this._errHandler.recoverInline(this);
                      } else {
                        if (this._input.LA(1) === Token.EOF) {
                          this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                      }
                      this.state = 2977;
                      this.match(SqlBaseParser.BY);
                      this.state = 2978;
                      (_localctx as WindowDefContext)._expression = this.expression();
                      (_localctx as WindowDefContext)._partition.push((_localctx as WindowDefContext)._expression);
                      this.state = 2983;
                      this._errHandler.sync(this);
                      _la = this._input.LA(1);
                      while (_la === SqlBaseParser.T__3) {
                        {
                          {
                            this.state = 2979;
                            this.match(SqlBaseParser.T__3);
                            this.state = 2980;
                            (_localctx as WindowDefContext)._expression = this.expression();
                            (_localctx as WindowDefContext)._partition.push(
                              (_localctx as WindowDefContext)._expression
                            );
                          }
                        }
                        this.state = 2985;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                      }
                    }
                  }

                  this.state = 2998;
                  this._errHandler.sync(this);
                  _la = this._input.LA(1);
                  if (_la === SqlBaseParser.ORDER || _la === SqlBaseParser.SORT) {
                    {
                      this.state = 2988;
                      _la = this._input.LA(1);
                      if (!(_la === SqlBaseParser.ORDER || _la === SqlBaseParser.SORT)) {
                        this._errHandler.recoverInline(this);
                      } else {
                        if (this._input.LA(1) === Token.EOF) {
                          this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                      }
                      this.state = 2989;
                      this.match(SqlBaseParser.BY);
                      this.state = 2990;
                      this.sortItem();
                      this.state = 2995;
                      this._errHandler.sync(this);
                      _la = this._input.LA(1);
                      while (_la === SqlBaseParser.T__3) {
                        {
                          {
                            this.state = 2991;
                            this.match(SqlBaseParser.T__3);
                            this.state = 2992;
                            this.sortItem();
                          }
                        }
                        this.state = 2997;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                      }
                    }
                  }
                }
                break;
              default:
                throw new NoViableAltException(this);
            }
            this.state = 3003;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.RANGE || _la === SqlBaseParser.ROWS) {
              {
                this.state = 3002;
                this.windowFrame();
              }
            }

            this.state = 3005;
            this.match(SqlBaseParser.T__2);
          }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public windowFrame(): WindowFrameContext {
    const _localctx: WindowFrameContext = new WindowFrameContext(this._ctx, this.state);
    this.enterRule(_localctx, 256, SqlBaseParser.RULE_windowFrame);
    try {
      this.state = 3024;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 394, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 3008;
            _localctx._frameType = this.match(SqlBaseParser.RANGE);
            this.state = 3009;
            _localctx._startBound = this.frameBound();
          }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 3010;
            _localctx._frameType = this.match(SqlBaseParser.ROWS);
            this.state = 3011;
            _localctx._startBound = this.frameBound();
          }
          break;

        case 3:
          this.enterOuterAlt(_localctx, 3);
          {
            this.state = 3012;
            _localctx._frameType = this.match(SqlBaseParser.RANGE);
            this.state = 3013;
            this.match(SqlBaseParser.BETWEEN);
            this.state = 3014;
            _localctx._startBound = this.frameBound();
            this.state = 3015;
            this.match(SqlBaseParser.AND);
            this.state = 3016;
            _localctx._endBound = this.frameBound();
          }
          break;

        case 4:
          this.enterOuterAlt(_localctx, 4);
          {
            this.state = 3018;
            _localctx._frameType = this.match(SqlBaseParser.ROWS);
            this.state = 3019;
            this.match(SqlBaseParser.BETWEEN);
            this.state = 3020;
            _localctx._startBound = this.frameBound();
            this.state = 3021;
            this.match(SqlBaseParser.AND);
            this.state = 3022;
            _localctx._endBound = this.frameBound();
          }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public frameBound(): FrameBoundContext {
    const _localctx: FrameBoundContext = new FrameBoundContext(this._ctx, this.state);
    this.enterRule(_localctx, 258, SqlBaseParser.RULE_frameBound);
    let _la: number;
    try {
      this.state = 3033;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 395, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 3026;
            this.match(SqlBaseParser.UNBOUNDED);
            this.state = 3027;
            _localctx._boundType = this._input.LT(1);
            _la = this._input.LA(1);
            if (!(_la === SqlBaseParser.FOLLOWING || _la === SqlBaseParser.PRECEDING)) {
              _localctx._boundType = this._errHandler.recoverInline(this);
            } else {
              if (this._input.LA(1) === Token.EOF) {
                this.matchedEOF = true;
              }

              this._errHandler.reportMatch(this);
              this.consume();
            }
          }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 3028;
            _localctx._boundType = this.match(SqlBaseParser.CURRENT);
            this.state = 3029;
            this.match(SqlBaseParser.ROW);
          }
          break;

        case 3:
          this.enterOuterAlt(_localctx, 3);
          {
            this.state = 3030;
            this.expression();
            this.state = 3031;
            _localctx._boundType = this._input.LT(1);
            _la = this._input.LA(1);
            if (!(_la === SqlBaseParser.FOLLOWING || _la === SqlBaseParser.PRECEDING)) {
              _localctx._boundType = this._errHandler.recoverInline(this);
            } else {
              if (this._input.LA(1) === Token.EOF) {
                this.matchedEOF = true;
              }

              this._errHandler.reportMatch(this);
              this.consume();
            }
          }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public qualifiedNameList(): QualifiedNameListContext {
    const _localctx: QualifiedNameListContext = new QualifiedNameListContext(this._ctx, this.state);
    this.enterRule(_localctx, 260, SqlBaseParser.RULE_qualifiedNameList);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3035;
        this.qualifiedName();
        this.state = 3040;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === SqlBaseParser.T__3) {
          {
            {
              this.state = 3036;
              this.match(SqlBaseParser.T__3);
              this.state = 3037;
              this.qualifiedName();
            }
          }
          this.state = 3042;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public functionName(): FunctionNameContext {
    const _localctx: FunctionNameContext = new FunctionNameContext(this._ctx, this.state);
    this.enterRule(_localctx, 262, SqlBaseParser.RULE_functionName);
    try {
      this.state = 3047;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 397, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 3043;
            this.qualifiedName();
          }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 3044;
            this.match(SqlBaseParser.FILTER);
          }
          break;

        case 3:
          this.enterOuterAlt(_localctx, 3);
          {
            this.state = 3045;
            this.match(SqlBaseParser.LEFT);
          }
          break;

        case 4:
          this.enterOuterAlt(_localctx, 4);
          {
            this.state = 3046;
            this.match(SqlBaseParser.RIGHT);
          }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public qualifiedName(): QualifiedNameContext {
    const _localctx: QualifiedNameContext = new QualifiedNameContext(this._ctx, this.state);
    this.enterRule(_localctx, 264, SqlBaseParser.RULE_qualifiedName);
    try {
      let _alt: number;
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3049;
        this.identifier();
        this.state = 3054;
        this._errHandler.sync(this);
        _alt = this.interpreter.adaptivePredict(this._input, 398, this._ctx);
        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            {
              {
                this.state = 3050;
                this.match(SqlBaseParser.T__4);
                this.state = 3051;
                this.identifier();
              }
            }
          }
          this.state = 3056;
          this._errHandler.sync(this);
          _alt = this.interpreter.adaptivePredict(this._input, 398, this._ctx);
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public errorCapturingIdentifier(): ErrorCapturingIdentifierContext {
    const _localctx: ErrorCapturingIdentifierContext = new ErrorCapturingIdentifierContext(this._ctx, this.state);
    this.enterRule(_localctx, 266, SqlBaseParser.RULE_errorCapturingIdentifier);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3057;
        this.identifier();
        this.state = 3058;
        this.errorCapturingIdentifierExtra();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public errorCapturingIdentifierExtra(): ErrorCapturingIdentifierExtraContext {
    let _localctx: ErrorCapturingIdentifierExtraContext = new ErrorCapturingIdentifierExtraContext(
      this._ctx,
      this.state
    );
    this.enterRule(_localctx, 268, SqlBaseParser.RULE_errorCapturingIdentifierExtra);
    try {
      let _alt: number;
      this.state = 3067;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 400, this._ctx)) {
        case 1:
          _localctx = new ErrorIdentContext(_localctx);
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 3062;
            this._errHandler.sync(this);
            _alt = 1;
            do {
              switch (_alt) {
                case 1:
                  {
                    {
                      this.state = 3060;
                      this.match(SqlBaseParser.MINUS);
                      this.state = 3061;
                      this.identifier();
                    }
                  }
                  break;
                default:
                  throw new NoViableAltException(this);
              }
              this.state = 3064;
              this._errHandler.sync(this);
              _alt = this.interpreter.adaptivePredict(this._input, 399, this._ctx);
            } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
          }
          break;

        case 2:
          _localctx = new RealIdentContext(_localctx);
          this.enterOuterAlt(_localctx, 2);
          // tslint:disable-next-line:no-empty
          {
          }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public identifier(): IdentifierContext {
    const _localctx: IdentifierContext = new IdentifierContext(this._ctx, this.state);
    this.enterRule(_localctx, 270, SqlBaseParser.RULE_identifier);
    try {
      this.state = 3072;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 401, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 3069;
            this.strictIdentifier();
          }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 3070;
            if (this.SQL_standard_keyword_behavior) {
              throw this.createFailedPredicateException("!this.SQL_standard_keyword_behavior");
            }
            this.state = 3071;
            this.strictNonReserved();
          }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public strictIdentifier(): StrictIdentifierContext {
    let _localctx: StrictIdentifierContext = new StrictIdentifierContext(this._ctx, this.state);
    this.enterRule(_localctx, 272, SqlBaseParser.RULE_strictIdentifier);
    try {
      this.state = 3080;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 402, this._ctx)) {
        case 1:
          _localctx = new UnquotedIdentifierContext(_localctx);
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 3074;
            this.match(SqlBaseParser.IDENTIFIER);
          }
          break;

        case 2:
          _localctx = new QuotedIdentifierAlternativeContext(_localctx);
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 3075;
            this.quotedIdentifier();
          }
          break;

        case 3:
          _localctx = new UnquotedIdentifierContext(_localctx);
          this.enterOuterAlt(_localctx, 3);
          {
            this.state = 3076;
            if (!this.SQL_standard_keyword_behavior) {
              throw this.createFailedPredicateException("this.SQL_standard_keyword_behavior");
            }
            this.state = 3077;
            this.ansiNonReserved();
          }
          break;

        case 4:
          _localctx = new UnquotedIdentifierContext(_localctx);
          this.enterOuterAlt(_localctx, 4);
          {
            this.state = 3078;
            if (this.SQL_standard_keyword_behavior) {
              throw this.createFailedPredicateException("!this.SQL_standard_keyword_behavior");
            }
            this.state = 3079;
            this.nonReserved();
          }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public quotedIdentifier(): QuotedIdentifierContext {
    const _localctx: QuotedIdentifierContext = new QuotedIdentifierContext(this._ctx, this.state);
    this.enterRule(_localctx, 274, SqlBaseParser.RULE_quotedIdentifier);
    try {
      this.state = 3086;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 403, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 3082;
            if (!this.backquoted_identifier) {
              throw this.createFailedPredicateException("this.backquoted_identifier");
            }
            this.state = 3083;
            this.match(SqlBaseParser.BACKQUOTED_IDENTIFIER);
          }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 3084;
            if (!this.doublequoted_identifier) {
              throw this.createFailedPredicateException("this.doublequoted_identifier");
            }
            this.state = 3085;
            this.match(SqlBaseParser.DOUBLEQUOTED_IDENTIFIER);
          }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public number(): NumberContext {
    let _localctx: NumberContext = new NumberContext(this._ctx, this.state);
    this.enterRule(_localctx, 276, SqlBaseParser.RULE_number);
    let _la: number;
    try {
      this.state = 3131;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 414, this._ctx)) {
        case 1:
          _localctx = new ExponentLiteralContext(_localctx);
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 3088;
            if (this.legacy_exponent_literal_as_decimal_enabled) {
              throw this.createFailedPredicateException("!this.legacy_exponent_literal_as_decimal_enabled");
            }
            this.state = 3090;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.MINUS) {
              {
                this.state = 3089;
                this.match(SqlBaseParser.MINUS);
              }
            }

            this.state = 3092;
            this.match(SqlBaseParser.EXPONENT_VALUE);
          }
          break;

        case 2:
          _localctx = new DecimalLiteralContext(_localctx);
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 3093;
            if (this.legacy_exponent_literal_as_decimal_enabled) {
              throw this.createFailedPredicateException("!this.legacy_exponent_literal_as_decimal_enabled");
            }
            this.state = 3095;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.MINUS) {
              {
                this.state = 3094;
                this.match(SqlBaseParser.MINUS);
              }
            }

            this.state = 3097;
            this.match(SqlBaseParser.DECIMAL_VALUE);
          }
          break;

        case 3:
          _localctx = new LegacyDecimalLiteralContext(_localctx);
          this.enterOuterAlt(_localctx, 3);
          {
            this.state = 3098;
            if (!this.legacy_exponent_literal_as_decimal_enabled) {
              throw this.createFailedPredicateException("this.legacy_exponent_literal_as_decimal_enabled");
            }
            this.state = 3100;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.MINUS) {
              {
                this.state = 3099;
                this.match(SqlBaseParser.MINUS);
              }
            }

            this.state = 3102;
            _la = this._input.LA(1);
            if (!(_la === SqlBaseParser.EXPONENT_VALUE || _la === SqlBaseParser.DECIMAL_VALUE)) {
              this._errHandler.recoverInline(this);
            } else {
              if (this._input.LA(1) === Token.EOF) {
                this.matchedEOF = true;
              }

              this._errHandler.reportMatch(this);
              this.consume();
            }
          }
          break;

        case 4:
          _localctx = new IntegerLiteralContext(_localctx);
          this.enterOuterAlt(_localctx, 4);
          {
            this.state = 3104;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.MINUS) {
              {
                this.state = 3103;
                this.match(SqlBaseParser.MINUS);
              }
            }

            this.state = 3106;
            this.match(SqlBaseParser.INTEGER_VALUE);
          }
          break;

        case 5:
          _localctx = new BigIntLiteralContext(_localctx);
          this.enterOuterAlt(_localctx, 5);
          {
            this.state = 3108;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.MINUS) {
              {
                this.state = 3107;
                this.match(SqlBaseParser.MINUS);
              }
            }

            this.state = 3110;
            this.match(SqlBaseParser.BIGINT_LITERAL);
          }
          break;

        case 6:
          _localctx = new SmallIntLiteralContext(_localctx);
          this.enterOuterAlt(_localctx, 6);
          {
            this.state = 3112;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.MINUS) {
              {
                this.state = 3111;
                this.match(SqlBaseParser.MINUS);
              }
            }

            this.state = 3114;
            this.match(SqlBaseParser.SMALLINT_LITERAL);
          }
          break;

        case 7:
          _localctx = new TinyIntLiteralContext(_localctx);
          this.enterOuterAlt(_localctx, 7);
          {
            this.state = 3116;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.MINUS) {
              {
                this.state = 3115;
                this.match(SqlBaseParser.MINUS);
              }
            }

            this.state = 3118;
            this.match(SqlBaseParser.TINYINT_LITERAL);
          }
          break;

        case 8:
          _localctx = new DoubleLiteralContext(_localctx);
          this.enterOuterAlt(_localctx, 8);
          {
            this.state = 3120;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.MINUS) {
              {
                this.state = 3119;
                this.match(SqlBaseParser.MINUS);
              }
            }

            this.state = 3122;
            this.match(SqlBaseParser.DOUBLE_LITERAL);
          }
          break;

        case 9:
          _localctx = new FloatLiteralContext(_localctx);
          this.enterOuterAlt(_localctx, 9);
          {
            this.state = 3124;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.MINUS) {
              {
                this.state = 3123;
                this.match(SqlBaseParser.MINUS);
              }
            }

            this.state = 3126;
            this.match(SqlBaseParser.FLOAT_LITERAL);
          }
          break;

        case 10:
          _localctx = new BigDecimalLiteralContext(_localctx);
          this.enterOuterAlt(_localctx, 10);
          {
            this.state = 3128;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SqlBaseParser.MINUS) {
              {
                this.state = 3127;
                this.match(SqlBaseParser.MINUS);
              }
            }

            this.state = 3130;
            this.match(SqlBaseParser.BIGDECIMAL_LITERAL);
          }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public alterColumnAction(): AlterColumnActionContext {
    const _localctx: AlterColumnActionContext = new AlterColumnActionContext(this._ctx, this.state);
    this.enterRule(_localctx, 278, SqlBaseParser.RULE_alterColumnAction);
    let _la: number;
    try {
      this.state = 3140;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case SqlBaseParser.TYPE:
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 3133;
            this.match(SqlBaseParser.TYPE);
            this.state = 3134;
            this.dataType();
          }
          break;
        case SqlBaseParser.COMMENT:
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 3135;
            this.commentSpec();
          }
          break;
        case SqlBaseParser.AFTER:
        case SqlBaseParser.FIRST:
          this.enterOuterAlt(_localctx, 3);
          {
            this.state = 3136;
            this.colPosition();
          }
          break;
        case SqlBaseParser.DROP:
        case SqlBaseParser.SET:
          this.enterOuterAlt(_localctx, 4);
          {
            this.state = 3137;
            _localctx._setOrDrop = this._input.LT(1);
            _la = this._input.LA(1);
            if (!(_la === SqlBaseParser.DROP || _la === SqlBaseParser.SET)) {
              _localctx._setOrDrop = this._errHandler.recoverInline(this);
            } else {
              if (this._input.LA(1) === Token.EOF) {
                this.matchedEOF = true;
              }

              this._errHandler.reportMatch(this);
              this.consume();
            }
            this.state = 3138;
            this.match(SqlBaseParser.NOT);
            this.state = 3139;
            this.match(SqlBaseParser.NULL);
          }
          break;
        default:
          throw new NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public ansiNonReserved(): AnsiNonReservedContext {
    const _localctx: AnsiNonReservedContext = new AnsiNonReservedContext(this._ctx, this.state);
    this.enterRule(_localctx, 280, SqlBaseParser.RULE_ansiNonReserved);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3142;
        _la = this._input.LA(1);
        if (
          !(
            (((_la - 12) & ~0x1f) === 0 &&
              ((1 << (_la - 12)) &
                ((1 << (SqlBaseParser.ADD - 12)) |
                  (1 << (SqlBaseParser.AFTER - 12)) |
                  (1 << (SqlBaseParser.ALTER - 12)) |
                  (1 << (SqlBaseParser.ANALYZE - 12)) |
                  (1 << (SqlBaseParser.ANTI - 12)) |
                  (1 << (SqlBaseParser.ARCHIVE - 12)) |
                  (1 << (SqlBaseParser.ARRAY - 12)) |
                  (1 << (SqlBaseParser.ASC - 12)) |
                  (1 << (SqlBaseParser.AT - 12)) |
                  (1 << (SqlBaseParser.BETWEEN - 12)) |
                  (1 << (SqlBaseParser.BUCKET - 12)) |
                  (1 << (SqlBaseParser.BUCKETS - 12)) |
                  (1 << (SqlBaseParser.BY - 12)) |
                  (1 << (SqlBaseParser.CACHE - 12)) |
                  (1 << (SqlBaseParser.CASCADE - 12)) |
                  (1 << (SqlBaseParser.CHANGE - 12)) |
                  (1 << (SqlBaseParser.CLEAR - 12)) |
                  (1 << (SqlBaseParser.CLUSTER - 12)) |
                  (1 << (SqlBaseParser.CLUSTERED - 12)) |
                  (1 << (SqlBaseParser.CODEGEN - 12)) |
                  (1 << (SqlBaseParser.COLLECTION - 12)))) !==
                0) ||
            (((_la - 44) & ~0x1f) === 0 &&
              ((1 << (_la - 44)) &
                ((1 << (SqlBaseParser.COLUMNS - 44)) |
                  (1 << (SqlBaseParser.COMMENT - 44)) |
                  (1 << (SqlBaseParser.COMMIT - 44)) |
                  (1 << (SqlBaseParser.COMPACT - 44)) |
                  (1 << (SqlBaseParser.COMPACTIONS - 44)) |
                  (1 << (SqlBaseParser.COMPUTE - 44)) |
                  (1 << (SqlBaseParser.CONCATENATE - 44)) |
                  (1 << (SqlBaseParser.COST - 44)) |
                  (1 << (SqlBaseParser.CUBE - 44)) |
                  (1 << (SqlBaseParser.CURRENT - 44)) |
                  (1 << (SqlBaseParser.DAY - 44)) |
                  (1 << (SqlBaseParser.DATA - 44)) |
                  (1 << (SqlBaseParser.DATABASE - 44)) |
                  (1 << (SqlBaseParser.DATABASES - 44)) |
                  (1 << (SqlBaseParser.DBPROPERTIES - 44)) |
                  (1 << (SqlBaseParser.DEFINED - 44)) |
                  (1 << (SqlBaseParser.DELETE - 44)) |
                  (1 << (SqlBaseParser.DELIMITED - 44)) |
                  (1 << (SqlBaseParser.DESC - 44)) |
                  (1 << (SqlBaseParser.DESCRIBE - 44)) |
                  (1 << (SqlBaseParser.DFS - 44)) |
                  (1 << (SqlBaseParser.DIRECTORIES - 44)) |
                  (1 << (SqlBaseParser.DIRECTORY - 44)) |
                  (1 << (SqlBaseParser.DISTRIBUTE - 44)))) !==
                0) ||
            (((_la - 76) & ~0x1f) === 0 &&
              ((1 << (_la - 76)) &
                ((1 << (SqlBaseParser.DIV - 76)) |
                  (1 << (SqlBaseParser.DROP - 76)) |
                  (1 << (SqlBaseParser.ESCAPED - 76)) |
                  (1 << (SqlBaseParser.EXCHANGE - 76)) |
                  (1 << (SqlBaseParser.EXISTS - 76)) |
                  (1 << (SqlBaseParser.EXPLAIN - 76)) |
                  (1 << (SqlBaseParser.EXPORT - 76)) |
                  (1 << (SqlBaseParser.EXTENDED - 76)) |
                  (1 << (SqlBaseParser.EXTERNAL - 76)) |
                  (1 << (SqlBaseParser.EXTRACT - 76)) |
                  (1 << (SqlBaseParser.FIELDS - 76)) |
                  (1 << (SqlBaseParser.FILEFORMAT - 76)) |
                  (1 << (SqlBaseParser.FIRST - 76)) |
                  (1 << (SqlBaseParser.FOLLOWING - 76)) |
                  (1 << (SqlBaseParser.FORMAT - 76)) |
                  (1 << (SqlBaseParser.FORMATTED - 76)) |
                  (1 << (SqlBaseParser.FUNCTION - 76)) |
                  (1 << (SqlBaseParser.FUNCTIONS - 76)) |
                  (1 << (SqlBaseParser.GLOBAL - 76)))) !==
                0) ||
            (((_la - 108) & ~0x1f) === 0 &&
              ((1 << (_la - 108)) &
                ((1 << (SqlBaseParser.GROUPING - 108)) |
                  (1 << (SqlBaseParser.HOUR - 108)) |
                  (1 << (SqlBaseParser.IF - 108)) |
                  (1 << (SqlBaseParser.IGNORE - 108)) |
                  (1 << (SqlBaseParser.IMPORT - 108)) |
                  (1 << (SqlBaseParser.INDEX - 108)) |
                  (1 << (SqlBaseParser.INDEXES - 108)) |
                  (1 << (SqlBaseParser.INPATH - 108)) |
                  (1 << (SqlBaseParser.INPUTFORMAT - 108)) |
                  (1 << (SqlBaseParser.INSERT - 108)) |
                  (1 << (SqlBaseParser.INTERVAL - 108)) |
                  (1 << (SqlBaseParser.ITEMS - 108)) |
                  (1 << (SqlBaseParser.KEYS - 108)) |
                  (1 << (SqlBaseParser.LAST - 108)) |
                  (1 << (SqlBaseParser.LAZY - 108)) |
                  (1 << (SqlBaseParser.LIKE - 108)) |
                  (1 << (SqlBaseParser.LIMIT - 108)) |
                  (1 << (SqlBaseParser.LINES - 108)) |
                  (1 << (SqlBaseParser.LIST - 108)) |
                  (1 << (SqlBaseParser.LOAD - 108)) |
                  (1 << (SqlBaseParser.LOCAL - 108)) |
                  (1 << (SqlBaseParser.LOCATION - 108)))) !==
                0) ||
            (((_la - 140) & ~0x1f) === 0 &&
              ((1 << (_la - 140)) &
                ((1 << (SqlBaseParser.LOCK - 140)) |
                  (1 << (SqlBaseParser.LOCKS - 140)) |
                  (1 << (SqlBaseParser.LOGICAL - 140)) |
                  (1 << (SqlBaseParser.MACRO - 140)) |
                  (1 << (SqlBaseParser.MAP - 140)) |
                  (1 << (SqlBaseParser.MATCHED - 140)) |
                  (1 << (SqlBaseParser.MERGE - 140)) |
                  (1 << (SqlBaseParser.MINUTE - 140)) |
                  (1 << (SqlBaseParser.MONTH - 140)) |
                  (1 << (SqlBaseParser.MSCK - 140)) |
                  (1 << (SqlBaseParser.NAMESPACE - 140)) |
                  (1 << (SqlBaseParser.NAMESPACES - 140)) |
                  (1 << (SqlBaseParser.NO - 140)) |
                  (1 << (SqlBaseParser.NULLS - 140)) |
                  (1 << (SqlBaseParser.OF - 140)) |
                  (1 << (SqlBaseParser.OPTION - 140)) |
                  (1 << (SqlBaseParser.OPTIONS - 140)) |
                  (1 << (SqlBaseParser.OUT - 140)) |
                  (1 << (SqlBaseParser.OUTPUTFORMAT - 140)) |
                  (1 << (SqlBaseParser.OVER - 140)) |
                  (1 << (SqlBaseParser.OVERLAY - 140)) |
                  (1 << (SqlBaseParser.OVERWRITE - 140)) |
                  (1 << (SqlBaseParser.PARTITION - 140)))) !==
                0) ||
            (((_la - 172) & ~0x1f) === 0 &&
              ((1 << (_la - 172)) &
                ((1 << (SqlBaseParser.PARTITIONED - 172)) |
                  (1 << (SqlBaseParser.PARTITIONS - 172)) |
                  (1 << (SqlBaseParser.PERCENTLIT - 172)) |
                  (1 << (SqlBaseParser.PIVOT - 172)) |
                  (1 << (SqlBaseParser.PLACING - 172)) |
                  (1 << (SqlBaseParser.POSITION - 172)) |
                  (1 << (SqlBaseParser.PRECEDING - 172)) |
                  (1 << (SqlBaseParser.PRINCIPALS - 172)) |
                  (1 << (SqlBaseParser.PROPERTIES - 172)) |
                  (1 << (SqlBaseParser.PURGE - 172)) |
                  (1 << (SqlBaseParser.QUERY - 172)) |
                  (1 << (SqlBaseParser.RANGE - 172)) |
                  (1 << (SqlBaseParser.RECORDREADER - 172)) |
                  (1 << (SqlBaseParser.RECORDWRITER - 172)) |
                  (1 << (SqlBaseParser.RECOVER - 172)) |
                  (1 << (SqlBaseParser.REDUCE - 172)) |
                  (1 << (SqlBaseParser.REFRESH - 172)) |
                  (1 << (SqlBaseParser.RENAME - 172)) |
                  (1 << (SqlBaseParser.REPAIR - 172)) |
                  (1 << (SqlBaseParser.REPLACE - 172)) |
                  (1 << (SqlBaseParser.RESET - 172)) |
                  (1 << (SqlBaseParser.RESPECT - 172)) |
                  (1 << (SqlBaseParser.RESTRICT - 172)) |
                  (1 << (SqlBaseParser.REVOKE - 172)) |
                  (1 << (SqlBaseParser.RLIKE - 172)) |
                  (1 << (SqlBaseParser.ROLE - 172)) |
                  (1 << (SqlBaseParser.ROLES - 172)) |
                  (1 << (SqlBaseParser.ROLLBACK - 172)) |
                  (1 << (SqlBaseParser.ROLLUP - 172)))) !==
                0) ||
            (((_la - 204) & ~0x1f) === 0 &&
              ((1 << (_la - 204)) &
                ((1 << (SqlBaseParser.ROW - 204)) |
                  (1 << (SqlBaseParser.ROWS - 204)) |
                  (1 << (SqlBaseParser.SECOND - 204)) |
                  (1 << (SqlBaseParser.SCHEMA - 204)) |
                  (1 << (SqlBaseParser.SEMI - 204)) |
                  (1 << (SqlBaseParser.SEPARATED - 204)) |
                  (1 << (SqlBaseParser.SERDE - 204)) |
                  (1 << (SqlBaseParser.SERDEPROPERTIES - 204)) |
                  (1 << (SqlBaseParser.SET - 204)) |
                  (1 << (SqlBaseParser.SETMINUS - 204)) |
                  (1 << (SqlBaseParser.SETS - 204)) |
                  (1 << (SqlBaseParser.SHOW - 204)) |
                  (1 << (SqlBaseParser.SKEWED - 204)) |
                  (1 << (SqlBaseParser.SORT - 204)) |
                  (1 << (SqlBaseParser.SORTED - 204)) |
                  (1 << (SqlBaseParser.START - 204)) |
                  (1 << (SqlBaseParser.STATISTICS - 204)) |
                  (1 << (SqlBaseParser.STORED - 204)) |
                  (1 << (SqlBaseParser.STRATIFY - 204)) |
                  (1 << (SqlBaseParser.STRUCT - 204)) |
                  (1 << (SqlBaseParser.SUBSTR - 204)) |
                  (1 << (SqlBaseParser.SUBSTRING - 204)) |
                  (1 << (SqlBaseParser.SYNC - 204)) |
                  (1 << (SqlBaseParser.TABLES - 204)) |
                  (1 << (SqlBaseParser.TABLESAMPLE - 204)) |
                  (1 << (SqlBaseParser.TBLPROPERTIES - 204)) |
                  (1 << (SqlBaseParser.TEMPORARY - 204)) |
                  (1 << (SqlBaseParser.TERMINATED - 204)))) !==
                0) ||
            (((_la - 239) & ~0x1f) === 0 &&
              ((1 << (_la - 239)) &
                ((1 << (SqlBaseParser.TOUCH - 239)) |
                  (1 << (SqlBaseParser.TRANSACTION - 239)) |
                  (1 << (SqlBaseParser.TRANSACTIONS - 239)) |
                  (1 << (SqlBaseParser.TRANSFORM - 239)) |
                  (1 << (SqlBaseParser.TRIM - 239)) |
                  (1 << (SqlBaseParser.TRUE - 239)) |
                  (1 << (SqlBaseParser.TRUNCATE - 239)) |
                  (1 << (SqlBaseParser.TRY_CAST - 239)) |
                  (1 << (SqlBaseParser.TYPE - 239)) |
                  (1 << (SqlBaseParser.UNARCHIVE - 239)) |
                  (1 << (SqlBaseParser.UNBOUNDED - 239)) |
                  (1 << (SqlBaseParser.UNCACHE - 239)) |
                  (1 << (SqlBaseParser.UNLOCK - 239)) |
                  (1 << (SqlBaseParser.UNSET - 239)) |
                  (1 << (SqlBaseParser.UPDATE - 239)) |
                  (1 << (SqlBaseParser.USE - 239)) |
                  (1 << (SqlBaseParser.VALUES - 239)) |
                  (1 << (SqlBaseParser.VIEW - 239)) |
                  (1 << (SqlBaseParser.VIEWS - 239)) |
                  (1 << (SqlBaseParser.WINDOW - 239)) |
                  (1 << (SqlBaseParser.YEAR - 239)) |
                  (1 << (SqlBaseParser.ZONE - 239)))) !==
                0)
          )
        ) {
          this._errHandler.recoverInline(this);
        } else {
          if (this._input.LA(1) === Token.EOF) {
            this.matchedEOF = true;
          }

          this._errHandler.reportMatch(this);
          this.consume();
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public strictNonReserved(): StrictNonReservedContext {
    const _localctx: StrictNonReservedContext = new StrictNonReservedContext(this._ctx, this.state);
    this.enterRule(_localctx, 282, SqlBaseParser.RULE_strictNonReserved);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3144;
        _la = this._input.LA(1);
        if (
          !(
            _la === SqlBaseParser.ANTI ||
            _la === SqlBaseParser.CROSS ||
            _la === SqlBaseParser.EXCEPT ||
            (((_la - 102) & ~0x1f) === 0 &&
              ((1 << (_la - 102)) &
                ((1 << (SqlBaseParser.FULL - 102)) |
                  (1 << (SqlBaseParser.INNER - 102)) |
                  (1 << (SqlBaseParser.INTERSECT - 102)) |
                  (1 << (SqlBaseParser.JOIN - 102)) |
                  (1 << (SqlBaseParser.LATERAL - 102)) |
                  (1 << (SqlBaseParser.LEFT - 102)))) !==
                0) ||
            _la === SqlBaseParser.NATURAL ||
            _la === SqlBaseParser.ON ||
            (((_la - 198) & ~0x1f) === 0 &&
              ((1 << (_la - 198)) &
                ((1 << (SqlBaseParser.RIGHT - 198)) |
                  (1 << (SqlBaseParser.SEMI - 198)) |
                  (1 << (SqlBaseParser.SETMINUS - 198)))) !==
                0) ||
            _la === SqlBaseParser.UNION ||
            _la === SqlBaseParser.USING
          )
        ) {
          this._errHandler.recoverInline(this);
        } else {
          if (this._input.LA(1) === Token.EOF) {
            this.matchedEOF = true;
          }

          this._errHandler.reportMatch(this);
          this.consume();
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  public nonReserved(): NonReservedContext {
    const _localctx: NonReservedContext = new NonReservedContext(this._ctx, this.state);
    this.enterRule(_localctx, 284, SqlBaseParser.RULE_nonReserved);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3146;
        _la = this._input.LA(1);
        if (
          !(
            ((_la & ~0x1f) === 0 &&
              ((1 << _la) &
                ((1 << SqlBaseParser.ADD) |
                  (1 << SqlBaseParser.AFTER) |
                  (1 << SqlBaseParser.ALL) |
                  (1 << SqlBaseParser.ALTER) |
                  (1 << SqlBaseParser.ANALYZE) |
                  (1 << SqlBaseParser.AND) |
                  (1 << SqlBaseParser.ANY) |
                  (1 << SqlBaseParser.ARCHIVE) |
                  (1 << SqlBaseParser.ARRAY) |
                  (1 << SqlBaseParser.AS) |
                  (1 << SqlBaseParser.ASC) |
                  (1 << SqlBaseParser.AT) |
                  (1 << SqlBaseParser.AUTHORIZATION) |
                  (1 << SqlBaseParser.BETWEEN) |
                  (1 << SqlBaseParser.BOTH) |
                  (1 << SqlBaseParser.BUCKET) |
                  (1 << SqlBaseParser.BUCKETS) |
                  (1 << SqlBaseParser.BY) |
                  (1 << SqlBaseParser.CACHE))) !==
                0) ||
            (((_la - 32) & ~0x1f) === 0 &&
              ((1 << (_la - 32)) &
                ((1 << (SqlBaseParser.CASCADE - 32)) |
                  (1 << (SqlBaseParser.CASE - 32)) |
                  (1 << (SqlBaseParser.CAST - 32)) |
                  (1 << (SqlBaseParser.CHANGE - 32)) |
                  (1 << (SqlBaseParser.CHECK - 32)) |
                  (1 << (SqlBaseParser.CLEAR - 32)) |
                  (1 << (SqlBaseParser.CLUSTER - 32)) |
                  (1 << (SqlBaseParser.CLUSTERED - 32)) |
                  (1 << (SqlBaseParser.CODEGEN - 32)) |
                  (1 << (SqlBaseParser.COLLATE - 32)) |
                  (1 << (SqlBaseParser.COLLECTION - 32)) |
                  (1 << (SqlBaseParser.COLUMN - 32)) |
                  (1 << (SqlBaseParser.COLUMNS - 32)) |
                  (1 << (SqlBaseParser.COMMENT - 32)) |
                  (1 << (SqlBaseParser.COMMIT - 32)) |
                  (1 << (SqlBaseParser.COMPACT - 32)) |
                  (1 << (SqlBaseParser.COMPACTIONS - 32)) |
                  (1 << (SqlBaseParser.COMPUTE - 32)) |
                  (1 << (SqlBaseParser.CONCATENATE - 32)) |
                  (1 << (SqlBaseParser.CONSTRAINT - 32)) |
                  (1 << (SqlBaseParser.COST - 32)) |
                  (1 << (SqlBaseParser.CREATE - 32)) |
                  (1 << (SqlBaseParser.CUBE - 32)) |
                  (1 << (SqlBaseParser.CURRENT - 32)) |
                  (1 << (SqlBaseParser.CURRENT_DATE - 32)) |
                  (1 << (SqlBaseParser.CURRENT_TIME - 32)) |
                  (1 << (SqlBaseParser.CURRENT_TIMESTAMP - 32)) |
                  (1 << (SqlBaseParser.CURRENT_USER - 32)) |
                  (1 << (SqlBaseParser.DAY - 32)) |
                  (1 << (SqlBaseParser.DATA - 32)) |
                  (1 << (SqlBaseParser.DATABASE - 32)))) !==
                0) ||
            (((_la - 64) & ~0x1f) === 0 &&
              ((1 << (_la - 64)) &
                ((1 << (SqlBaseParser.DATABASES - 64)) |
                  (1 << (SqlBaseParser.DBPROPERTIES - 64)) |
                  (1 << (SqlBaseParser.DEFINED - 64)) |
                  (1 << (SqlBaseParser.DELETE - 64)) |
                  (1 << (SqlBaseParser.DELIMITED - 64)) |
                  (1 << (SqlBaseParser.DESC - 64)) |
                  (1 << (SqlBaseParser.DESCRIBE - 64)) |
                  (1 << (SqlBaseParser.DFS - 64)) |
                  (1 << (SqlBaseParser.DIRECTORIES - 64)) |
                  (1 << (SqlBaseParser.DIRECTORY - 64)) |
                  (1 << (SqlBaseParser.DISTINCT - 64)) |
                  (1 << (SqlBaseParser.DISTRIBUTE - 64)) |
                  (1 << (SqlBaseParser.DIV - 64)) |
                  (1 << (SqlBaseParser.DROP - 64)) |
                  (1 << (SqlBaseParser.ELSE - 64)) |
                  (1 << (SqlBaseParser.END - 64)) |
                  (1 << (SqlBaseParser.ESCAPE - 64)) |
                  (1 << (SqlBaseParser.ESCAPED - 64)) |
                  (1 << (SqlBaseParser.EXCHANGE - 64)) |
                  (1 << (SqlBaseParser.EXISTS - 64)) |
                  (1 << (SqlBaseParser.EXPLAIN - 64)) |
                  (1 << (SqlBaseParser.EXPORT - 64)) |
                  (1 << (SqlBaseParser.EXTENDED - 64)) |
                  (1 << (SqlBaseParser.EXTERNAL - 64)) |
                  (1 << (SqlBaseParser.EXTRACT - 64)) |
                  (1 << (SqlBaseParser.FALSE - 64)) |
                  (1 << (SqlBaseParser.FETCH - 64)) |
                  (1 << (SqlBaseParser.FIELDS - 64)) |
                  (1 << (SqlBaseParser.FILTER - 64)) |
                  (1 << (SqlBaseParser.FILEFORMAT - 64)) |
                  (1 << (SqlBaseParser.FIRST - 64)))) !==
                0) ||
            (((_la - 96) & ~0x1f) === 0 &&
              ((1 << (_la - 96)) &
                ((1 << (SqlBaseParser.FOLLOWING - 96)) |
                  (1 << (SqlBaseParser.FOR - 96)) |
                  (1 << (SqlBaseParser.FOREIGN - 96)) |
                  (1 << (SqlBaseParser.FORMAT - 96)) |
                  (1 << (SqlBaseParser.FORMATTED - 96)) |
                  (1 << (SqlBaseParser.FROM - 96)) |
                  (1 << (SqlBaseParser.FUNCTION - 96)) |
                  (1 << (SqlBaseParser.FUNCTIONS - 96)) |
                  (1 << (SqlBaseParser.GLOBAL - 96)) |
                  (1 << (SqlBaseParser.GRANT - 96)) |
                  (1 << (SqlBaseParser.GROUP - 96)) |
                  (1 << (SqlBaseParser.GROUPING - 96)) |
                  (1 << (SqlBaseParser.HAVING - 96)) |
                  (1 << (SqlBaseParser.HOUR - 96)) |
                  (1 << (SqlBaseParser.IF - 96)) |
                  (1 << (SqlBaseParser.IGNORE - 96)) |
                  (1 << (SqlBaseParser.IMPORT - 96)) |
                  (1 << (SqlBaseParser.IN - 96)) |
                  (1 << (SqlBaseParser.INDEX - 96)) |
                  (1 << (SqlBaseParser.INDEXES - 96)) |
                  (1 << (SqlBaseParser.INPATH - 96)) |
                  (1 << (SqlBaseParser.INPUTFORMAT - 96)) |
                  (1 << (SqlBaseParser.INSERT - 96)) |
                  (1 << (SqlBaseParser.INTERVAL - 96)) |
                  (1 << (SqlBaseParser.INTO - 96)) |
                  (1 << (SqlBaseParser.IS - 96)) |
                  (1 << (SqlBaseParser.ITEMS - 96)) |
                  (1 << (SqlBaseParser.KEYS - 96)))) !==
                0) ||
            (((_la - 128) & ~0x1f) === 0 &&
              ((1 << (_la - 128)) &
                ((1 << (SqlBaseParser.LAST - 128)) |
                  (1 << (SqlBaseParser.LAZY - 128)) |
                  (1 << (SqlBaseParser.LEADING - 128)) |
                  (1 << (SqlBaseParser.LIKE - 128)) |
                  (1 << (SqlBaseParser.LIMIT - 128)) |
                  (1 << (SqlBaseParser.LINES - 128)) |
                  (1 << (SqlBaseParser.LIST - 128)) |
                  (1 << (SqlBaseParser.LOAD - 128)) |
                  (1 << (SqlBaseParser.LOCAL - 128)) |
                  (1 << (SqlBaseParser.LOCATION - 128)) |
                  (1 << (SqlBaseParser.LOCK - 128)) |
                  (1 << (SqlBaseParser.LOCKS - 128)) |
                  (1 << (SqlBaseParser.LOGICAL - 128)) |
                  (1 << (SqlBaseParser.MACRO - 128)) |
                  (1 << (SqlBaseParser.MAP - 128)) |
                  (1 << (SqlBaseParser.MATCHED - 128)) |
                  (1 << (SqlBaseParser.MERGE - 128)) |
                  (1 << (SqlBaseParser.MINUTE - 128)) |
                  (1 << (SqlBaseParser.MONTH - 128)) |
                  (1 << (SqlBaseParser.MSCK - 128)) |
                  (1 << (SqlBaseParser.NAMESPACE - 128)) |
                  (1 << (SqlBaseParser.NAMESPACES - 128)) |
                  (1 << (SqlBaseParser.NO - 128)) |
                  (1 << (SqlBaseParser.NOT - 128)) |
                  (1 << (SqlBaseParser.NULL - 128)) |
                  (1 << (SqlBaseParser.NULLS - 128)) |
                  (1 << (SqlBaseParser.OF - 128)) |
                  (1 << (SqlBaseParser.ONLY - 128)))) !==
                0) ||
            (((_la - 160) & ~0x1f) === 0 &&
              ((1 << (_la - 160)) &
                ((1 << (SqlBaseParser.OPTION - 160)) |
                  (1 << (SqlBaseParser.OPTIONS - 160)) |
                  (1 << (SqlBaseParser.OR - 160)) |
                  (1 << (SqlBaseParser.ORDER - 160)) |
                  (1 << (SqlBaseParser.OUT - 160)) |
                  (1 << (SqlBaseParser.OUTER - 160)) |
                  (1 << (SqlBaseParser.OUTPUTFORMAT - 160)) |
                  (1 << (SqlBaseParser.OVER - 160)) |
                  (1 << (SqlBaseParser.OVERLAPS - 160)) |
                  (1 << (SqlBaseParser.OVERLAY - 160)) |
                  (1 << (SqlBaseParser.OVERWRITE - 160)) |
                  (1 << (SqlBaseParser.PARTITION - 160)) |
                  (1 << (SqlBaseParser.PARTITIONED - 160)) |
                  (1 << (SqlBaseParser.PARTITIONS - 160)) |
                  (1 << (SqlBaseParser.PERCENTLIT - 160)) |
                  (1 << (SqlBaseParser.PIVOT - 160)) |
                  (1 << (SqlBaseParser.PLACING - 160)) |
                  (1 << (SqlBaseParser.POSITION - 160)) |
                  (1 << (SqlBaseParser.PRECEDING - 160)) |
                  (1 << (SqlBaseParser.PRIMARY - 160)) |
                  (1 << (SqlBaseParser.PRINCIPALS - 160)) |
                  (1 << (SqlBaseParser.PROPERTIES - 160)) |
                  (1 << (SqlBaseParser.PURGE - 160)) |
                  (1 << (SqlBaseParser.QUERY - 160)) |
                  (1 << (SqlBaseParser.RANGE - 160)) |
                  (1 << (SqlBaseParser.RECORDREADER - 160)) |
                  (1 << (SqlBaseParser.RECORDWRITER - 160)) |
                  (1 << (SqlBaseParser.RECOVER - 160)) |
                  (1 << (SqlBaseParser.REDUCE - 160)) |
                  (1 << (SqlBaseParser.REFERENCES - 160)) |
                  (1 << (SqlBaseParser.REFRESH - 160)) |
                  (1 << (SqlBaseParser.RENAME - 160)))) !==
                0) ||
            (((_la - 192) & ~0x1f) === 0 &&
              ((1 << (_la - 192)) &
                ((1 << (SqlBaseParser.REPAIR - 192)) |
                  (1 << (SqlBaseParser.REPLACE - 192)) |
                  (1 << (SqlBaseParser.RESET - 192)) |
                  (1 << (SqlBaseParser.RESPECT - 192)) |
                  (1 << (SqlBaseParser.RESTRICT - 192)) |
                  (1 << (SqlBaseParser.REVOKE - 192)) |
                  (1 << (SqlBaseParser.RLIKE - 192)) |
                  (1 << (SqlBaseParser.ROLE - 192)) |
                  (1 << (SqlBaseParser.ROLES - 192)) |
                  (1 << (SqlBaseParser.ROLLBACK - 192)) |
                  (1 << (SqlBaseParser.ROLLUP - 192)) |
                  (1 << (SqlBaseParser.ROW - 192)) |
                  (1 << (SqlBaseParser.ROWS - 192)) |
                  (1 << (SqlBaseParser.SECOND - 192)) |
                  (1 << (SqlBaseParser.SCHEMA - 192)) |
                  (1 << (SqlBaseParser.SELECT - 192)) |
                  (1 << (SqlBaseParser.SEPARATED - 192)) |
                  (1 << (SqlBaseParser.SERDE - 192)) |
                  (1 << (SqlBaseParser.SERDEPROPERTIES - 192)) |
                  (1 << (SqlBaseParser.SESSION_USER - 192)) |
                  (1 << (SqlBaseParser.SET - 192)) |
                  (1 << (SqlBaseParser.SETS - 192)) |
                  (1 << (SqlBaseParser.SHOW - 192)) |
                  (1 << (SqlBaseParser.SKEWED - 192)) |
                  (1 << (SqlBaseParser.SOME - 192)) |
                  (1 << (SqlBaseParser.SORT - 192)) |
                  (1 << (SqlBaseParser.SORTED - 192)) |
                  (1 << (SqlBaseParser.START - 192)) |
                  (1 << (SqlBaseParser.STATISTICS - 192)))) !==
                0) ||
            (((_la - 224) & ~0x1f) === 0 &&
              ((1 << (_la - 224)) &
                ((1 << (SqlBaseParser.STORED - 224)) |
                  (1 << (SqlBaseParser.STRATIFY - 224)) |
                  (1 << (SqlBaseParser.STRUCT - 224)) |
                  (1 << (SqlBaseParser.SUBSTR - 224)) |
                  (1 << (SqlBaseParser.SUBSTRING - 224)) |
                  (1 << (SqlBaseParser.SYNC - 224)) |
                  (1 << (SqlBaseParser.TABLE - 224)) |
                  (1 << (SqlBaseParser.TABLES - 224)) |
                  (1 << (SqlBaseParser.TABLESAMPLE - 224)) |
                  (1 << (SqlBaseParser.TBLPROPERTIES - 224)) |
                  (1 << (SqlBaseParser.TEMPORARY - 224)) |
                  (1 << (SqlBaseParser.TERMINATED - 224)) |
                  (1 << (SqlBaseParser.THEN - 224)) |
                  (1 << (SqlBaseParser.TIME - 224)) |
                  (1 << (SqlBaseParser.TO - 224)) |
                  (1 << (SqlBaseParser.TOUCH - 224)) |
                  (1 << (SqlBaseParser.TRAILING - 224)) |
                  (1 << (SqlBaseParser.TRANSACTION - 224)) |
                  (1 << (SqlBaseParser.TRANSACTIONS - 224)) |
                  (1 << (SqlBaseParser.TRANSFORM - 224)) |
                  (1 << (SqlBaseParser.TRIM - 224)) |
                  (1 << (SqlBaseParser.TRUE - 224)) |
                  (1 << (SqlBaseParser.TRUNCATE - 224)) |
                  (1 << (SqlBaseParser.TRY_CAST - 224)) |
                  (1 << (SqlBaseParser.TYPE - 224)) |
                  (1 << (SqlBaseParser.UNARCHIVE - 224)) |
                  (1 << (SqlBaseParser.UNBOUNDED - 224)) |
                  (1 << (SqlBaseParser.UNCACHE - 224)) |
                  (1 << (SqlBaseParser.UNIQUE - 224)) |
                  (1 << (SqlBaseParser.UNKNOWN - 224)) |
                  (1 << (SqlBaseParser.UNLOCK - 224)))) !==
                0) ||
            (((_la - 256) & ~0x1f) === 0 &&
              ((1 << (_la - 256)) &
                ((1 << (SqlBaseParser.UNSET - 256)) |
                  (1 << (SqlBaseParser.UPDATE - 256)) |
                  (1 << (SqlBaseParser.USE - 256)) |
                  (1 << (SqlBaseParser.USER - 256)) |
                  (1 << (SqlBaseParser.VALUES - 256)) |
                  (1 << (SqlBaseParser.VIEW - 256)) |
                  (1 << (SqlBaseParser.VIEWS - 256)) |
                  (1 << (SqlBaseParser.WHEN - 256)) |
                  (1 << (SqlBaseParser.WHERE - 256)) |
                  (1 << (SqlBaseParser.WINDOW - 256)) |
                  (1 << (SqlBaseParser.WITH - 256)) |
                  (1 << (SqlBaseParser.YEAR - 256)) |
                  (1 << (SqlBaseParser.ZONE - 256)))) !==
                0)
          )
        ) {
          this._errHandler.recoverInline(this);
        } else {
          if (this._input.LA(1) === Token.EOF) {
            this.matchedEOF = true;
          }

          this._errHandler.reportMatch(this);
          this.consume();
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
    switch (ruleIndex) {
      case 42:
        return this.queryTerm_sempred(_localctx as QueryTermContext, predIndex);

      case 101:
        return this.booleanExpression_sempred(_localctx as BooleanExpressionContext, predIndex);

      case 103:
        return this.valueExpression_sempred(_localctx as ValueExpressionContext, predIndex);

      case 104:
        return this.primaryExpression_sempred(_localctx as PrimaryExpressionContext, predIndex);

      case 135:
        return this.identifier_sempred(_localctx as IdentifierContext, predIndex);

      case 136:
        return this.strictIdentifier_sempred(_localctx as StrictIdentifierContext, predIndex);

      case 137:
        return this.quotedIdentifier_sempred(_localctx as QuotedIdentifierContext, predIndex);

      case 138:
        return this.number_sempred(_localctx as NumberContext, predIndex);
    }
    return true;
  }
  private queryTerm_sempred(_localctx: QueryTermContext, predIndex: number): boolean {
    switch (predIndex) {
      case 0:
        return this.precpred(this._ctx, 3);

      case 1:
        return this.legacy_setops_precedence_enabled;

      case 2:
        return this.precpred(this._ctx, 2);

      case 3:
        return !this.legacy_setops_precedence_enabled;

      case 4:
        return this.precpred(this._ctx, 1);

      case 5:
        return !this.legacy_setops_precedence_enabled;
    }
    return true;
  }
  private booleanExpression_sempred(_localctx: BooleanExpressionContext, predIndex: number): boolean {
    switch (predIndex) {
      case 6:
        return this.precpred(this._ctx, 2);

      case 7:
        return this.precpred(this._ctx, 1);
    }
    return true;
  }
  private valueExpression_sempred(_localctx: ValueExpressionContext, predIndex: number): boolean {
    switch (predIndex) {
      case 8:
        return this.precpred(this._ctx, 6);

      case 9:
        return this.precpred(this._ctx, 5);

      case 10:
        return this.precpred(this._ctx, 4);

      case 11:
        return this.precpred(this._ctx, 3);

      case 12:
        return this.precpred(this._ctx, 2);

      case 13:
        return this.precpred(this._ctx, 1);
    }
    return true;
  }
  private primaryExpression_sempred(_localctx: PrimaryExpressionContext, predIndex: number): boolean {
    switch (predIndex) {
      case 14:
        return this.precpred(this._ctx, 9);

      case 15:
        return this.precpred(this._ctx, 7);

      case 16:
        return this.precpred(this._ctx, 6);
    }
    return true;
  }
  private identifier_sempred(_localctx: IdentifierContext, predIndex: number): boolean {
    switch (predIndex) {
      case 17:
        return !this.SQL_standard_keyword_behavior;
    }
    return true;
  }
  private strictIdentifier_sempred(_localctx: StrictIdentifierContext, predIndex: number): boolean {
    switch (predIndex) {
      case 18:
        return this.SQL_standard_keyword_behavior;

      case 19:
        return !this.SQL_standard_keyword_behavior;
    }
    return true;
  }
  private quotedIdentifier_sempred(_localctx: QuotedIdentifierContext, predIndex: number): boolean {
    switch (predIndex) {
      case 20:
        return this.backquoted_identifier;

      case 21:
        return this.doublequoted_identifier;
    }
    return true;
  }
  private number_sempred(_localctx: NumberContext, predIndex: number): boolean {
    switch (predIndex) {
      case 22:
        return !this.legacy_exponent_literal_as_decimal_enabled;

      case 23:
        return !this.legacy_exponent_literal_as_decimal_enabled;

      case 24:
        return this.legacy_exponent_literal_as_decimal_enabled;
    }
    return true;
  }

  private static readonly _serializedATNSegments: number = 6;
  private static readonly _serializedATNSegment0: string =
    "\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x03\u0133\u0C4F\x04" +
    "\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
    "\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
    "\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
    "\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17" +
    "\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C" +
    '\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04"\t"\x04' +
    "#\t#\x04$\t$\x04%\t%\x04&\t&\x04'\t'\x04(\t(\x04)\t)\x04*\t*\x04+\t" +
    "+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x04" +
    "4\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04:\t:\x04;\t;\x04<\t<\x04" +
    "=\t=\x04>\t>\x04?\t?\x04@\t@\x04A\tA\x04B\tB\x04C\tC\x04D\tD\x04E\tE\x04" +
    "F\tF\x04G\tG\x04H\tH\x04I\tI\x04J\tJ\x04K\tK\x04L\tL\x04M\tM\x04N\tN\x04" +
    "O\tO\x04P\tP\x04Q\tQ\x04R\tR\x04S\tS\x04T\tT\x04U\tU\x04V\tV\x04W\tW\x04" +
    "X\tX\x04Y\tY\x04Z\tZ\x04[\t[\x04\\\t\\\x04]\t]\x04^\t^\x04_\t_\x04`\t" +
    "`\x04a\ta\x04b\tb\x04c\tc\x04d\td\x04e\te\x04f\tf\x04g\tg\x04h\th\x04" +
    "i\ti\x04j\tj\x04k\tk\x04l\tl\x04m\tm\x04n\tn\x04o\to\x04p\tp\x04q\tq\x04" +
    "r\tr\x04s\ts\x04t\tt\x04u\tu\x04v\tv\x04w\tw\x04x\tx\x04y\ty\x04z\tz\x04" +
    "{\t{\x04|\t|\x04}\t}\x04~\t~\x04\x7F\t\x7F\x04\x80\t\x80\x04\x81\t\x81" +
    "\x04\x82\t\x82\x04\x83\t\x83\x04\x84\t\x84\x04\x85\t\x85\x04\x86\t\x86" +
    "\x04\x87\t\x87\x04\x88\t\x88\x04\x89\t\x89\x04\x8A\t\x8A\x04\x8B\t\x8B" +
    "\x04\x8C\t\x8C\x04\x8D\t\x8D\x04\x8E\t\x8E\x04\x8F\t\x8F\x04\x90\t\x90" +
    "\x03\x02\x03\x02\x07\x02\u0123\n\x02\f\x02\x0E\x02\u0126\v\x02\x03\x02" +
    "\x03\x02\x03\x03\x03\x03\x03\x03\x03\x04\x03\x04\x03\x04\x03\x05\x03\x05" +
    "\x03\x05\x03\x06\x03\x06\x03\x06\x03\x07\x03\x07\x03\x07\x03\b\x03\b\x03" +
    "\b\x03\t\x03\t\x05\t\u013E\n\t\x03\t\x03\t\x03\t\x05\t\u0143\n\t\x03\t" +
    "\x03\t\x03\t\x03\t\x03\t\x03\t\x05\t\u014B\n\t\x03\t\x03\t\x03\t\x03\t" +
    "\x03\t\x03\t\x07\t\u0153\n\t\f\t\x0E\t\u0156\v\t\x03\t\x03\t\x03\t\x03" +
    "\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03" +
    "\t\x03\t\x05\t\u0169\n\t\x03\t\x03\t\x05\t\u016D\n\t\x03\t\x03\t\x03\t" +
    "\x03\t\x05\t\u0173\n\t\x03\t\x05\t\u0176\n\t\x03\t\x05\t\u0179\n\t\x03" +
    "\t\x03\t\x03\t\x03\t\x03\t\x05\t\u0180\n\t\x03\t\x05\t\u0183\n\t\x03\t" +
    "\x03\t\x05\t\u0187\n\t\x03\t\x05\t\u018A\n\t\x03\t\x03\t\x03\t\x03\t\x03" +
    "\t\x05\t\u0191\n\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03" +
    "\t\x07\t\u019C\n\t\f\t\x0E\t\u019F\v\t\x03\t\x03\t\x03\t\x03\t\x03\t\x05" +
    "\t\u01A6\n\t\x03\t\x05\t\u01A9\n\t\x03\t\x03\t\x05\t\u01AD\n\t\x03\t\x05" +
    "\t\u01B0\n\t\x03\t\x03\t\x03\t\x03\t\x05\t\u01B6\n\t\x03\t\x03\t\x03\t" +
    "\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x05\t\u01C1\n\t\x03\t\x03\t\x03\t" +
    "\x03\t\x05\t\u01C7\n\t\x03\t\x03\t\x03\t\x05\t\u01CC\n\t\x03\t\x03\t\x03" +
    "\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03" +
    "\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03" +
    "\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03" +
    "\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03" +
    "\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x05" +
    "\t\u020C\n\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x05\t\u0215\n\t" +
    "\x03\t\x03\t\x05\t\u0219\n\t\x03\t\x03\t\x03\t\x03\t\x05\t\u021F\n\t\x03" +
    "\t\x03\t\x05\t\u0223\n\t\x03\t\x03\t\x03\t\x05\t\u0228\n\t\x03\t\x03\t" +
    "\x03\t\x03\t\x05\t\u022E\n\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t" +
    "\x03\t\x03\t\x03\t\x05\t\u023A\n\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t" +
    "\x05\t\u0242\n\t\x03\t\x03\t\x03\t\x03\t\x05\t\u0248\n\t\x03\t\x03\t\x03" +
    "\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x05\t\u0255\n\t\x03" +
    "\t\x06\t\u0258\n\t\r\t\x0E\t\u0259\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t" +
    "\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x05\t\u026A\n\t\x03\t" +
    "\x03\t\x03\t\x07\t\u026F\n\t\f\t\x0E\t\u0272\v\t\x03\t\x05\t\u0275\n\t" +
    "\x03\t\x03\t\x03\t\x03\t\x05\t\u027B\n\t\x03\t\x03\t\x03\t\x03\t\x03\t" +
    "\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x05\t\u028A\n\t\x03\t" +
    "\x03\t\x05\t\u028E\n\t\x03\t\x03\t\x03\t\x03\t\x05\t\u0294\n\t\x03\t\x03" +
    "\t\x03\t\x03\t\x05\t\u029A\n\t\x03\t\x05\t\u029D\n\t\x03\t\x05\t\u02A0" +
    "\n\t\x03\t\x03\t\x03\t\x03\t\x05\t\u02A6\n\t\x03\t\x03\t\x05\t\u02AA\n" +
    "\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x07\t\u02B2\n\t\f\t\x0E\t\u02B5" +
    "\v\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x05\t\u02BD\n\t\x03\t\x05\t\u02C0" +
    "\n\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x05\t\u02C9\n\t\x03\t\x03" +
    "\t\x03\t\x05\t\u02CE\n\t\x03\t\x03\t\x03\t\x03\t\x05\t\u02D4\n\t\x03\t" +
    "\x03\t\x03\t\x03\t\x03\t\x05\t\u02DB\n\t\x03\t\x05\t\u02DE\n\t\x03\t\x03" +
    "\t\x03\t\x03\t\x05\t\u02E4\n\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03" +
    "\t\x07\t\u02ED\n\t\f\t\x0E\t\u02F0\v\t\x05\t\u02F2\n\t\x03\t\x03\t\x05" +
    "\t\u02F6\n\t\x03\t\x03\t\x03\t\x05\t\u02FB\n\t\x03\t\x03\t\x03\t\x05\t" +
    "\u0300\n\t\x03\t\x03\t\x03\t\x03\t\x03\t\x05\t\u0307\n\t\x03\t\x05\t\u030A" +
    "\n\t\x03\t\x05\t\u030D\n\t\x03\t\x03\t\x03\t\x03\t\x03\t\x05\t\u0314\n" +
    "\t\x03\t\x03\t\x03\t\x05\t\u0319\n\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03" +
    "\t\x03\t\x05\t\u0322\n\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x05\t\u032A" +
    "\n\t\x03\t\x03\t\x03\t\x03\t\x05\t\u0330\n\t\x03\t\x05\t\u0333\n\t\x03" +
    "\t\x05\t\u0336\n\t\x03\t\x03\t\x03\t\x03\t\x05\t\u033C\n\t\x03\t\x03\t" +
    "\x05\t\u0340\n\t\x03\t\x03\t\x05\t\u0344\n\t\x03\t\x03\t\x05\t\u0348\n" +
    "\t\x05\t\u034A\n\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x05\t\u0352\n\t" +
    "\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x05\t\u035A\n\t\x03\t\x03\t\x03\t" +
    "\x03\t\x05\t\u0360\n\t\x03\t\x03\t\x03\t\x03\t\x05\t\u0366\n\t\x03\t\x05" +
    "\t\u0369\n\t\x03\t\x03\t\x05\t\u036D\n\t\x03\t\x05\t\u0370\n\t\x03\t\x03" +
    "\t\x05\t\u0374\n\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03" +
    "\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03" +
    "\t\x03\t\x03\t\x03\t\x07\t\u038E\n\t\f\t\x0E\t\u0391\v\t\x05\t\u0393\n" +
    "\t\x03\t\x03\t\x05\t\u0397\n\t\x03\t\x03\t\x03\t\x03\t\x05\t\u039D\n\t" +
    "\x03\t\x05\t\u03A0\n\t\x03\t\x05\t\u03A3\n\t\x03\t\x03\t\x03\t\x03\t\x05" +
    "\t\u03A9\n\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x05\t\u03B1\n\t\x03\t" +
    "\x03\t\x03\t\x05\t\u03B6\n\t\x03\t\x03\t\x03\t\x03\t\x05\t\u03BC\n\t\x03" +
    "\t\x03\t\x03\t\x03\t\x05\t\u03C2\n\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03" +
    "\t\x05\t\u03CA\n\t\x03\t\x03\t\x03\t\x07\t\u03CF\n\t\f\t\x0E\t\u03D2\v" +
    "\t\x03\t\x03\t\x03\t\x07\t\u03D7\n\t\f\t\x0E\t\u03DA\v\t\x03\t\x03\t\x03" +
    "\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x07\t\u03E8\n" +
    "\t\f\t\x0E\t\u03EB\v\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t" +
    "\x03\t\x07\t\u03F6\n\t\f\t\x0E\t\u03F9\v\t\x05\t\u03FB\n\t\x03\t\x03\t" +
    "\x07\t\u03FF\n\t\f\t\x0E\t\u0402\v\t\x03\t\x03\t\x03\t\x03\t\x07\t\u0408" +
    "\n\t\f\t\x0E\t\u040B\v\t\x03\t\x03\t\x03\t\x03\t\x07\t\u0411\n\t\f\t\x0E" +
    "\t\u0414\v\t\x03\t\x03\t\x07\t\u0418\n\t\f\t\x0E\t\u041B\v\t\x05\t\u041D" +
    "\n\t\x03\n\x03\n\x03\v\x03\v\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x05\f" +
    "\u0429\n\f\x03\f\x03\f\x05\f\u042D\n\f\x03\f\x03\f\x03\f\x03\f\x03\f\x05" +
    "\f\u0434\n\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03" +
    "\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03" +
    "\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03" +
    "\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03" +
    "\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03" +
    "\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03" +
    "\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03" +
    "\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03" +
    "\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03" +
    "\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x05\f\u04A8\n\f\x03" +
    "\f\x03\f\x03\f\x03\f\x03\f\x03\f\x05\f\u04B0\n\f\x03\f\x03\f\x03\f\x03" +
    "\f\x03\f\x03\f\x05\f\u04B8\n\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03" +
    "\f\x05\f\u04C1\n\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x05" +
    "\f\u04CB\n\f\x03\r\x03\r\x05\r\u04CF\n\r\x03\r\x05\r\u04D2\n\r\x03\r\x03" +
    "\r\x03\r\x03\r\x05\r\u04D8\n\r\x03\r\x03\r\x03\x0E\x03\x0E\x05\x0E\u04DE" +
    "\n\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x0F" +
    "\x03\x0F\x03\x0F\x05\x0F\u04EA\n\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03" +
    "\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x05\x10\u04F6\n\x10\x03\x10" +
    "\x03\x10\x03\x10\x05\x10\u04FB\n\x10\x03\x11\x03\x11\x03\x11\x03\x12\x03" +
    "\x12\x03\x12\x03\x13\x05\x13\u0504\n\x13\x03\x13\x03\x13\x03\x13\x03\x14" +
    "\x03\x14\x03\x14\x05\x14\u050C\n\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03" +
    "\x14\x05\x14\u0513\n\x14\x05\x14\u0515\n\x14\x03\x14\x05\x14\u0518\n\x14" +
    "\x03\x14\x03\x14\x03\x14\x05\x14\u051D\n\x14\x03\x14\x03\x14\x05\x14\u0521" +
    "\n\x14\x03\x14\x03\x14\x03\x14\x05\x14\u0526\n\x14\x03\x14\x05\x14\u0529" +
    "\n\x14\x03\x14\x03\x14\x03\x14\x05\x14\u052E\n\x14\x03\x14\x03\x14\x03" +
    "\x14\x05\x14\u0533\n\x14\x03\x14\x05\x14\u0536\n\x14\x03\x14\x03\x14\x03" +
    "\x14\x05\x14\u053B\n\x14\x03\x14\x03\x14\x05\x14\u053F\n\x14\x03\x14\x03" +
    "\x14\x03\x14\x05\x14\u0544\n\x14\x05\x14\u0546\n\x14\x03\x15\x03\x15\x05" +
    "\x15\u054A\n\x15\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x07\x16\u0551" +
    "\n\x16\f\x16\x0E\x16\u0554\v\x16\x03\x16\x03\x16\x03\x17\x03\x17\x03\x17" +
    "\x05\x17\u055B\n\x17\x03\x18\x03\x18\x03\x19\x03\x19\x03\x19\x03\x19\x03" +
    "\x19\x05\x19\u0564\n\x19\x03\x1A\x03\x1A\x03\x1A\x07\x1A\u0569\n\x1A\f" +
    "\x1A\x0E\x1A\u056C\v\x1A\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x07\x1B\u0572" +
    "\n\x1B\f\x1B\x0E\x1B\u0575\v\x1B\x03\x1C\x03\x1C\x05\x1C\u0579\n\x1C\x03" +
    "\x1C\x05\x1C\u057C\n\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1D\x03\x1D" +
    "\x03\x1D\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E" +
    "\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x07\x1E\u0592\n\x1E\f\x1E\x0E" +
    "\x1E\u0595\v\x1E\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x07\x1F\u059B\n\x1F\f" +
    "\x1F\x0E\x1F\u059E\v\x1F\x03\x1F\x03\x1F\x03 \x03 \x05 \u05A4\n \x03 " +
    "\x05 \u05A7\n \x03!\x03!\x03!\x07!\u05AC\n!\f!\x0E!\u05AF\v!\x03!\x05" +
    '!\u05B2\n!\x03"\x03"\x03"\x03"\x05"\u05B8\n"\x03#\x03#\x03#\x03' +
    "#\x07#\u05BE\n#\f#\x0E#\u05C1\v#\x03#\x03#\x03$\x03$\x03$\x03$\x07$\u05C9" +
    "\n$\f$\x0E$\u05CC\v$\x03$\x03$\x03%\x03%\x03%\x03%\x03%\x03%\x05%\u05D6" +
    "\n%\x03&\x03&\x03&\x03&\x03&\x05&\u05DD\n&\x03'\x03'\x03'\x03'\x05" +
    "'\u05E3\n'\x03(\x03(\x03(\x03)\x03)\x03)\x03)\x03)\x03)\x06)\u05EE\n" +
    ")\r)\x0E)\u05EF\x03)\x03)\x03)\x03)\x03)\x05)\u05F7\n)\x03)\x03)\x03)" +
    "\x03)\x03)\x05)\u05FE\n)\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x03)" +
    "\x03)\x05)\u060A\n)\x03)\x03)\x03)\x03)\x07)\u0610\n)\f)\x0E)\u0613\v" +
    ")\x03)\x07)\u0616\n)\f)\x0E)\u0619\v)\x05)\u061B\n)\x03*\x03*\x03*\x03" +
    "*\x03*\x07*\u0622\n*\f*\x0E*\u0625\v*\x05*\u0627\n*\x03*\x03*\x03*\x03" +
    "*\x03*\x07*\u062E\n*\f*\x0E*\u0631\v*\x05*\u0633\n*\x03*\x03*\x03*\x03" +
    "*\x03*\x07*\u063A\n*\f*\x0E*\u063D\v*\x05*\u063F\n*\x03*\x03*\x03*\x03" +
    "*\x03*\x07*\u0646\n*\f*\x0E*\u0649\v*\x05*\u064B\n*\x03*\x05*\u064E\n" +
    "*\x03*\x03*\x03*\x05*\u0653\n*\x05*\u0655\n*\x03+\x03+\x03+\x03,\x03," +
    "\x03,\x03,\x03,\x03,\x03,\x05,\u0661\n,\x03,\x03,\x03,\x03,\x03,\x05," +
    "\u0668\n,\x03,\x03,\x03,\x03,\x03,\x05,\u066F\n,\x03,\x07,\u0672\n,\f" +
    ",\x0E,\u0675\v,\x03-\x03-\x03-\x03-\x03-\x03-\x03-\x03-\x03-\x05-\u0680" +
    "\n-\x03.\x03.\x05.\u0684\n.\x03.\x03.\x05.\u0688\n.\x03/\x03/\x06/\u068C" +
    "\n/\r/\x0E/\u068D\x030\x030\x050\u0692\n0\x030\x030\x030\x030\x070\u0698" +
    "\n0\f0\x0E0\u069B\v0\x030\x050\u069E\n0\x030\x050\u06A1\n0\x030\x050\u06A4" +
    "\n0\x030\x050\u06A7\n0\x030\x030\x050\u06AB\n0\x031\x031\x051\u06AF\n" +
    "1\x031\x071\u06B2\n1\f1\x0E1\u06B5\v1\x031\x051\u06B8\n1\x031\x051\u06BB" +
    "\n1\x031\x051\u06BE\n1\x031\x051\u06C1\n1\x031\x031\x051\u06C5\n1\x03" +
    "1\x071\u06C8\n1\f1\x0E1\u06CB\v1\x031\x051\u06CE\n1\x031\x051\u06D1\n" +
    "1\x031\x051\u06D4\n1\x031\x051\u06D7\n1\x051\u06D9\n1\x032\x032\x032\x03" +
    "2\x052\u06DF\n2\x032\x032\x032\x032\x032\x052\u06E6\n2\x032\x032\x032" +
    "\x052\u06EB\n2\x032\x052\u06EE\n2\x032\x052\u06F1\n2\x032\x032\x052\u06F5" +
    "\n2\x032\x032\x032\x032\x032\x032\x032\x032\x052\u06FF\n2\x032\x032\x05" +
    "2\u0703\n2\x052\u0705\n2\x032\x052\u0708\n2\x032\x032\x052\u070C\n2\x03" +
    "3\x033\x073\u0710\n3\f3\x0E3\u0713\v3\x033\x053\u0716\n3\x033\x033\x03" +
    "4\x034\x034\x035\x035\x035\x035\x055\u0721\n5\x035\x035\x035\x036\x03" +
    "6\x036\x036\x036\x056\u072B\n6\x036\x036\x036\x037\x037\x037\x037\x03" +
    "7\x037\x037\x057\u0737\n7\x038\x038\x038\x038\x038\x038\x038\x038\x03" +
    "8\x038\x038\x078\u0744\n8\f8\x0E8\u0747\v8\x038\x038\x058\u074B\n8\x03" +
    "9\x039\x039\x079\u0750\n9\f9\x0E9\u0753\v9\x03:\x03:\x03:\x03:\x03;\x03" +
    ";\x03;\x03<\x03<\x03<\x03=\x03=\x03=\x05=\u0762\n=\x03=\x07=\u0765\n=" +
    "\f=\x0E=\u0768\v=\x03=\x03=\x03>\x03>\x03>\x03>\x03>\x03>\x07>\u0772\n" +
    ">\f>\x0E>\u0775\v>\x03>\x03>\x05>\u0779\n>\x03?\x03?\x03?\x03?\x07?\u077F" +
    "\n?\f?\x0E?\u0782\v?\x03?\x07?\u0785\n?\f?\x0E?\u0788\v?\x03?\x05?\u078B" +
    "\n?\x03@\x03@\x03@\x03@\x03@\x07@\u0792\n@\f@\x0E@\u0795\v@\x03@\x03@" +
    "\x03@\x03@\x03@\x07@\u079C\n@\f@\x0E@\u079F\v@\x03@\x03@\x03@\x03@\x03" +
    "@\x03@\x03@\x03@\x03@\x03@\x07@\u07AB\n@\f@\x0E@\u07AE\v@\x03@\x03@\x05" +
    "@\u07B2\n@\x05@\u07B4\n@\x03A\x03A\x05A\u07B8\nA\x03B\x03B\x03B\x03B\x03" +
    "B\x07B\u07BF\nB\fB\x0EB\u07C2\vB\x03B\x03B\x03B\x03B\x03B\x03B\x03B\x03" +
    "B\x07B\u07CC\nB\fB\x0EB\u07CF\vB\x03B\x03B\x05B\u07D3\nB\x03C\x03C\x05" +
    "C\u07D7\nC\x03D\x03D\x03D\x03D\x07D\u07DD\nD\fD\x0ED\u07E0\vD\x05D\u07E2" +
    "\nD\x03D\x03D\x05D\u07E6\nD\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x03" +
    "E\x03E\x07E\u07F2\nE\fE\x0EE\u07F5\vE\x03E\x03E\x03E\x03F\x03F\x03F\x03" +
    "F\x03F\x07F\u07FF\nF\fF\x0EF\u0802\vF\x03F\x03F\x05F\u0806\nF\x03G\x03" +
    "G\x05G\u080A\nG\x03G\x05G\u080D\nG\x03H\x03H\x03H\x05H\u0812\nH\x03H\x03" +
    "H\x03H\x03H\x03H\x07H\u0819\nH\fH\x0EH\u081C\vH\x05H\u081E\nH\x03H\x03" +
    "H\x03H\x05H\u0823\nH\x03H\x03H\x03H\x07H\u0828\nH\fH\x0EH\u082B\vH\x05" +
    "H\u082D\nH\x03I\x03I\x03J\x05J\u0832\nJ\x03J\x03J\x07J\u0836\nJ\fJ\x0E" +
    "J\u0839\vJ\x03K\x03K\x03K\x05K\u083E\nK\x03K\x03K\x05K\u0842\nK\x03K\x03" +
    "K\x03K\x03K\x05K\u0848\nK\x03K\x03K\x05K\u084C\nK\x03L\x05L\u084F\nL\x03" +
    "L\x03L\x03L\x05L\u0854\nL\x03L\x05L\u0857\nL\x03L\x03L\x03L\x05L\u085C" +
    "\nL\x03L\x03L\x05L\u0860\nL\x03L\x05L\u0863\nL\x03L\x05L\u0866\nL\x03" +
    "M\x03M\x03M\x03M\x05M\u086C\nM\x03N\x03N\x03N\x05N\u0871\nN\x03N\x03N" +
    "\x03O\x05O\u0876\nO\x03O\x03O\x03O\x03O\x03O\x03O\x03O\x03O\x03O\x03O" +
    "\x03O\x03O\x03O\x03O\x03O\x03O\x05O\u0888\nO\x05O\u088A\nO\x03O\x05O\u088D" +
    "\nO\x03P\x03P\x03P\x03P\x03Q\x03Q\x03Q\x07Q\u0896\nQ\fQ\x0EQ\u0899\vQ" +
    "\x03R\x03R\x03R\x03R\x07R\u089F\nR\fR\x0ER\u08A2\vR\x03R\x03R\x03S\x03" +
    "S\x05S\u08A8\nS\x03T\x03T\x03T\x03T\x07T\u08AE\nT\fT\x0ET\u08B1\vT\x03" +
    "T\x03T\x03U\x03U\x05U\u08B7\nU\x03V\x03V\x05V\u08BB\nV\x03V\x03V\x03V" +
    "\x03V\x03V\x03V\x05V\u08C3\nV\x03V\x03V\x03V\x03V\x03V\x03V\x05V\u08CB" +
    "\nV\x03V\x03V\x03V\x03V\x05V\u08D1\nV\x03W\x03W\x03W\x03W\x07W\u08D7\n" +
    "W\fW\x0EW\u08DA\vW\x03W\x03W\x03X\x03X\x03X\x03X\x03X\x07X\u08E3\nX\f" +
    "X\x0EX\u08E6\vX\x05X\u08E8\nX\x03X\x03X\x03X\x03Y\x05Y\u08EE\nY\x03Y\x03" +
    "Y\x05Y\u08F2\nY\x05Y\u08F4\nY\x03Z\x03Z\x03Z\x03Z\x03Z\x03Z\x03Z\x05Z" +
    "\u08FD\nZ\x03Z\x03Z\x03Z\x03Z\x03Z\x03Z\x03Z\x03Z\x03Z\x03Z\x05Z\u0909" +
    "\nZ\x05Z\u090B\nZ\x03Z\x03Z\x03Z\x03Z\x03Z";
  private static readonly _serializedATNSegment1: string =
    "\x05Z\u0912\nZ\x03Z\x03Z\x03Z\x03Z\x03Z\x05Z\u0919\nZ\x03Z\x03Z\x03Z\x03" +
    "Z\x05Z\u091F\nZ\x03Z\x03Z\x03Z\x03Z\x05Z\u0925\nZ\x05Z\u0927\nZ\x03[\x03" +
    "[\x03[\x07[\u092C\n[\f[\x0E[\u092F\v[\x03\\\x03\\\x03\\\x07\\\u0934\n" +
    "\\\f\\\x0E\\\u0937\v\\\x03]\x03]\x03]\x05]\u093C\n]\x03]\x03]\x03^\x03" +
    "^\x03^\x05^\u0943\n^\x03^\x03^\x03_\x03_\x05_\u0949\n_\x03_\x03_\x05_" +
    "\u094D\n_\x05_\u094F\n_\x03`\x03`\x03`\x07`\u0954\n`\f`\x0E`\u0957\v`" +
    "\x03a\x03a\x03a\x03a\x07a\u095D\na\fa\x0Ea\u0960\va\x03a\x03a\x03b\x03" +
    "b\x05b\u0966\nb\x03c\x03c\x03c\x03c\x03c\x03c\x07c\u096E\nc\fc\x0Ec\u0971" +
    "\vc\x03c\x03c\x05c\u0975\nc\x03d\x03d\x05d\u0979\nd\x03e\x03e\x03f\x03" +
    "f\x03f\x07f\u0980\nf\ff\x0Ef\u0983\vf\x03g\x03g\x03g\x03g\x03g\x03g\x03" +
    "g\x03g\x03g\x03g\x05g\u098F\ng\x05g\u0991\ng\x03g\x03g\x03g\x03g\x03g" +
    "\x03g\x07g\u0999\ng\fg\x0Eg\u099C\vg\x03h\x05h\u099F\nh\x03h\x03h\x03" +
    "h\x03h\x03h\x03h\x05h\u09A7\nh\x03h\x03h\x03h\x03h\x03h\x07h\u09AE\nh" +
    "\fh\x0Eh\u09B1\vh\x03h\x03h\x03h\x05h\u09B6\nh\x03h\x03h\x03h\x03h\x03" +
    "h\x03h\x05h\u09BE\nh\x03h\x03h\x03h\x05h\u09C3\nh\x03h\x03h\x03h\x03h" +
    "\x03h\x03h\x03h\x03h\x07h\u09CD\nh\fh\x0Eh\u09D0\vh\x03h\x03h\x05h\u09D4" +
    "\nh\x03h\x05h\u09D7\nh\x03h\x03h\x03h\x03h\x05h\u09DD\nh\x03h\x03h\x05" +
    "h\u09E1\nh\x03h\x03h\x03h\x05h\u09E6\nh\x03h\x03h\x03h\x05h\u09EB\nh\x03" +
    "h\x03h\x03h\x05h\u09F0\nh\x03i\x03i\x03i\x03i\x05i\u09F6\ni\x03i\x03i" +
    "\x03i\x03i\x03i\x03i\x03i\x03i\x03i\x03i\x03i\x03i\x03i\x03i\x03i\x03" +
    "i\x03i\x03i\x03i\x07i\u0A0B\ni\fi\x0Ei\u0A0E\vi\x03j\x03j\x03j\x03j\x06" +
    "j\u0A14\nj\rj\x0Ej\u0A15\x03j\x03j\x05j\u0A1A\nj\x03j\x03j\x03j\x03j\x03" +
    "j\x06j\u0A21\nj\rj\x0Ej\u0A22\x03j\x03j\x05j\u0A27\nj\x03j\x03j\x03j\x03" +
    "j\x03j\x03j\x03j\x03j\x03j\x03j\x03j\x03j\x03j\x03j\x07j\u0A37\nj\fj\x0E" +
    "j\u0A3A\vj\x05j\u0A3C\nj\x03j\x03j\x03j\x03j\x03j\x03j\x05j\u0A44\nj\x03" +
    "j\x03j\x03j\x03j\x03j\x03j\x03j\x05j\u0A4D\nj\x03j\x03j\x03j\x03j\x03" +
    "j\x03j\x03j\x03j\x03j\x03j\x03j\x03j\x03j\x03j\x03j\x03j\x03j\x03j\x03" +
    "j\x06j\u0A62\nj\rj\x0Ej\u0A63\x03j\x03j\x03j\x03j\x03j\x03j\x03j\x03j" +
    "\x03j\x05j\u0A6F\nj\x03j\x03j\x03j\x07j\u0A74\nj\fj\x0Ej\u0A77\vj\x05" +
    "j\u0A79\nj\x03j\x03j\x03j\x03j\x03j\x03j\x03j\x05j\u0A82\nj\x03j\x03j" +
    "\x05j\u0A86\nj\x03j\x03j\x05j\u0A8A\nj\x03j\x03j\x03j\x03j\x03j\x03j\x03" +
    "j\x03j\x06j\u0A94\nj\rj\x0Ej\u0A95\x03j\x03j\x03j\x03j\x03j\x03j\x03j" +
    "\x03j\x03j\x03j\x03j\x03j\x03j\x03j\x03j\x03j\x03j\x03j\x03j\x03j\x03" +
    "j\x03j\x03j\x05j\u0AAF\nj\x03j\x03j\x03j\x03j\x03j\x05j\u0AB6\nj\x03j" +
    "\x05j\u0AB9\nj\x03j\x03j\x03j\x03j\x03j\x03j\x03j\x03j\x03j\x03j\x03j" +
    "\x03j\x03j\x05j\u0AC8\nj\x03j\x03j\x05j\u0ACC\nj\x03j\x03j\x03j\x03j\x03" +
    "j\x03j\x03j\x03j\x03j\x03j\x03j\x07j\u0AD9\nj\fj\x0Ej\u0ADC\vj\x03k\x03" +
    "k\x03k\x03k\x03k\x03k\x03k\x03k\x06k\u0AE6\nk\rk\x0Ek\u0AE7\x05k\u0AEA" +
    "\nk\x03l\x03l\x03m\x03m\x03n\x03n\x03o\x03o\x03p\x03p\x03p\x05p\u0AF7" +
    "\np\x03q\x03q\x05q\u0AFB\nq\x03r\x03r\x03r\x06r\u0B00\nr\rr\x0Er\u0B01" +
    "\x03s\x03s\x03s\x05s\u0B07\ns\x03t\x03t\x03t\x03t\x03t\x03u\x05u\u0B0F" +
    "\nu\x03u\x03u\x03v\x03v\x03v\x05v\u0B16\nv\x03w\x03w\x03w\x03w\x03w\x03" +
    "w\x03w\x03w\x03w\x03w\x03w\x03w\x03w\x03w\x03w\x05w\u0B27\nw\x03w\x03" +
    "w\x05w\u0B2B\nw\x03w\x03w\x03w\x03w\x05w\u0B31\nw\x03w\x03w\x03w\x03w" +
    "\x05w\u0B37\nw\x03w\x03w\x03w\x03w\x03w\x07w\u0B3E\nw\fw\x0Ew\u0B41\v" +
    "w\x03w\x05w\u0B44\nw\x05w\u0B46\nw\x03x\x03x\x03x\x07x\u0B4B\nx\fx\x0E" +
    "x\u0B4E\vx\x03y\x03y\x03y\x03y\x05y\u0B54\ny\x03y\x05y\u0B57\ny\x03y\x05" +
    "y\u0B5A\ny\x03z\x03z\x03z\x07z\u0B5F\nz\fz\x0Ez\u0B62\vz\x03{\x03{\x03" +
    "{\x03{\x05{\u0B68\n{\x03{\x05{\u0B6B\n{\x03|\x03|\x03|\x07|\u0B70\n|\f" +
    "|\x0E|\u0B73\v|\x03}\x03}\x05}\u0B77\n}\x03}\x03}\x03}\x05}\u0B7C\n}\x03" +
    "}\x05}\u0B7F\n}\x03~\x03~\x03~\x03~\x03~\x03\x7F\x03\x7F\x03\x7F\x03\x7F" +
    "\x07\x7F\u0B8A\n\x7F\f\x7F\x0E\x7F\u0B8D\v\x7F\x03\x80\x03\x80\x03\x80" +
    "\x03\x80\x03\x81\x03\x81\x03\x81\x03\x81\x03\x81\x03\x81\x03\x81\x03\x81" +
    "\x03\x81\x03\x81\x03\x81\x07\x81\u0B9E\n\x81\f\x81\x0E\x81\u0BA1\v\x81" +
    "\x03\x81\x03\x81\x03\x81\x03\x81\x03\x81\x07\x81\u0BA8\n\x81\f\x81\x0E" +
    "\x81\u0BAB\v\x81\x05\x81\u0BAD\n\x81\x03\x81\x03\x81\x03\x81\x03\x81\x03" +
    "\x81\x07\x81\u0BB4\n\x81\f\x81\x0E\x81\u0BB7\v\x81\x05\x81\u0BB9\n\x81" +
    "\x05\x81\u0BBB\n\x81\x03\x81\x05\x81\u0BBE\n\x81\x03\x81\x05\x81\u0BC1" +
    "\n\x81\x03\x82\x03\x82\x03\x82\x03\x82\x03\x82\x03\x82\x03\x82\x03\x82" +
    "\x03\x82\x03\x82\x03\x82\x03\x82\x03\x82\x03\x82\x03\x82\x03\x82\x05\x82" +
    "\u0BD3\n\x82\x03\x83\x03\x83\x03\x83\x03\x83\x03\x83\x03\x83\x03\x83\x05" +
    "\x83\u0BDC\n\x83\x03\x84\x03\x84\x03\x84\x07\x84\u0BE1\n\x84\f\x84\x0E" +
    "\x84\u0BE4\v\x84\x03\x85\x03\x85\x03\x85\x03\x85\x05\x85\u0BEA\n\x85\x03" +
    "\x86\x03\x86\x03\x86\x07\x86\u0BEF\n\x86\f\x86\x0E\x86\u0BF2\v\x86\x03" +
    "\x87\x03\x87\x03\x87\x03\x88\x03\x88\x06\x88\u0BF9\n\x88\r\x88\x0E\x88" +
    "\u0BFA\x03\x88\x05\x88\u0BFE\n\x88\x03\x89\x03\x89\x03\x89\x05\x89\u0C03" +
    "\n\x89\x03\x8A\x03\x8A\x03\x8A\x03\x8A\x03\x8A\x03\x8A\x05\x8A\u0C0B\n" +
    "\x8A\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x05\x8B\u0C11\n\x8B\x03\x8C\x03\x8C" +
    "\x05\x8C\u0C15\n\x8C\x03\x8C\x03\x8C\x03\x8C\x05\x8C\u0C1A\n\x8C\x03\x8C" +
    "\x03\x8C\x03\x8C\x05\x8C\u0C1F\n\x8C\x03\x8C\x03\x8C\x05\x8C\u0C23\n\x8C" +
    "\x03\x8C\x03\x8C\x05\x8C\u0C27\n\x8C\x03\x8C\x03\x8C\x05\x8C\u0C2B\n\x8C" +
    "\x03\x8C\x03\x8C\x05\x8C\u0C2F\n\x8C\x03\x8C\x03\x8C\x05\x8C\u0C33\n\x8C" +
    "\x03\x8C\x03\x8C\x05\x8C\u0C37\n\x8C\x03\x8C\x03\x8C\x05\x8C\u0C3B\n\x8C" +
    "\x03\x8C\x05\x8C\u0C3E\n\x8C\x03\x8D\x03\x8D\x03\x8D\x03\x8D\x03\x8D\x03" +
    "\x8D\x03\x8D\x05\x8D\u0C47\n\x8D\x03\x8E\x03\x8E\x03\x8F\x03\x8F\x03\x90" +
    "\x03\x90\x03\x90\v\u038F\u03D0\u03D8\u03E9\u03F7\u0400\u0409\u0412\u0419" +
    "\x02\x06V\xCC\xD0\xD2\x91\x02\x02\x04\x02\x06\x02\b\x02\n\x02\f\x02\x0E" +
    "\x02\x10\x02\x12\x02\x14\x02\x16\x02\x18\x02\x1A\x02\x1C\x02\x1E\x02 " +
    '\x02"\x02$\x02&\x02(\x02*\x02,\x02.\x020\x022\x024\x026\x028\x02:\x02' +
    "<\x02>\x02@\x02B\x02D\x02F\x02H\x02J\x02L\x02N\x02P\x02R\x02T\x02V\x02" +
    "X\x02Z\x02\\\x02^\x02`\x02b\x02d\x02f\x02h\x02j\x02l\x02n\x02p\x02r\x02" +
    "t\x02v\x02x\x02z\x02|\x02~\x02\x80\x02\x82\x02\x84\x02\x86\x02\x88\x02" +
    "\x8A\x02\x8C\x02\x8E\x02\x90\x02\x92\x02\x94\x02\x96\x02\x98\x02\x9A\x02" +
    "\x9C\x02\x9E\x02\xA0\x02\xA2\x02\xA4\x02\xA6\x02\xA8\x02\xAA\x02\xAC\x02" +
    "\xAE\x02\xB0\x02\xB2\x02\xB4\x02\xB6\x02\xB8\x02\xBA\x02\xBC\x02\xBE\x02" +
    "\xC0\x02\xC2\x02\xC4\x02\xC6\x02\xC8\x02\xCA\x02\xCC\x02\xCE\x02\xD0\x02" +
    "\xD2\x02\xD4\x02\xD6\x02\xD8\x02\xDA\x02\xDC\x02\xDE\x02\xE0\x02\xE2\x02" +
    "\xE4\x02\xE6\x02\xE8\x02\xEA\x02\xEC\x02\xEE\x02\xF0\x02\xF2\x02\xF4\x02" +
    "\xF6\x02\xF8\x02\xFA\x02\xFC\x02\xFE\x02\u0100\x02\u0102\x02\u0104\x02" +
    "\u0106\x02\u0108\x02\u010A\x02\u010C\x02\u010E\x02\u0110\x02\u0112\x02" +
    "\u0114\x02\u0116\x02\u0118\x02\u011A\x02\u011C\x02\u011E\x02\x025\x04" +
    '\x02CC\xB7\xB7\x04\x02""\xC6\xC6\x04\x02BB\x99\x99\x04\x02ggtt\x03\x02' +
    "-.\x04\x02\xE8\xE8\u0108\u0108\x04\x02\x11\x11%%\x07\x02**66YYff\x90\x90" +
    "\x03\x02GH\x04\x02YYff\x04\x02\x9D\x9D\u0123\u0123\x05\x02\x0E\x0EOO\xE7" +
    "\xE7\x04\x02\x0E\x0E\x8A\x8A\x04\x02\x8C\x8C\u0123\u0123\x05\x02AA\x98" +
    "\x98\xD1\xD1\x06\x02TT{{\xD9\xD9\xFE\xFE\x05\x02TT\xD9\xD9\xFE\xFE\x04" +
    "\x02\x19\x19GG\x04\x02aa\x82\x82\x04\x0299\xCD\xCD\x04\x02\x10\x10LL\x04" +
    "\x02\u0127\u0127\u0129\u0129\x05\x02\x10\x10\x15\x15\xDD\xDD\x05\x02\\" +
    "\\\xF7\xF7\u0100\u0100\x04\x02\u0118\u0119\u011D\u011D\x04\x02NN\u011A" +
    "\u011C\x04\x02\u0118\u0119\u0120\u0120\x04\x02;;=>\x04\x02$$\xF9\xF9\x04" +
    "\x02rr\xC5\xC5\x03\x02\xE5\xE6\x04\x02\x06\x06gg\x04\x02\x06\x06cc\x05" +
    "\x02\x1D\x1D\x85\x85\xF2\xF2\x03\x02\u0110\u0117\x04\x02NN\u0118\u0121" +
    "\x06\x02\x13\x13tt\x9C\x9C\xA4\xA4\x04\x02\\\\\xF7\xF7\x03\x02\u0118\u0119" +
    "\x05\x02\u0123\u0123\u0127\u0127\u0129\u0129\x04\x02\x96\x96\u010E\u010E" +
    "\x06\x02??pp\x95\x95\xD0\xD0\x05\x02pp\x95\x95\xD0\xD0\x04\x02MM\xAD\xAD" +
    "\x04\x02\xA5\xA5\xDE\xDE\x04\x02bb\xB4\xB4\x03\x02\u0128\u0129\x04\x02" +
    'OO\xD8\xD83\x02\x0E\x0F\x11\x12\x14\x14\x16\x17\x19\x1A\x1C\x1C\x1E"' +
    "%%'*,,.4669:?KMOSSU[^^`befiknnpsuvxz||\x7F\x7F\x81\x82\x84\x84\x87\x99" +
    "\x9B\x9B\x9E\x9F\xA2\xA3\xA6\xA6\xA8\xA9\xAB\xB4\xB6\xBE\xC0\xC7\xC9\xD1" +
    "\xD3\xD6\xD8\xDC\xDE\xE7\xE9\xED\xF1\xF1\xF3\xFD\u0101\u0104\u0107\u0109" +
    "\u010C\u010C\u010E\u010F\x12\x02\x14\x1488TThhww{{\x80\x80\x83\x83\x86" +
    "\x86\x9A\x9A\xA0\xA0\xC8\xC8\xD3\xD3\xD9\xD9\xFE\xFE\u0106\u0106\x13\x02" +
    "\x0E\x13\x1579SUgivxz|\x7F\x81\x82\x84\x85\x87\x99\x9B\x9F\xA1\xC7\xC9" +
    "\xD2\xD4\xD8\xDA\xFD\xFF\u0105\u0107\u010F\x02\u0E3A\x02\u0120\x03\x02" +
    "\x02\x02\x04\u0129\x03\x02\x02\x02\x06\u012C\x03\x02\x02\x02\b\u012F\x03" +
    "\x02\x02\x02\n\u0132\x03\x02\x02\x02\f\u0135\x03\x02\x02\x02\x0E\u0138" +
    "\x03\x02\x02\x02\x10\u041C\x03\x02\x02\x02\x12\u041E\x03\x02\x02\x02\x14" +
    "\u0420\x03\x02\x02\x02\x16\u04CA\x03\x02\x02\x02\x18\u04CC\x03\x02\x02" +
    "\x02\x1A\u04DD\x03\x02\x02\x02\x1C\u04E3\x03\x02\x02\x02\x1E\u04EF\x03" +
    '\x02\x02\x02 \u04FC\x03\x02\x02\x02"\u04FF\x03\x02\x02\x02$\u0503\x03' +
    "\x02\x02\x02&\u0545\x03\x02\x02\x02(\u0547\x03\x02\x02\x02*\u054B\x03" +
    "\x02\x02\x02,\u0557\x03\x02\x02\x02.\u055C\x03\x02\x02\x020\u0563\x03" +
    "\x02\x02\x022\u0565\x03\x02\x02\x024\u056D\x03\x02\x02\x026\u0576\x03" +
    "\x02\x02\x028\u0581\x03\x02\x02\x02:\u0593\x03\x02\x02\x02<\u0596\x03" +
    "\x02\x02\x02>\u05A1\x03\x02\x02\x02@\u05B1\x03\x02\x02\x02B\u05B7\x03" +
    "\x02\x02\x02D\u05B9\x03\x02\x02\x02F\u05C4\x03\x02\x02\x02H\u05D5\x03" +
    "\x02\x02\x02J\u05DC\x03\x02\x02\x02L\u05DE\x03\x02\x02\x02N\u05E4\x03" +
    "\x02\x02\x02P\u061A\x03\x02\x02\x02R\u0626\x03\x02\x02\x02T\u0656\x03" +
    "\x02\x02\x02V\u0659\x03\x02\x02\x02X\u067F\x03\x02\x02\x02Z\u0681\x03" +
    "\x02\x02\x02\\\u0689\x03\x02\x02\x02^\u06AA\x03\x02\x02\x02`\u06D8\x03" +
    "\x02\x02\x02b\u06ED\x03\x02\x02\x02d\u070D\x03\x02\x02\x02f\u0719\x03" +
    "\x02\x02\x02h\u071C\x03\x02\x02\x02j\u0725\x03\x02\x02\x02l\u0736\x03" +
    "\x02\x02\x02n\u074A\x03\x02\x02\x02p\u074C\x03\x02\x02\x02r\u0754\x03" +
    "\x02\x02\x02t\u0758\x03\x02\x02\x02v\u075B\x03\x02\x02\x02x\u075E\x03" +
    "\x02\x02\x02z\u0778\x03\x02\x02\x02|\u077A\x03\x02\x02\x02~\u07B3\x03" +
    "\x02\x02\x02\x80\u07B7\x03\x02\x02\x02\x82\u07D2\x03\x02\x02\x02\x84\u07D6" +
    "\x03\x02\x02\x02\x86\u07E5\x03\x02\x02\x02\x88\u07E7\x03\x02\x02\x02\x8A" +
    "\u0805\x03\x02\x02\x02\x8C\u0807\x03\x02\x02\x02\x8E\u080E\x03\x02\x02" +
    "\x02\x90\u082E\x03\x02\x02\x02\x92\u0831\x03\x02\x02\x02\x94\u084B\x03" +
    "\x02\x02\x02\x96\u0865\x03\x02\x02\x02\x98\u086B\x03\x02\x02\x02\x9A\u086D" +
    "\x03\x02\x02\x02\x9C\u088C\x03\x02\x02\x02\x9E\u088E\x03\x02\x02\x02\xA0" +
    "\u0892\x03\x02\x02\x02\xA2\u089A\x03\x02\x02\x02\xA4\u08A5\x03\x02\x02" +
    "\x02\xA6\u08A9\x03\x02\x02\x02\xA8\u08B4\x03\x02\x02\x02\xAA\u08D0\x03" +
    "\x02\x02\x02\xAC\u08D2\x03\x02\x02\x02\xAE\u08DD\x03\x02\x02\x02\xB0\u08F3" +
    "\x03\x02\x02\x02\xB2\u0926\x03\x02\x02\x02\xB4\u0928\x03\x02\x02\x02\xB6" +
    "\u0930\x03\x02\x02\x02\xB8\u093B\x03\x02\x02\x02\xBA\u0942\x03\x02\x02" +
    "\x02\xBC\u0946\x03\x02\x02\x02\xBE\u0950\x03\x02\x02\x02\xC0\u0958\x03" +
    "\x02\x02\x02\xC2\u0965\x03\x02\x02\x02\xC4\u0974\x03\x02\x02\x02\xC6\u0978" +
    "\x03\x02\x02\x02\xC8\u097A\x03\x02\x02\x02\xCA\u097C\x03\x02\x02\x02\xCC" +
    "\u0990\x03\x02\x02\x02\xCE\u09EF\x03\x02\x02\x02\xD0\u09F5\x03\x02\x02" +
    "\x02\xD2\u0ACB\x03\x02\x02\x02\xD4\u0AE9\x03\x02\x02\x02\xD6\u0AEB\x03" +
    "\x02\x02\x02\xD8\u0AED\x03\x02\x02\x02\xDA\u0AEF\x03\x02\x02\x02\xDC\u0AF1" +
    "\x03\x02\x02\x02\xDE\u0AF3\x03\x02\x02\x02\xE0\u0AF8\x03\x02\x02\x02\xE2" +
    "\u0AFF\x03\x02\x02\x02\xE4\u0B03\x03\x02\x02\x02\xE6\u0B08\x03\x02\x02" +
    "\x02\xE8\u0B0E\x03\x02\x02\x02\xEA\u0B15\x03\x02\x02\x02\xEC\u0B45\x03" +
    "\x02\x02\x02\xEE\u0B47\x03\x02\x02\x02\xF0\u0B4F\x03\x02\x02\x02\xF2\u0B5B" +
    "\x03\x02\x02\x02\xF4\u0B63\x03\x02\x02\x02\xF6\u0B6C\x03\x02\x02\x02\xF8" +
    "\u0B74\x03\x02\x02\x02\xFA\u0B80\x03\x02\x02\x02\xFC\u0B85\x03\x02\x02" +
    "\x02\xFE\u0B8E\x03\x02\x02\x02\u0100\u0BC0\x03\x02\x02\x02\u0102\u0BD2" +
    "\x03\x02\x02\x02\u0104\u0BDB\x03\x02\x02\x02\u0106\u0BDD\x03\x02\x02\x02" +
    "\u0108\u0BE9\x03\x02\x02\x02\u010A\u0BEB\x03\x02\x02\x02\u010C\u0BF3\x03" +
    "\x02\x02\x02\u010E\u0BFD\x03\x02\x02\x02\u0110\u0C02\x03\x02\x02\x02\u0112" +
    "\u0C0A\x03\x02\x02\x02\u0114\u0C10\x03\x02\x02\x02\u0116\u0C3D\x03\x02" +
    "\x02\x02\u0118\u0C46\x03\x02\x02\x02\u011A\u0C48\x03\x02\x02\x02\u011C" +
    "\u0C4A\x03\x02\x02\x02\u011E\u0C4C\x03\x02\x02\x02\u0120\u0124\x05\x10" +
    "\t\x02\u0121\u0123\x07\x03\x02\x02\u0122\u0121\x03\x02\x02\x02\u0123\u0126" +
    "\x03\x02\x02\x02\u0124\u0122\x03\x02\x02\x02\u0124\u0125\x03\x02\x02\x02" +
    "\u0125\u0127\x03\x02\x02\x02\u0126\u0124\x03\x02\x02\x02\u0127\u0128\x07" +
    "\x02\x02\x03\u0128\x03\x03\x02\x02\x02\u0129\u012A\x05\xBC_\x02\u012A" +
    "\u012B\x07\x02\x02\x03\u012B\x05\x03\x02\x02\x02\u012C\u012D\x05\xB8]" +
    "\x02\u012D\u012E\x07\x02\x02\x03\u012E\x07\x03\x02\x02\x02\u012F\u0130" +
    "\x05\xB6\\\x02\u0130\u0131\x07\x02\x02\x03\u0131\t\x03\x02\x02\x02\u0132" +
    "\u0133\x05\xBA^\x02\u0133\u0134\x07\x02\x02\x03\u0134\v\x03\x02\x02\x02" +
    "\u0135\u0136\x05\xECw\x02\u0136\u0137\x07\x02\x02\x03\u0137\r\x03\x02" +
    "\x02\x02\u0138\u0139\x05\xF2z\x02\u0139\u013A\x07\x02\x02\x03\u013A\x0F" +
    "\x03\x02\x02\x02\u013B\u041D\x05$\x13\x02\u013C\u013E\x054\x1B\x02\u013D" +
    "\u013C\x03\x02\x02\x02\u013D\u013E\x03\x02\x02\x02\u013E\u013F\x03\x02" +
    "\x02\x02\u013F\u041D\x05P)\x02\u0140\u0142\x07\u0104\x02\x02\u0141\u0143" +
    "\x07\x98\x02\x02\u0142\u0141\x03\x02\x02\x02\u0142\u0143\x03\x02\x02\x02" +
    "\u0143\u0144\x03\x02\x02\x02\u0144\u041D\x05\xB6\\\x02\u0145\u0146\x07" +
    "7\x02\x02\u0146\u014A\x05.\x18\x02\u0147\u0148\x07q\x02\x02\u0148\u0149" +
    "\x07\x9C\x02\x02\u0149\u014B\x07V\x02\x02\u014A\u0147\x03\x02\x02\x02" +
    "\u014A\u014B\x03\x02\x02\x02\u014B\u014C\x03\x02\x02\x02\u014C\u0154\x05" +
    '\xB6\\\x02\u014D\u0153\x05"\x12\x02\u014E\u0153\x05 \x11\x02\u014F\u0150' +
    "\x07\u010D\x02\x02\u0150\u0151\t\x02\x02\x02\u0151\u0153\x05<\x1F\x02" +
    "\u0152\u014D\x03\x02\x02\x02\u0152\u014E\x03\x02\x02\x02\u0152\u014F\x03" +
    "\x02\x02\x02\u0153\u0156\x03\x02\x02\x02\u0154\u0152\x03\x02\x02\x02\u0154" +
    "\u0155\x03\x02\x02\x02\u0155\u041D\x03\x02\x02\x02\u0156\u0154\x03\x02" +
    "\x02\x02\u0157\u0158\x07\x11\x02\x02\u0158\u0159\x05.\x18\x02\u0159\u015A" +
    "\x05\xB6\\\x02\u015A\u015B\x07\xD8\x02\x02\u015B\u015C\t\x02\x02\x02\u015C" +
    "\u015D\x05<\x1F\x02\u015D\u041D\x03\x02\x02\x02\u015E\u015F\x07\x11\x02" +
    "\x02\u015F\u0160\x05.\x18\x02\u0160\u0161\x05\xB6\\\x02\u0161\u0162\x07" +
    "\xD8\x02\x02\u0162\u0163\x05 \x11\x02\u0163\u041D\x03\x02\x02\x02\u0164" +
    "\u0165\x07O\x02\x02\u0165\u0168\x05.\x18\x02\u0166\u0167\x07q\x02\x02" +
    "\u0167\u0169\x07V\x02\x02\u0168\u0166\x03\x02\x02\x02\u0168\u0169\x03" +
    "\x02\x02\x02\u0169\u016A\x03\x02\x02\x02\u016A\u016C\x05\xB6\\\x02\u016B" +
    "\u016D\t\x03\x02\x02\u016C\u016B\x03\x02\x02\x02\u016C\u016D\x03\x02\x02" +
    "\x02\u016D\u041D\x03\x02\x02\x02\u016E\u016F\x07\xDB\x02\x02\u016F\u0172" +
    "\t\x04\x02\x02\u0170\u0171\t\x05\x02\x02\u0171\u0173\x05\xB6\\\x02\u0172" +
    "\u0170\x03\x02\x02\x02\u0172\u0173\x03\x02\x02\x02\u0173\u0178\x03\x02" +
    "\x02\x02\u0174\u0176\x07\x87\x02\x02\u0175\u0174\x03\x02\x02\x02\u0175" +
    "\u0176\x03\x02\x02\x02\u0176\u0177\x03\x02\x02\x02\u0177\u0179\x07\u0123" +
    "\x02\x02\u0178\u0175\x03\x02\x02\x02\u0178\u0179\x03\x02\x02\x02\u0179" +
    "\u041D\x03\x02\x02\x02\u017A\u017F\x05\x18\r\x02\u017B\u017C\x07\x04\x02" +
    "\x02\u017C\u017D\x05\xF2z\x02\u017D\u017E\x07\x05\x02\x02\u017E\u0180" +
    "\x03\x02\x02\x02\u017F\u017B\x03\x02\x02\x02\u017F\u0180\x03\x02\x02\x02" +
    "\u0180\u0182\x03\x02\x02\x02\u0181\u0183\x058\x1D\x02\u0182\u0181\x03" +
    "\x02\x02\x02\u0182\u0183\x03\x02\x02\x02\u0183\u0184\x03\x02\x02\x02\u0184" +
    "\u0189\x05:\x1E\x02\u0185\u0187\x07\x18\x02\x02\u0186\u0185\x03\x02\x02" +
    "\x02\u0186\u0187\x03\x02\x02\x02\u0187\u0188\x03\x02\x02\x02\u0188\u018A" +
    "\x05$\x13\x02\u0189\u0186\x03\x02\x02\x02\u0189\u018A\x03\x02\x02\x02" +
    "\u018A\u041D\x03\x02\x02\x02\u018B\u018C\x077\x02\x02\u018C\u0190\x07" +
    "\xE8\x02\x02\u018D\u018E\x07q\x02\x02\u018E\u018F\x07\x9C\x02\x02\u018F" +
    "\u0191\x07V\x02\x02\u0190\u018D\x03\x02\x02\x02\u0190\u0191\x03\x02\x02" +
    "\x02\u0191\u0192\x03\x02\x02\x02\u0192\u0193\x05\xB8]\x02\u0193\u0194" +
    "\x07\x87\x02\x02\u0194\u019D\x05\xB8]\x02\u0195\u019C\x058\x1D\x02\u0196" +
    "\u019C\x05\xB2Z\x02\u0197\u019C\x05H%\x02\u0198\u019C\x05 \x11\x02\u0199" +
    "\u019A\x07\xEB\x02\x02\u019A\u019C\x05<\x1F\x02\u019B\u0195\x03\x02\x02" +
    "\x02\u019B\u0196\x03\x02\x02\x02\u019B\u0197\x03\x02\x02\x02\u019B\u0198" +
    "\x03\x02\x02\x02\u019B\u0199\x03\x02\x02\x02\u019C\u019F\x03\x02\x02\x02" +
    "\u019D\u019B\x03\x02\x02\x02\u019D\u019E\x03\x02\x02\x02\u019E\u041D\x03" +
    "\x02\x02\x02\u019F\u019D\x03\x02\x02\x02\u01A0\u01A5\x05\x1A\x0E\x02\u01A1" +
    "\u01A2\x07\x04\x02\x02\u01A2\u01A3\x05\xF2z\x02\u01A3\u01A4\x07\x05\x02" +
    "\x02\u01A4\u01A6\x03\x02\x02\x02\u01A5\u01A1\x03\x02\x02\x02\u01A5\u01A6" +
    "\x03\x02\x02\x02\u01A6\u01A8\x03\x02\x02\x02\u01A7\u01A9\x058\x1D\x02" +
    "\u01A8\u01A7\x03\x02\x02\x02\u01A8\u01A9\x03\x02\x02\x02\u01A9\u01AA\x03" +
    "\x02\x02\x02\u01AA\u01AF\x05:\x1E\x02\u01AB\u01AD\x07\x18\x02\x02\u01AC" +
    "\u01AB\x03\x02\x02\x02\u01AC\u01AD\x03\x02\x02\x02\u01AD\u01AE\x03\x02" +
    "\x02\x02\u01AE\u01B0\x05$\x13\x02\u01AF\u01AC\x03\x02\x02\x02\u01AF\u01B0" +
    "\x03\x02\x02\x02\u01B0\u041D\x03\x02\x02\x02\u01B1\u01B2\x07\x12\x02\x02" +
    "\u01B2\u01B3\x07\xE8\x02\x02\u01B3\u01B5\x05\xB6\\\x02\u01B4\u01B6\x05" +
    "*\x16\x02\u01B5\u01B4\x03\x02\x02\x02\u01B5\u01B6\x03\x02\x02\x02\u01B6" +
    "\u01B7\x03\x02\x02\x02\u01B7\u01B8\x073\x02\x02\u01B8\u01C0\x07\xE1\x02" +
    "\x02\u01B9\u01C1\x05\u0110\x89\x02\u01BA\u01BB\x07c\x02\x02\u01BB\u01BC" +
    "\x07.\x02\x02\u01BC\u01C1\x05\xA0Q\x02\u01BD\u01BE\x07c\x02\x02\u01BE" +
    "\u01BF\x07\x10\x02\x02\u01BF\u01C1\x07.\x02\x02\u01C0\u01B9\x03\x02\x02" +
    "\x02\u01C0\u01BA\x03\x02\x02\x02\u01C0\u01BD\x03\x02\x02\x02\u01C0\u01C1" +
    "\x03\x02\x02\x02\u01C1\u041D\x03\x02\x02\x02\u01C2\u01C3\x07\x12\x02\x02" +
    "\u01C3\u01C6\x07\xE9\x02\x02\u01C4\u01C5\t\x05\x02\x02\u01C5\u01C7\x05" +
    "\xB6\\\x02\u01C6\u01C4\x03\x02\x02\x02\u01C6\u01C7\x03\x02\x02\x02\u01C7" +
    "\u01C8\x03\x02\x02\x02\u01C8\u01C9\x073\x02\x02\u01C9\u01CB\x07\xE1\x02" +
    "\x02\u01CA\u01CC\x05\u0110\x89\x02\u01CB\u01CA\x03\x02\x02\x02\u01CB\u01CC" +
    "\x03\x02\x02\x02\u01CC\u041D\x03\x02\x02\x02\u01CD\u01CE\x07\x11\x02\x02" +
    "\u01CE\u01CF\x07\xE8\x02\x02\u01CF\u01D0\x05\xB6\\\x02\u01D0\u01D1\x07" +
    "\x0E\x02\x02\u01D1\u01D2\t\x06\x02\x02\u01D2\u01D3\x05\xEEx\x02\u01D3" +
    "\u041D\x03\x02\x02\x02\u01D4\u01D5\x07\x11\x02\x02\u01D5\u01D6\x07\xE8" +
    "\x02\x02\u01D6\u01D7\x05\xB6\\\x02\u01D7\u01D8\x07\x0E\x02\x02\u01D8\u01D9" +
    "\t\x06\x02\x02\u01D9\u01DA\x07\x04\x02\x02\u01DA\u01DB\x05\xEEx\x02\u01DB" +
    "\u01DC\x07\x05\x02\x02\u01DC\u041D\x03\x02\x02\x02\u01DD\u01DE\x07\x11" +
    "\x02\x02\u01DE\u01DF\x07\xE8\x02\x02\u01DF\u01E0\x05\xB6\\\x02\u01E0\u01E1" +
    "\x07\xC1\x02\x02\u01E1\u01E2\x07-\x02\x02\u01E2\u01E3\x05\xB6\\\x02\u01E3" +
    "\u01E4\x07\xF0\x02\x02\u01E4\u01E5\x05\u010C\x87\x02\u01E5\u041D\x03\x02" +
    "\x02\x02\u01E6\u01E7\x07\x11\x02\x02\u01E7\u01E8\x07\xE8\x02\x02\u01E8" +
    "\u01E9\x05\xB6\\\x02\u01E9\u01EA\x07O\x02\x02\u01EA\u01EB\t\x06\x02\x02" +
    "\u01EB\u01EC\x07\x04\x02\x02\u01EC\u01ED\x05\xB4[\x02\u01ED\u01EE\x07" +
    "\x05\x02\x02\u01EE\u041D\x03\x02\x02\x02\u01EF\u01F0\x07\x11\x02\x02\u01F0" +
    "\u01F1\x07\xE8\x02\x02\u01F1\u01F2\x05\xB6\\\x02\u01F2\u01F3\x07O\x02" +
    "\x02\u01F3\u01F4\t\x06\x02\x02\u01F4\u01F5\x05\xB4[\x02\u01F5\u041D\x03" +
    "\x02\x02\x02\u01F6\u01F7\x07\x11\x02\x02\u01F7\u01F8\t\x07\x02\x02\u01F8" +
    "\u01F9\x05\xB6\\\x02\u01F9\u01FA\x07\xC1\x02\x02\u01FA\u01FB\x07\xF0\x02" +
    "\x02\u01FB\u01FC\x05\xB6\\\x02\u01FC\u041D\x03\x02\x02\x02\u01FD\u01FE" +
    "\x07\x11\x02\x02\u01FE\u01FF\t\x07\x02\x02\u01FF\u0200\x05\xB6\\\x02\u0200" +
    "\u0201\x07\xD8\x02\x02\u0201\u0202\x07\xEB\x02\x02";
  private static readonly _serializedATNSegment2: string =
    "\u0202\u0203\x05<\x1F\x02\u0203\u041D\x03\x02\x02\x02\u0204\u0205\x07" +
    "\x11\x02\x02\u0205\u0206\t\x07\x02\x02\u0206\u0207\x05\xB6\\\x02\u0207" +
    "\u0208\x07\u0102\x02\x02\u0208\u020B\x07\xEB\x02\x02\u0209\u020A\x07q" +
    "\x02\x02\u020A\u020C\x07V\x02\x02\u020B\u0209\x03\x02\x02\x02\u020B\u020C" +
    "\x03\x02\x02\x02\u020C\u020D\x03\x02\x02\x02\u020D\u020E\x05<\x1F\x02" +
    "\u020E\u041D\x03\x02\x02\x02\u020F\u0210\x07\x11\x02\x02\u0210\u0211\x07" +
    "\xE8\x02\x02\u0211\u0212\x05\xB6\\\x02\u0212\u0214\t\b\x02\x02\u0213\u0215" +
    "\x07-\x02\x02\u0214\u0213\x03\x02\x02\x02\u0214\u0215\x03\x02\x02\x02" +
    "\u0215\u0216\x03\x02\x02\x02\u0216\u0218\x05\xB6\\\x02\u0217\u0219\x05" +
    "\u0118\x8D\x02\u0218\u0217\x03\x02\x02\x02\u0218\u0219\x03\x02\x02\x02" +
    "\u0219\u041D\x03\x02\x02\x02\u021A\u021B\x07\x11\x02\x02\u021B\u021C\x07" +
    "\xE8\x02\x02\u021C\u021E\x05\xB6\\\x02\u021D\u021F\x05*\x16\x02\u021E" +
    "\u021D\x03\x02\x02\x02\u021E\u021F\x03\x02\x02\x02\u021F\u0220\x03\x02" +
    "\x02\x02\u0220\u0222\x07%\x02\x02\u0221\u0223\x07-\x02\x02\u0222\u0221" +
    "\x03\x02\x02\x02\u0222\u0223\x03\x02\x02\x02\u0223\u0224\x03\x02\x02\x02" +
    "\u0224\u0225\x05\xB6\\\x02\u0225\u0227\x05\xF4{\x02\u0226\u0228\x05\xEA" +
    "v\x02\u0227\u0226\x03\x02\x02\x02\u0227\u0228\x03\x02\x02\x02\u0228\u041D" +
    "\x03\x02\x02\x02\u0229\u022A\x07\x11\x02\x02\u022A\u022B\x07\xE8\x02\x02" +
    "\u022B\u022D\x05\xB6\\\x02\u022C\u022E\x05*\x16\x02\u022D\u022C\x03\x02" +
    "\x02\x02\u022D\u022E\x03\x02\x02\x02\u022E\u022F\x03\x02\x02\x02\u022F" +
    "\u0230\x07\xC3\x02\x02\u0230\u0231\x07.\x02\x02\u0231\u0232\x07\x04\x02" +
    "\x02\u0232\u0233\x05\xEEx\x02\u0233\u0234\x07\x05\x02\x02\u0234\u041D" +
    "\x03\x02\x02\x02\u0235\u0236\x07\x11\x02\x02\u0236\u0237\x07\xE8\x02\x02" +
    "\u0237\u0239\x05\xB6\\\x02\u0238\u023A\x05*\x16\x02\u0239\u0238\x03\x02" +
    "\x02\x02\u0239\u023A\x03\x02\x02\x02\u023A\u023B\x03\x02\x02\x02\u023B" +
    "\u023C\x07\xD8\x02\x02\u023C\u023D\x07\xD5\x02\x02\u023D\u0241\x07\u0123" +
    "\x02\x02\u023E\u023F\x07\u010D\x02\x02\u023F\u0240\x07\xD6\x02\x02\u0240" +
    "\u0242\x05<\x1F\x02\u0241\u023E\x03\x02\x02\x02\u0241\u0242\x03\x02\x02" +
    "\x02\u0242\u041D\x03\x02\x02\x02\u0243\u0244\x07\x11\x02\x02\u0244\u0245" +
    "\x07\xE8\x02\x02\u0245\u0247\x05\xB6\\\x02\u0246\u0248\x05*\x16\x02\u0247" +
    "\u0246\x03\x02\x02\x02\u0247\u0248\x03\x02\x02\x02\u0248\u0249\x03\x02" +
    "\x02\x02\u0249\u024A\x07\xD8\x02\x02\u024A\u024B\x07\xD6\x02\x02\u024B" +
    "\u024C\x05<\x1F\x02\u024C\u041D\x03\x02\x02\x02\u024D\u024E\x07\x11\x02" +
    "\x02\u024E\u024F\t\x07\x02\x02\u024F\u0250\x05\xB6\\\x02\u0250\u0254\x07" +
    "\x0E\x02\x02\u0251\u0252\x07q\x02\x02\u0252\u0253\x07\x9C\x02\x02\u0253" +
    "\u0255\x07V\x02\x02\u0254\u0251\x03\x02\x02\x02\u0254\u0255\x03\x02\x02" +
    "\x02\u0255\u0257\x03\x02\x02\x02\u0256\u0258\x05(\x15\x02\u0257\u0256" +
    "\x03\x02\x02\x02\u0258\u0259\x03\x02\x02\x02\u0259\u0257\x03\x02\x02\x02" +
    "\u0259\u025A\x03\x02\x02\x02\u025A\u041D\x03\x02\x02\x02\u025B\u025C\x07" +
    "\x11\x02\x02\u025C\u025D\x07\xE8\x02\x02\u025D\u025E\x05\xB6\\\x02\u025E" +
    "\u025F\x05*\x16\x02\u025F\u0260\x07\xC1\x02\x02\u0260\u0261\x07\xF0\x02" +
    "\x02\u0261\u0262\x05*\x16\x02\u0262\u041D\x03\x02\x02\x02\u0263\u0264" +
    "\x07\x11\x02\x02\u0264\u0265\t\x07\x02\x02\u0265\u0266\x05\xB6\\\x02\u0266" +
    "\u0269\x07O\x02\x02\u0267\u0268\x07q\x02\x02\u0268\u026A\x07V\x02\x02" +
    "\u0269\u0267\x03\x02\x02\x02\u0269\u026A\x03\x02\x02\x02\u026A\u026B\x03" +
    "\x02\x02\x02\u026B\u0270\x05*\x16\x02\u026C\u026D\x07\x06\x02\x02\u026D" +
    "\u026F\x05*\x16\x02\u026E\u026C\x03\x02\x02\x02\u026F\u0272\x03\x02\x02" +
    "\x02\u0270\u026E\x03\x02\x02\x02\u0270\u0271\x03\x02\x02\x02\u0271\u0274" +
    "\x03\x02\x02\x02\u0272\u0270\x03\x02\x02\x02\u0273\u0275\x07\xB8\x02\x02" +
    "\u0274\u0273\x03\x02\x02\x02\u0274\u0275\x03\x02\x02\x02\u0275\u041D\x03" +
    "\x02\x02\x02\u0276\u0277\x07\x11\x02\x02\u0277\u0278\x07\xE8\x02\x02\u0278" +
    "\u027A\x05\xB6\\\x02\u0279\u027B\x05*\x16\x02\u027A\u0279\x03\x02\x02" +
    "\x02\u027A\u027B\x03\x02\x02\x02\u027B\u027C\x03\x02\x02\x02\u027C\u027D" +
    "\x07\xD8\x02\x02\u027D\u027E\x05 \x11\x02\u027E\u041D\x03\x02\x02\x02" +
    "\u027F\u0280\x07\x11\x02\x02\u0280\u0281\x07\xE8\x02\x02\u0281\u0282\x05" +
    "\xB6\\\x02\u0282\u0283\x07\xBD\x02\x02\u0283\u0284\x07\xAF\x02\x02\u0284" +
    "\u041D\x03\x02\x02\x02\u0285\u0286\x07O\x02\x02\u0286\u0289\x07\xE8\x02" +
    "\x02\u0287\u0288\x07q\x02\x02\u0288\u028A\x07V\x02\x02\u0289\u0287\x03" +
    "\x02\x02\x02\u0289\u028A\x03\x02\x02\x02\u028A\u028B\x03\x02\x02\x02\u028B" +
    "\u028D\x05\xB6\\\x02\u028C\u028E\x07\xB8\x02\x02\u028D\u028C\x03\x02\x02" +
    "\x02\u028D\u028E\x03\x02\x02\x02\u028E\u041D\x03\x02\x02\x02\u028F\u0290" +
    "\x07O\x02\x02\u0290\u0293\x07\u0108\x02\x02\u0291\u0292\x07q\x02\x02\u0292" +
    "\u0294\x07V\x02\x02\u0293\u0291\x03\x02\x02\x02\u0293\u0294\x03\x02\x02" +
    "\x02\u0294\u0295\x03\x02\x02\x02\u0295\u041D\x05\xB6\\\x02\u0296\u0299" +
    "\x077\x02\x02\u0297\u0298\x07\xA4\x02\x02\u0298\u029A\x07\xC3\x02\x02" +
    "\u0299\u0297\x03\x02\x02\x02\u0299\u029A\x03\x02\x02\x02\u029A\u029F\x03" +
    "\x02\x02\x02\u029B\u029D\x07k\x02\x02\u029C\u029B\x03\x02\x02\x02\u029C" +
    "\u029D\x03\x02\x02\x02\u029D\u029E\x03\x02\x02\x02\u029E\u02A0\x07\xEC" +
    "\x02\x02\u029F\u029C\x03\x02\x02\x02\u029F\u02A0\x03\x02\x02\x02\u02A0" +
    "\u02A1\x03\x02\x02\x02\u02A1\u02A5\x07\u0108\x02\x02\u02A2\u02A3\x07q" +
    "\x02\x02\u02A3\u02A4\x07\x9C\x02\x02\u02A4\u02A6\x07V\x02\x02\u02A5\u02A2" +
    "\x03\x02\x02\x02\u02A5\u02A6\x03\x02\x02\x02\u02A6\u02A7\x03\x02\x02\x02" +
    "\u02A7\u02A9\x05\xB6\\\x02\u02A8\u02AA\x05\xA6T\x02\u02A9\u02A8\x03\x02" +
    "\x02\x02\u02A9\u02AA\x03\x02\x02\x02\u02AA\u02B3\x03\x02\x02\x02\u02AB" +
    '\u02B2\x05"\x12\x02\u02AC\u02AD\x07\xAE\x02\x02\u02AD\u02AE\x07\xA0\x02' +
    "\x02\u02AE\u02B2\x05\x9EP\x02\u02AF\u02B0\x07\xEB\x02\x02\u02B0\u02B2" +
    "\x05<\x1F\x02\u02B1\u02AB\x03\x02\x02\x02\u02B1\u02AC\x03\x02\x02\x02" +
    "\u02B1\u02AF\x03\x02\x02\x02\u02B2\u02B5\x03\x02\x02\x02\u02B3\u02B1\x03" +
    "\x02\x02\x02\u02B3\u02B4\x03\x02\x02\x02\u02B4\u02B6\x03\x02\x02\x02\u02B5" +
    "\u02B3\x03\x02\x02\x02\u02B6\u02B7\x07\x18\x02\x02\u02B7\u02B8\x05$\x13" +
    "\x02\u02B8\u041D\x03\x02\x02\x02\u02B9\u02BC\x077\x02\x02\u02BA\u02BB" +
    "\x07\xA4\x02\x02\u02BB\u02BD\x07\xC3\x02\x02\u02BC\u02BA\x03\x02\x02\x02" +
    "\u02BC\u02BD\x03\x02\x02\x02\u02BD\u02BF\x03\x02\x02\x02\u02BE\u02C0\x07" +
    "k\x02\x02\u02BF\u02BE\x03\x02\x02\x02\u02BF\u02C0\x03\x02\x02\x02\u02C0" +
    "\u02C1\x03\x02\x02\x02\u02C1\u02C2\x07\xEC\x02\x02\u02C2\u02C3\x07\u0108" +
    "\x02\x02\u02C3\u02C8\x05\xB8]\x02\u02C4\u02C5\x07\x04\x02\x02\u02C5\u02C6" +
    "\x05\xF2z\x02\u02C6\u02C7\x07\x05\x02\x02\u02C7\u02C9\x03\x02\x02\x02" +
    "\u02C8\u02C4\x03\x02\x02\x02\u02C8\u02C9\x03\x02\x02\x02\u02C9\u02CA\x03" +
    "\x02\x02\x02\u02CA\u02CD\x058\x1D\x02\u02CB\u02CC\x07\xA3\x02\x02\u02CC" +
    "\u02CE\x05<\x1F\x02\u02CD\u02CB\x03\x02\x02\x02\u02CD\u02CE\x03\x02\x02" +
    "\x02\u02CE\u041D\x03\x02\x02\x02\u02CF\u02D0\x07\x11\x02\x02\u02D0\u02D1" +
    "\x07\u0108\x02\x02\u02D1\u02D3\x05\xB6\\\x02\u02D2\u02D4\x07\x18\x02\x02" +
    "\u02D3\u02D2\x03\x02\x02\x02\u02D3\u02D4\x03\x02\x02\x02\u02D4\u02D5\x03" +
    "\x02\x02\x02\u02D5\u02D6\x05$\x13\x02\u02D6\u041D\x03\x02\x02\x02\u02D7" +
    "\u02DA\x077\x02\x02\u02D8\u02D9\x07\xA4\x02\x02\u02D9\u02DB\x07\xC3\x02" +
    "\x02\u02DA\u02D8\x03\x02\x02\x02\u02DA\u02DB\x03\x02\x02\x02\u02DB\u02DD" +
    "\x03\x02\x02\x02\u02DC\u02DE\x07\xEC\x02\x02\u02DD\u02DC\x03\x02\x02\x02" +
    "\u02DD\u02DE\x03\x02\x02\x02\u02DE\u02DF\x03\x02\x02\x02\u02DF\u02E3\x07" +
    "i\x02\x02\u02E0\u02E1\x07q\x02\x02\u02E1\u02E2\x07\x9C\x02\x02\u02E2\u02E4" +
    "\x07V\x02\x02\u02E3\u02E0\x03\x02\x02\x02\u02E3\u02E4\x03\x02\x02\x02" +
    "\u02E4\u02E5\x03\x02\x02\x02\u02E5\u02E6\x05\xB6\\\x02\u02E6\u02E7\x07" +
    "\x18\x02\x02\u02E7\u02F1\x07\u0123\x02\x02\u02E8\u02E9\x07\u0106\x02\x02" +
    "\u02E9\u02EE\x05N(\x02\u02EA\u02EB\x07\x06\x02\x02\u02EB\u02ED\x05N(\x02" +
    "\u02EC\u02EA\x03\x02\x02\x02\u02ED\u02F0\x03\x02\x02\x02\u02EE\u02EC\x03" +
    "\x02\x02\x02\u02EE\u02EF\x03\x02\x02\x02\u02EF\u02F2\x03\x02\x02\x02\u02F0" +
    "\u02EE\x03\x02\x02\x02\u02F1\u02E8\x03\x02\x02\x02\u02F1\u02F2\x03\x02" +
    "\x02\x02\u02F2\u041D\x03\x02\x02\x02\u02F3\u02F5\x07O\x02\x02\u02F4\u02F6" +
    "\x07\xEC\x02\x02\u02F5\u02F4\x03\x02\x02\x02\u02F5\u02F6\x03\x02\x02\x02" +
    "\u02F6\u02F7\x03\x02\x02\x02\u02F7\u02FA\x07i\x02\x02\u02F8\u02F9\x07" +
    "q\x02\x02\u02F9\u02FB\x07V\x02\x02\u02FA\u02F8\x03\x02\x02\x02\u02FA\u02FB" +
    "\x03\x02\x02\x02\u02FB\u02FC\x03\x02\x02\x02\u02FC\u041D\x05\xB6\\\x02" +
    "\u02FD\u02FF\x07W\x02\x02\u02FE\u0300\t\t\x02\x02\u02FF\u02FE\x03\x02" +
    "\x02\x02\u02FF\u0300\x03\x02\x02\x02\u0300\u0301\x03\x02\x02\x02\u0301" +
    "\u041D\x05\x10\t\x02\u0302\u0303\x07\xDB\x02\x02\u0303\u0306\x07\xE9\x02" +
    "\x02\u0304\u0305\t\x05\x02\x02\u0305\u0307\x05\xB6\\\x02\u0306\u0304\x03" +
    "\x02\x02\x02\u0306\u0307\x03\x02\x02\x02\u0307\u030C\x03\x02\x02\x02\u0308" +
    "\u030A\x07\x87\x02\x02\u0309\u0308\x03\x02\x02\x02\u0309\u030A\x03\x02" +
    "\x02\x02\u030A\u030B\x03\x02\x02\x02\u030B\u030D\x07\u0123\x02\x02\u030C" +
    "\u0309\x03\x02\x02\x02\u030C\u030D\x03\x02\x02\x02\u030D\u041D\x03\x02" +
    "\x02\x02\u030E\u030F\x07\xDB\x02\x02\u030F\u0310\x07\xE8\x02\x02\u0310" +
    "\u0313\x07Y\x02\x02\u0311\u0312\t\x05\x02\x02\u0312\u0314\x05\xB6\\\x02" +
    "\u0313\u0311\x03\x02\x02\x02\u0313\u0314\x03\x02\x02\x02\u0314\u0315\x03" +
    "\x02\x02\x02\u0315\u0316\x07\x87\x02\x02\u0316\u0318\x07\u0123\x02\x02" +
    "\u0317\u0319\x05*\x16\x02\u0318\u0317\x03\x02\x02\x02\u0318\u0319\x03" +
    "\x02\x02\x02\u0319\u041D\x03\x02\x02\x02\u031A\u031B\x07\xDB\x02\x02\u031B" +
    "\u031C\x07\xEB\x02\x02\u031C\u0321\x05\xB6\\\x02\u031D\u031E\x07\x04\x02" +
    "\x02\u031E\u031F\x05@!\x02\u031F\u0320\x07\x05\x02\x02\u0320\u0322\x03" +
    "\x02\x02\x02\u0321\u031D\x03\x02\x02\x02\u0321\u0322\x03\x02\x02\x02\u0322" +
    "\u041D\x03\x02\x02\x02\u0323\u0324\x07\xDB\x02\x02\u0324\u0325\x07.\x02" +
    "\x02\u0325\u0326\t\x05\x02\x02\u0326\u0329\x05\xB6\\\x02\u0327\u0328\t" +
    "\x05\x02\x02\u0328\u032A\x05\xB6\\\x02\u0329\u0327\x03\x02\x02\x02\u0329" +
    "\u032A\x03\x02\x02\x02\u032A\u041D\x03\x02\x02\x02\u032B\u032C\x07\xDB" +
    "\x02\x02\u032C\u032F\x07\u0109\x02\x02\u032D\u032E\t\x05\x02\x02\u032E" +
    "\u0330\x05\xB6\\\x02\u032F\u032D\x03\x02\x02\x02\u032F\u0330\x03\x02\x02" +
    "\x02\u0330\u0335\x03\x02\x02\x02\u0331\u0333\x07\x87\x02\x02\u0332\u0331" +
    "\x03\x02\x02\x02\u0332\u0333\x03\x02\x02\x02\u0333\u0334\x03\x02\x02\x02" +
    "\u0334\u0336\x07\u0123\x02\x02\u0335\u0332\x03\x02\x02\x02\u0335\u0336" +
    "\x03\x02\x02\x02\u0336\u041D\x03\x02\x02\x02\u0337\u0338\x07\xDB\x02\x02" +
    "\u0338\u0339\x07\xAF\x02\x02\u0339\u033B\x05\xB6\\\x02\u033A\u033C\x05" +
    "*\x16\x02\u033B\u033A\x03\x02\x02\x02\u033B\u033C\x03\x02\x02\x02\u033C" +
    "\u041D\x03\x02\x02\x02\u033D\u033F\x07\xDB\x02\x02\u033E\u0340\x05\u0110" +
    "\x89\x02\u033F\u033E\x03\x02\x02\x02\u033F\u0340\x03\x02\x02\x02\u0340" +
    "\u0341\x03\x02\x02\x02\u0341\u0349\x07j\x02\x02\u0342\u0344\x07\x87\x02" +
    "\x02\u0343\u0342\x03\x02\x02\x02\u0343\u0344\x03\x02\x02\x02\u0344\u0347" +
    "\x03\x02\x02\x02\u0345\u0348\x05\xB6\\\x02\u0346\u0348\x07\u0123\x02\x02" +
    "\u0347\u0345\x03\x02\x02\x02\u0347\u0346\x03\x02\x02\x02\u0348\u034A\x03" +
    "\x02\x02\x02\u0349\u0343\x03\x02\x02\x02\u0349\u034A\x03\x02\x02\x02\u034A" +
    "\u041D\x03\x02\x02\x02\u034B\u034C\x07\xDB\x02\x02\u034C\u034D\x077\x02" +
    "\x02\u034D\u034E\x07\xE8\x02\x02\u034E\u0351\x05\xB6\\\x02\u034F\u0350" +
    "\x07\x18\x02\x02\u0350\u0352\x07\xD5\x02\x02\u0351\u034F\x03\x02\x02\x02" +
    "\u0351\u0352\x03\x02\x02\x02\u0352\u041D\x03\x02\x02\x02\u0353\u0354\x07" +
    "\xDB\x02\x02\u0354\u0355\x07:\x02\x02\u0355\u041D\x07\x98\x02\x02\u0356" +
    "\u0357\t\n\x02\x02\u0357\u0359\x07i\x02\x02\u0358\u035A\x07Y\x02\x02\u0359" +
    "\u0358\x03\x02\x02\x02\u0359\u035A\x03\x02\x02\x02\u035A\u035B\x03\x02" +
    "\x02\x02\u035B\u041D\x050\x19\x02\u035C\u035D\t\n\x02\x02\u035D\u035F" +
    "\x05.\x18\x02\u035E\u0360\x07Y\x02\x02\u035F\u035E\x03\x02\x02\x02\u035F" +
    "\u0360\x03\x02\x02\x02\u0360\u0361\x03\x02\x02\x02\u0361\u0362\x05\xB6" +
    "\\\x02\u0362\u041D\x03\x02\x02\x02\u0363\u0365\t\n\x02\x02\u0364\u0366" +
    "\x07\xE8\x02\x02\u0365\u0364\x03\x02\x02\x02\u0365\u0366\x03\x02\x02\x02" +
    "\u0366\u0368\x03\x02\x02\x02\u0367\u0369\t\v\x02\x02\u0368\u0367\x03\x02" +
    "\x02\x02\u0368\u0369\x03\x02\x02\x02\u0369\u036A\x03\x02\x02\x02\u036A" +
    "\u036C\x05\xB6\\\x02\u036B\u036D\x05*\x16\x02\u036C\u036B\x03\x02\x02" +
    "\x02\u036C\u036D\x03\x02\x02\x02\u036D\u036F\x03\x02\x02\x02\u036E\u0370" +
    "\x052\x1A\x02\u036F\u036E\x03\x02\x02\x02\u036F\u0370\x03\x02\x02\x02" +
    "\u0370\u041D\x03\x02\x02\x02\u0371\u0373\t\n\x02\x02\u0372\u0374\x07\xB9" +
    "\x02\x02\u0373\u0372\x03\x02\x02\x02\u0373\u0374\x03\x02\x02\x02\u0374" +
    "\u0375\x03\x02\x02\x02\u0375\u041D\x05$\x13\x02\u0376\u0377\x07/\x02\x02" +
    "\u0377\u0378\x07\xA0\x02\x02\u0378\u0379\x05.\x18\x02\u0379\u037A\x05" +
    "\xB6\\\x02\u037A\u037B\x07~\x02\x02\u037B\u037C\t\f\x02\x02\u037C\u041D" +
    "\x03\x02\x02\x02\u037D\u037E\x07/\x02\x02\u037E\u037F\x07\xA0\x02\x02" +
    "\u037F\u0380\x07\xE8\x02\x02\u0380\u0381\x05\xB6\\\x02\u0381\u0382\x07" +
    "~\x02\x02\u0382\u0383\t\f\x02\x02\u0383\u041D\x03\x02\x02\x02\u0384\u0385" +
    "\x07\xC0\x02\x02\u0385\u0386\x07\xE8\x02\x02\u0386\u041D\x05\xB6\\\x02" +
    "\u0387\u0388\x07\xC0\x02\x02\u0388\u0389\x07i\x02\x02\u0389\u041D\x05" +
    "\xB6\\\x02\u038A\u0392\x07\xC0\x02\x02\u038B\u0393\x07\u0123\x02\x02\u038C" +
    "\u038E\v\x02\x02\x02\u038D\u038C\x03\x02\x02\x02\u038E\u0391\x03\x02\x02" +
    "\x02\u038F\u0390\x03\x02\x02\x02\u038F\u038D\x03\x02\x02\x02\u0390\u0393" +
    "\x03\x02\x02\x02\u0391\u038F\x03\x02\x02\x02\u0392\u038B\x03\x02\x02\x02" +
    "\u0392\u038F\x03\x02\x02\x02\u0393\u041D\x03\x02\x02\x02\u0394\u0396\x07" +
    "!\x02\x02\u0395\u0397\x07\x84\x02\x02\u0396\u0395\x03\x02\x02\x02\u0396" +
    "\u0397\x03\x02\x02\x02\u0397\u0398\x03\x02\x02\x02\u0398\u0399\x07\xE8" +
    "\x02\x02\u0399\u039C\x05\xB6\\\x02\u039A\u039B\x07\xA3\x02\x02\u039B\u039D" +
    "\x05<\x1F\x02\u039C\u039A\x03\x02\x02\x02\u039C\u039D\x03\x02\x02\x02" +
    "\u039D\u03A2\x03\x02\x02\x02\u039E\u03A0\x07\x18\x02\x02\u039F\u039E\x03" +
    "\x02\x02\x02\u039F\u03A0\x03\x02\x02\x02\u03A0\u03A1\x03\x02\x02\x02\u03A1" +
    "\u03A3\x05$\x13\x02\u03A2\u039F\x03\x02\x02\x02\u03A2\u03A3\x03\x02\x02" +
    "\x02\u03A3\u041D\x03\x02\x02\x02\u03A4\u03A5\x07\xFD\x02\x02\u03A5\u03A8" +
    "\x07\xE8\x02\x02\u03A6\u03A7\x07q\x02\x02\u03A7\u03A9\x07V\x02\x02\u03A8" +
    "\u03A6\x03\x02\x02\x02\u03A8\u03A9\x03\x02\x02\x02\u03A9\u03AA\x03\x02" +
    "\x02\x02\u03AA\u041D\x05\xB6\\\x02\u03AB\u03AC\x07'\x02\x02\u03AC\u041D" +
    "\x07!\x02\x02\u03AD\u03AE\x07\x8B\x02\x02\u03AE\u03B0\x07@\x02\x02\u03AF" +
    "\u03B1\x07\x8C\x02\x02\u03B0\u03AF\x03\x02\x02\x02\u03B0\u03B1\x03\x02" +
    "\x02\x02\u03B1\u03B2\x03\x02\x02\x02\u03B2\u03B3\x07x\x02\x02\u03B3\u03B5" +
    "\x07\u0123\x02\x02\u03B4\u03B6\x07\xAC\x02\x02\u03B5\u03B4\x03\x02\x02" +
    "\x02\u03B5\u03B6\x03\x02\x02\x02\u03B6\u03B7\x03\x02\x02\x02\u03B7\u03B8" +
    "\x07}\x02\x02\u03B8\u03B9\x07\xE8\x02\x02\u03B9\u03BB\x05\xB6\\\x02\u03BA" +
    "\u03BC\x05*\x16\x02\u03BB\u03BA\x03\x02\x02\x02\u03BB\u03BC\x03\x02\x02" +
    "\x02\u03BC\u041D\x03\x02\x02\x02\u03BD\u03BE\x07\xF8\x02\x02\u03BE\u03BF" +
    "\x07\xE8\x02\x02\u03BF\u03C1\x05\xB6\\\x02\u03C0\u03C2\x05*\x16\x02\u03C1" +
    "\u03C0\x03\x02\x02\x02\u03C1\u03C2\x03\x02\x02\x02\u03C2\u041D\x03\x02" +
    "\x02\x02\u03C3\u03C4\x07\x97\x02\x02\u03C4\u03C5\x07\xC2\x02\x02\u03C5" +
    "\u03C6\x07\xE8\x02\x02\u03C6\u03C9\x05\xB6\\\x02\u03C7\u03C8\t\r\x02\x02" +
    "\u03C8\u03CA\x07\xAF\x02\x02\u03C9\u03C7\x03\x02\x02\x02\u03C9\u03CA\x03" +
    "\x02\x02\x02\u03CA\u041D\x03\x02\x02\x02\u03CB\u03CC\t\x0E\x02\x02\u03CC" +
    "\u03D0\x05\u0110\x89\x02\u03CD\u03CF\v\x02\x02\x02\u03CE\u03CD\x03\x02" +
    "\x02\x02\u03CF\u03D2\x03\x02\x02\x02\u03D0\u03D1\x03\x02\x02\x02\u03D0" +
    "\u03CE\x03\x02\x02\x02\u03D1\u041D\x03\x02\x02\x02\u03D2\u03D0\x03\x02" +
    "\x02\x02\u03D3\u03D4\x07\xD8\x02\x02\u03D4\u03D8\x07\xCA\x02\x02\u03D5" +
    "\u03D7\v\x02\x02\x02\u03D6\u03D5\x03\x02\x02\x02\u03D7\u03DA\x03\x02\x02" +
    "\x02\u03D8\u03D9\x03\x02\x02\x02\u03D8\u03D6\x03\x02\x02\x02\u03D9\u041D" +
    "\x03\x02\x02\x02\u03DA\u03D8\x03\x02\x02\x02\u03DB\u03DC\x07\xD8\x02\x02" +
    "\u03DC\u03DD\x07\xEF\x02\x02\u03DD\u03DE\x07\u010F\x02\x02\u03DE\u041D" +
    "\x05\xDEp\x02\u03DF\u03E0\x07\xD8\x02\x02\u03E0\u03E1\x07\xEF\x02\x02" +
    "\u03E1\u03E2\x07\u010F\x02\x02\u03E2\u041D\t\x0F\x02\x02\u03E3\u03E4\x07" +
    "\xD8\x02\x02\u03E4\u03E5\x07\xEF\x02\x02\u03E5\u03E9\x07\u010F\x02\x02" +
    "\u03E6\u03E8\v\x02\x02\x02\u03E7\u03E6\x03\x02\x02\x02\u03E8\u03EB\x03" +
    "\x02\x02\x02\u03E9\u03EA\x03\x02\x02\x02\u03E9\u03E7\x03\x02\x02\x02\u03EA" +
    "\u041D\x03\x02\x02\x02\u03EB\u03E9\x03\x02\x02\x02\u03EC\u03ED\x07\xD8" +
    "\x02\x02\u03ED\u03EE\x05\x12\n\x02\u03EE\u03EF\x07\u0110\x02\x02\u03EF" +
    "\u03F0\x05\x14\v\x02\u03F0\u041D\x03\x02\x02\x02\u03F1\u03F2\x07\xD8\x02" +
    "\x02\u03F2\u03FA\x05\x12\n\x02\u03F3\u03F7\x07\u0110\x02\x02\u03F4\u03F6" +
    "\v\x02\x02\x02\u03F5\u03F4\x03\x02\x02\x02\u03F6\u03F9\x03\x02\x02\x02" +
    "\u03F7\u03F8\x03\x02\x02\x02\u03F7\u03F5\x03\x02\x02\x02\u03F8\u03FB\x03" +
    "\x02\x02\x02\u03F9\u03F7\x03\x02\x02\x02\u03FA\u03F3\x03\x02\x02\x02\u03FA" +
    "\u03FB\x03\x02\x02\x02\u03FB\u041D\x03\x02\x02\x02\u03FC\u0400\x07\xD8" +
    "\x02\x02\u03FD\u03FF\v\x02\x02\x02\u03FE\u03FD\x03\x02\x02\x02\u03FF\u0402" +
    "\x03\x02\x02\x02\u0400\u0401\x03\x02\x02\x02\u0400\u03FE\x03\x02\x02\x02" +
    "\u0401\u0403\x03\x02\x02\x02\u0402\u0400\x03\x02\x02\x02\u0403\u0404\x07" +
    "\u0110\x02\x02\u0404\u041D\x05\x14\v\x02\u0405\u0409\x07\xD8\x02\x02\u0406" +
    "\u0408\v\x02\x02\x02\u0407\u0406\x03\x02\x02\x02\u0408\u040B\x03\x02\x02" +
    "\x02\u0409\u040A\x03\x02\x02\x02\u0409\u0407\x03\x02\x02\x02\u040A\u041D" +
    "\x03\x02\x02\x02\u040B\u0409\x03\x02\x02\x02\u040C\u040D\x07\xC4\x02\x02" +
    "\u040D\u041D\x05\x12\n\x02\u040E\u0412\x07\xC4\x02\x02\u040F\u0411\v\x02" +
    "\x02\x02\u0410\u040F\x03\x02\x02\x02\u0411\u0414\x03\x02\x02\x02\u0412" +
    "\u0413\x03\x02\x02\x02\u0412\u0410\x03\x02\x02\x02\u0413\u041D\x03\x02" +
    "\x02\x02\u0414\u0412\x03\x02\x02\x02\u0415\u0419\x05\x16\f\x02\u0416\u0418" +
    "\v\x02\x02\x02\u0417\u0416\x03\x02\x02\x02\u0418\u041B\x03\x02\x02\x02" +
    "\u0419\u041A\x03\x02\x02\x02\u0419\u0417\x03\x02\x02\x02\u041A\u041D\x03" +
    "\x02\x02\x02\u041B\u0419\x03\x02\x02\x02\u041C\u013B\x03\x02\x02\x02\u041C" +
    "\u013D\x03\x02\x02\x02\u041C\u0140\x03\x02\x02\x02\u041C\u0145\x03\x02" +
    "\x02\x02\u041C\u0157\x03\x02\x02\x02\u041C\u015E\x03\x02\x02\x02\u041C" +
    "\u0164\x03\x02\x02\x02\u041C\u016E\x03\x02\x02\x02\u041C\u017A\x03\x02" +
    "\x02\x02\u041C\u018B\x03\x02\x02\x02\u041C\u01A0\x03\x02\x02\x02\u041C" +
    "\u01B1\x03\x02\x02\x02\u041C\u01C2\x03\x02\x02\x02\u041C\u01CD\x03\x02" +
    "\x02\x02\u041C\u01D4\x03\x02\x02\x02\u041C\u01DD\x03\x02\x02\x02\u041C" +
    "\u01E6\x03\x02\x02\x02\u041C\u01EF\x03\x02\x02\x02\u041C\u01F6\x03\x02" +
    "\x02\x02\u041C\u01FD\x03\x02\x02\x02\u041C\u0204\x03\x02\x02\x02\u041C" +
    "\u020F\x03\x02\x02\x02\u041C\u021A\x03\x02\x02\x02\u041C\u0229\x03\x02" +
    "\x02\x02\u041C\u0235\x03\x02\x02\x02\u041C\u0243\x03\x02\x02\x02\u041C" +
    "\u024D\x03\x02\x02\x02\u041C\u025B\x03\x02\x02\x02\u041C\u0263\x03\x02" +
    "\x02\x02\u041C\u0276\x03\x02\x02\x02\u041C\u027F\x03\x02\x02\x02\u041C" +
    "\u0285\x03\x02\x02\x02\u041C\u028F\x03\x02\x02\x02\u041C\u0296\x03\x02" +
    "\x02\x02\u041C\u02B9\x03\x02\x02\x02\u041C\u02CF\x03\x02\x02\x02\u041C" +
    "\u02D7\x03\x02\x02\x02\u041C\u02F3\x03\x02\x02\x02\u041C\u02FD\x03\x02" +
    "\x02\x02\u041C\u0302\x03\x02\x02\x02\u041C\u030E\x03\x02\x02\x02\u041C" +
    "\u031A\x03\x02\x02\x02\u041C\u0323\x03\x02\x02\x02\u041C\u032B\x03\x02" +
    "\x02\x02\u041C\u0337\x03\x02\x02\x02\u041C\u033D\x03\x02\x02\x02\u041C" +
    "\u034B\x03\x02\x02\x02\u041C\u0353\x03\x02\x02\x02\u041C\u0356\x03\x02" +
    "\x02\x02\u041C\u035C\x03\x02\x02\x02\u041C\u0363\x03\x02\x02\x02\u041C" +
    "\u0371\x03\x02\x02\x02\u041C\u0376\x03\x02\x02\x02\u041C\u037D\x03\x02" +
    "\x02\x02\u041C\u0384\x03\x02\x02\x02\u041C\u0387\x03\x02\x02\x02\u041C" +
    "\u038A\x03\x02\x02\x02\u041C\u0394\x03\x02\x02\x02\u041C\u03A4\x03\x02" +
    "\x02\x02\u041C\u03AB\x03\x02\x02\x02\u041C\u03AD\x03\x02\x02\x02\u041C" +
    "\u03BD\x03\x02\x02\x02\u041C\u03C3\x03\x02\x02\x02\u041C\u03CB\x03\x02" +
    "\x02\x02\u041C\u03D3\x03\x02\x02\x02\u041C\u03DB\x03\x02\x02\x02\u041C" +
    "\u03DF\x03\x02\x02\x02\u041C\u03E3\x03\x02\x02\x02\u041C\u03EC\x03\x02" +
    "\x02\x02\u041C\u03F1\x03\x02\x02\x02\u041C\u03FC\x03\x02\x02\x02\u041C" +
    "\u0405\x03\x02\x02\x02\u041C\u040C\x03\x02\x02\x02\u041C\u040E\x03\x02" +
    "\x02\x02\u041C\u0415\x03\x02\x02\x02\u041D\x11\x03\x02\x02\x02\u041E\u041F" +
    "\x05\u0114\x8B\x02\u041F\x13\x03\x02\x02\x02\u0420\u0421\x05\u0114\x8B" +
    "\x02\u0421\x15\x03\x02\x02\x02\u0422\u0423\x077\x02\x02\u0423\u04CB\x07" +
    "\xCA\x02\x02\u0424\u0425\x07O\x02\x02\u0425\u04CB\x07\xCA\x02\x02\u0426" +
    "\u0428\x07l\x02\x02\u0427\u0429\x07\xCA\x02\x02\u0428\u0427\x03\x02\x02" +
    "\x02\u0428\u0429\x03\x02\x02\x02\u0429\u04CB\x03\x02\x02\x02\u042A\u042C" +
    "\x07\xC7\x02\x02\u042B\u042D\x07\xCA\x02\x02\u042C\u042B\x03\x02\x02\x02" +
    "\u042C\u042D\x03\x02\x02\x02\u042D\u04CB\x03\x02\x02\x02\u042E\u042F\x07" +
    "\xDB\x02\x02\u042F\u04CB\x07l\x02\x02\u0430\u0431\x07\xDB\x02\x02\u0431" +
    "\u0433\x07\xCA\x02\x02\u0432\u0434\x07l\x02\x02\u0433\u0432\x03\x02\x02" +
    "\x02\u0433\u0434\x03\x02\x02\x02\u0434\u04CB\x03\x02\x02\x02\u0435\u0436" +
    "\x07\xDB\x02\x02\u0436\u04CB\x07\xB6\x02\x02\u0437\u0438\x07\xDB\x02\x02" +
    "\u0438\u04CB\x07\xCB\x02\x02\u0439\u043A\x07\xDB\x02\x02\u043A\u043B\x07" +
    ":\x02\x02\u043B\u04CB\x07\xCB\x02\x02\u043C\u043D\x07X\x02\x02\u043D\u04CB" +
    "\x07\xE8\x02\x02\u043E\u043F\x07s\x02\x02\u043F\u04CB\x07\xE8\x02\x02" +
    "\u0440\u0441\x07\xDB\x02\x02\u0441\u04CB\x072\x02\x02\u0442\u0443\x07" +
    "\xDB\x02\x02\u0443\u0444\x077\x02\x02\u0444\u04CB\x07\xE8\x02\x02\u0445" +
    "\u0446\x07\xDB\x02\x02\u0446\u04CB\x07\xF4\x02\x02\u0447\u0448\x07\xDB" +
    "\x02\x02\u0448\u04CB\x07v\x02\x02\u0449\u044A\x07\xDB\x02\x02\u044A\u04CB" +
    "\x07\x8F\x02\x02\u044B\u044C\x077\x02\x02\u044C\u04CB\x07u\x02\x02\u044D" +
    "\u044E\x07O\x02\x02\u044E\u04CB\x07u\x02\x02\u044F\u0450\x07\x11\x02\x02" +
    "\u0450\u04CB\x07u\x02\x02\u0451\u0452\x07\x8E\x02\x02\u0452\u04CB\x07" +
    "\xE8\x02\x02\u0453\u0454\x07\x8E\x02\x02\u0454\u04CB\x07A\x02\x02\u0455" +
    "\u0456\x07\u0101\x02\x02\u0456\u04CB\x07\xE8\x02\x02\u0457\u0458\x07\u0101" +
    "\x02\x02\u0458\u04CB\x07A\x02\x02\u0459\u045A\x077\x02\x02\u045A\u045B" +
    "\x07\xEC\x02\x02\u045B\u04CB\x07\x91\x02\x02\u045C\u045D\x07O\x02\x02" +
    "\u045D\u045E\x07\xEC\x02\x02\u045E\u04CB\x07\x91\x02\x02\u045F\u0460\x07" +
    "\x11\x02\x02\u0460\u0461\x07\xE8\x02\x02\u0461\u0462\x05\xB8]\x02\u0462" +
    "\u0463\x07\x9C\x02\x02\u0463\u0464\x07)\x02\x02\u0464\u04CB\x03\x02\x02" +
    "\x02\u0465\u0466\x07\x11\x02\x02\u0466\u0467\x07\xE8\x02\x02\u0467\u0468" +
    "\x05\xB8]\x02\u0468\u0469\x07)\x02\x02\u0469\u046A\x07 \x02\x02\u046A" +
    "\u04CB\x03\x02\x02\x02\u046B\u046C\x07\x11\x02\x02\u046C\u046D\x07\xE8" +
    "\x02\x02\u046D\u046E\x05\xB8]\x02\u046E\u046F\x07\x9C\x02\x02\u046F\u0470" +
    "\x07\xDF\x02\x02\u0470\u04CB\x03\x02\x02\x02\u0471\u0472\x07\x11\x02\x02" +
    "\u0472\u0473\x07\xE8\x02\x02\u0473\u0474\x05\xB8]\x02\u0474\u0475\x07" +
    "\xDC\x02\x02\u0475\u0476\x07 \x02\x02\u0476\u04CB\x03\x02\x02\x02\u0477" +
    "\u0478\x07\x11\x02\x02\u0478\u0479\x07\xE8\x02\x02\u0479\u047A\x05\xB8" +
    "]\x02\u047A\u047B\x07\x9C\x02\x02\u047B\u047C\x07\xDC\x02\x02\u047C\u04CB" +
    "\x03\x02\x02\x02\u047D\u047E\x07\x11\x02\x02\u047E\u047F\x07\xE8\x02\x02" +
    "\u047F\u0480\x05\xB8]\x02\u0480\u0481\x07\x9C\x02\x02\u0481\u0482\x07" +
    "\xE2\x02\x02\u0482\u0483\x07\x18\x02\x02\u0483\u0484\x07J\x02\x02\u0484" +
    "\u04CB\x03\x02\x02\x02\u0485\u0486\x07\x11\x02\x02\u0486\u0487\x07\xE8" +
    "\x02\x02\u0487\u0488\x05\xB8]\x02\u0488\u0489\x07\xD8\x02\x02\u0489\u048A" +
    "\x07\xDC\x02\x02\u048A\u048B\x07\x8D\x02\x02\u048B\u04CB\x03\x02\x02\x02" +
    "\u048C\u048D\x07\x11\x02\x02\u048D\u048E\x07\xE8\x02\x02\u048E\u048F\x05" +
    "\xB8]\x02\u048F\u0490\x07U\x02\x02\u0490\u0491\x07\xAD\x02\x02\u0491\u04CB" +
    "\x03\x02\x02\x02\u0492\u0493\x07\x11\x02\x02\u0493\u0494\x07\xE8\x02\x02" +
    "\u0494\u0495\x05\xB8]\x02\u0495\u0496\x07\x16\x02\x02\u0496\u0497\x07" +
    "\xAD\x02\x02\u0497\u04CB\x03\x02\x02\x02\u0498\u0499\x07\x11\x02\x02\u0499" +
    "\u049A\x07\xE8\x02\x02\u049A\u049B\x05\xB8]\x02\u049B\u049C\x07\xFB\x02" +
    "\x02\u049C\u049D\x07\xAD\x02\x02\u049D\u04CB\x03\x02\x02\x02\u049E\u049F" +
    "\x07\x11\x02\x02\u049F\u04A0\x07\xE8\x02\x02\u04A0\u04A1\x05\xB8]\x02" +
    "\u04A1\u04A2\x07\xF1\x02\x02\u04A2\u04CB";
  private static readonly _serializedATNSegment3: string =
    "\x03\x02\x02\x02\u04A3\u04A4\x07\x11\x02\x02\u04A4\u04A5\x07\xE8\x02\x02" +
    "\u04A5\u04A7\x05\xB8]\x02\u04A6\u04A8\x05*\x16\x02\u04A7\u04A6\x03\x02" +
    "\x02\x02\u04A7\u04A8\x03\x02\x02\x02\u04A8\u04A9\x03\x02\x02\x02\u04A9" +
    "\u04AA\x071\x02\x02\u04AA\u04CB\x03\x02\x02\x02\u04AB\u04AC\x07\x11\x02" +
    "\x02\u04AC\u04AD\x07\xE8\x02\x02\u04AD\u04AF\x05\xB8]\x02\u04AE\u04B0" +
    "\x05*\x16\x02\u04AF\u04AE\x03\x02\x02\x02\u04AF\u04B0\x03\x02\x02\x02" +
    "\u04B0\u04B1\x03\x02\x02\x02\u04B1\u04B2\x074\x02\x02\u04B2\u04CB\x03" +
    "\x02\x02\x02\u04B3\u04B4\x07\x11\x02\x02\u04B4\u04B5\x07\xE8\x02\x02\u04B5" +
    "\u04B7\x05\xB8]\x02\u04B6\u04B8\x05*\x16\x02\u04B7\u04B6\x03\x02\x02\x02" +
    "\u04B7\u04B8\x03\x02\x02\x02\u04B8\u04B9\x03\x02\x02\x02\u04B9\u04BA\x07" +
    "\xD8\x02\x02\u04BA\u04BB\x07`\x02\x02\u04BB\u04CB\x03\x02\x02\x02\u04BC" +
    "\u04BD\x07\x11\x02\x02\u04BD\u04BE\x07\xE8\x02\x02\u04BE\u04C0\x05\xB8" +
    "]\x02\u04BF\u04C1\x05*\x16\x02\u04C0\u04BF\x03\x02\x02\x02\u04C0\u04C1" +
    "\x03\x02\x02\x02\u04C1\u04C2\x03\x02\x02\x02\u04C2\u04C3\x07\xC3\x02\x02" +
    "\u04C3\u04C4\x07.\x02\x02\u04C4\u04CB\x03\x02\x02\x02\u04C5\u04C6\x07" +
    "\xE0\x02\x02\u04C6\u04CB\x07\xF3\x02\x02\u04C7\u04CB\x070\x02\x02\u04C8" +
    "\u04CB\x07\xCC\x02\x02\u04C9\u04CB\x07I\x02\x02\u04CA\u0422\x03\x02\x02" +
    "\x02\u04CA\u0424\x03\x02\x02\x02\u04CA\u0426\x03\x02\x02\x02\u04CA\u042A" +
    "\x03\x02\x02\x02\u04CA\u042E\x03\x02\x02\x02\u04CA\u0430\x03\x02\x02\x02" +
    "\u04CA\u0435\x03\x02\x02\x02\u04CA\u0437\x03\x02\x02\x02\u04CA\u0439\x03" +
    "\x02\x02\x02\u04CA\u043C\x03\x02\x02\x02\u04CA\u043E\x03\x02\x02\x02\u04CA" +
    "\u0440\x03\x02\x02\x02\u04CA\u0442\x03\x02\x02\x02\u04CA\u0445\x03\x02" +
    "\x02\x02\u04CA\u0447\x03\x02\x02\x02\u04CA\u0449\x03\x02\x02\x02\u04CA" +
    "\u044B\x03\x02\x02\x02\u04CA\u044D\x03\x02\x02\x02\u04CA\u044F\x03\x02" +
    "\x02\x02\u04CA\u0451\x03\x02\x02\x02\u04CA\u0453\x03\x02\x02\x02\u04CA" +
    "\u0455\x03\x02\x02\x02\u04CA\u0457\x03\x02\x02\x02\u04CA\u0459\x03\x02" +
    "\x02\x02\u04CA\u045C\x03\x02\x02\x02\u04CA\u045F\x03\x02\x02\x02\u04CA" +
    "\u0465\x03\x02\x02\x02\u04CA\u046B\x03\x02\x02\x02\u04CA\u0471\x03\x02" +
    "\x02\x02\u04CA\u0477\x03\x02\x02\x02\u04CA\u047D\x03\x02\x02\x02\u04CA" +
    "\u0485\x03\x02\x02\x02\u04CA\u048C\x03\x02\x02\x02\u04CA\u0492\x03\x02" +
    "\x02\x02\u04CA\u0498\x03\x02\x02\x02\u04CA\u049E\x03\x02\x02\x02\u04CA" +
    "\u04A3\x03\x02\x02\x02\u04CA\u04AB\x03\x02\x02\x02\u04CA\u04B3\x03\x02" +
    "\x02\x02\u04CA\u04BC\x03\x02\x02\x02\u04CA\u04C5\x03\x02\x02\x02\u04CA" +
    "\u04C7\x03\x02\x02\x02\u04CA\u04C8\x03\x02\x02\x02\u04CA\u04C9\x03\x02" +
    "\x02\x02\u04CB\x17\x03\x02\x02\x02\u04CC\u04CE\x077\x02\x02\u04CD\u04CF" +
    "\x07\xEC\x02\x02\u04CE\u04CD\x03\x02\x02\x02\u04CE\u04CF\x03\x02\x02\x02" +
    "\u04CF\u04D1\x03\x02\x02\x02\u04D0\u04D2\x07Z\x02\x02\u04D1\u04D0\x03" +
    "\x02\x02\x02\u04D1\u04D2\x03\x02\x02\x02\u04D2\u04D3\x03\x02\x02\x02\u04D3" +
    "\u04D7\x07\xE8\x02\x02\u04D4\u04D5\x07q\x02\x02\u04D5\u04D6\x07\x9C\x02" +
    "\x02\u04D6\u04D8\x07V\x02\x02\u04D7\u04D4\x03\x02\x02\x02\u04D7\u04D8" +
    "\x03\x02\x02\x02\u04D8\u04D9\x03\x02\x02\x02\u04D9\u04DA\x05\xB6\\\x02" +
    "\u04DA\x19\x03\x02\x02\x02\u04DB\u04DC\x077\x02\x02\u04DC\u04DE\x07\xA4" +
    "\x02\x02\u04DD\u04DB\x03\x02\x02\x02\u04DD\u04DE\x03\x02\x02\x02\u04DE" +
    "\u04DF\x03\x02\x02\x02\u04DF\u04E0\x07\xC3\x02\x02\u04E0\u04E1\x07\xE8" +
    "\x02\x02\u04E1\u04E2\x05\xB6\\\x02\u04E2\x1B\x03\x02\x02\x02\u04E3\u04E4" +
    "\x07)\x02\x02\u04E4\u04E5\x07 \x02\x02\u04E5\u04E9\x05\x9EP\x02\u04E6" +
    "\u04E7\x07\xDF\x02\x02\u04E7\u04E8\x07 \x02\x02\u04E8\u04EA\x05\xA2R\x02" +
    "\u04E9\u04E6\x03\x02\x02\x02\u04E9\u04EA\x03\x02\x02\x02\u04EA\u04EB\x03" +
    "\x02\x02\x02\u04EB\u04EC\x07}\x02\x02\u04EC\u04ED\x07\u0127\x02\x02\u04ED" +
    "\u04EE\x07\x1F\x02\x02\u04EE\x1D\x03\x02\x02\x02\u04EF\u04F0\x07\xDC\x02" +
    "\x02\u04F0\u04F1\x07 \x02\x02\u04F1\u04F2\x05\x9EP\x02\u04F2\u04F5\x07" +
    "\xA0\x02\x02\u04F3\u04F6\x05D#\x02\u04F4\u04F6\x05F$\x02\u04F5\u04F3\x03" +
    "\x02\x02\x02\u04F5\u04F4\x03\x02\x02\x02\u04F6\u04FA\x03\x02\x02\x02\u04F7" +
    "\u04F8\x07\xE2\x02\x02\u04F8\u04F9\x07\x18\x02\x02\u04F9\u04FB\x07J\x02" +
    "\x02\u04FA\u04F7\x03\x02\x02\x02\u04FA\u04FB\x03\x02\x02\x02\u04FB\x1F" +
    "\x03\x02\x02\x02\u04FC\u04FD\x07\x8D\x02\x02\u04FD\u04FE\x07\u0123\x02" +
    "\x02\u04FE!\x03\x02\x02\x02\u04FF\u0500\x07/\x02\x02\u0500\u0501\x07\u0123" +
    "\x02\x02\u0501#\x03\x02\x02\x02\u0502\u0504\x054\x1B\x02\u0503\u0502\x03" +
    "\x02\x02\x02\u0503\u0504\x03\x02\x02\x02\u0504\u0505\x03\x02\x02\x02\u0505" +
    "\u0506\x05V,\x02\u0506\u0507\x05R*\x02\u0507%\x03\x02\x02\x02\u0508\u0509" +
    "\x07z\x02\x02\u0509\u050B\x07\xAC\x02\x02\u050A\u050C\x07\xE8\x02\x02" +
    "\u050B\u050A\x03\x02\x02\x02\u050B\u050C\x03\x02\x02\x02\u050C\u050D\x03" +
    "\x02\x02\x02\u050D\u0514\x05\xB6\\\x02\u050E\u0512\x05*\x16\x02\u050F" +
    "\u0510\x07q\x02\x02\u0510\u0511\x07\x9C\x02\x02\u0511\u0513\x07V\x02\x02" +
    "\u0512\u050F\x03\x02\x02\x02\u0512\u0513\x03\x02\x02\x02\u0513\u0515\x03" +
    "\x02\x02\x02\u0514\u050E\x03\x02\x02\x02\u0514\u0515\x03\x02\x02\x02\u0515" +
    "\u0517\x03\x02\x02\x02\u0516\u0518\x05\x9EP\x02\u0517\u0516\x03\x02\x02" +
    "\x02\u0517\u0518\x03\x02\x02\x02\u0518\u0546\x03\x02\x02\x02\u0519\u051A" +
    "\x07z\x02\x02\u051A\u051C\x07}\x02\x02\u051B\u051D\x07\xE8\x02\x02\u051C" +
    "\u051B\x03\x02\x02\x02\u051C\u051D\x03\x02\x02\x02\u051D\u051E\x03\x02" +
    "\x02\x02\u051E\u0520\x05\xB6\\\x02\u051F\u0521\x05*\x16\x02\u0520\u051F" +
    "\x03\x02\x02\x02\u0520\u0521\x03\x02\x02\x02\u0521\u0525\x03\x02\x02\x02" +
    "\u0522\u0523\x07q\x02\x02\u0523\u0524\x07\x9C\x02\x02\u0524\u0526\x07" +
    "V\x02\x02\u0525\u0522\x03\x02\x02\x02\u0525\u0526\x03\x02\x02\x02\u0526" +
    "\u0528\x03\x02\x02\x02\u0527\u0529\x05\x9EP\x02\u0528\u0527\x03\x02\x02" +
    "\x02\u0528\u0529\x03\x02\x02\x02\u0529\u0546\x03\x02\x02\x02\u052A\u052B" +
    "\x07z\x02\x02\u052B\u052D\x07\xAC\x02\x02\u052C\u052E\x07\x8C\x02\x02" +
    "\u052D\u052C\x03\x02\x02\x02\u052D\u052E\x03\x02\x02\x02\u052E\u052F\x03" +
    "\x02\x02\x02\u052F\u0530\x07K\x02\x02\u0530\u0532\x07\u0123\x02\x02\u0531" +
    "\u0533\x05\xB2Z\x02\u0532\u0531\x03\x02\x02\x02\u0532\u0533\x03\x02\x02" +
    "\x02\u0533\u0535\x03\x02\x02\x02\u0534\u0536\x05H%\x02\u0535\u0534\x03" +
    "\x02\x02\x02\u0535\u0536\x03\x02\x02\x02\u0536\u0546\x03\x02\x02\x02\u0537" +
    "\u0538\x07z\x02\x02\u0538\u053A\x07\xAC\x02\x02\u0539\u053B\x07\x8C\x02" +
    "\x02\u053A\u0539\x03\x02\x02\x02\u053A\u053B\x03\x02\x02\x02\u053B\u053C" +
    "\x03\x02\x02\x02\u053C\u053E\x07K\x02\x02\u053D\u053F\x07\u0123\x02\x02" +
    "\u053E\u053D\x03\x02\x02\x02\u053E\u053F\x03\x02\x02\x02\u053F\u0540\x03" +
    "\x02\x02\x02\u0540\u0543\x058\x1D\x02\u0541\u0542\x07\xA3\x02\x02\u0542" +
    "\u0544\x05<\x1F\x02\u0543\u0541\x03\x02\x02\x02\u0543\u0544\x03\x02\x02" +
    "\x02\u0544\u0546\x03\x02\x02\x02\u0545\u0508\x03\x02\x02\x02\u0545\u0519" +
    "\x03\x02\x02\x02\u0545\u052A\x03\x02\x02\x02\u0545\u0537\x03\x02\x02\x02" +
    "\u0546'\x03\x02\x02\x02\u0547\u0549\x05*\x16\x02\u0548\u054A\x05 \x11" +
    "\x02\u0549\u0548\x03\x02\x02\x02\u0549\u054A\x03\x02\x02\x02\u054A)\x03" +
    "\x02\x02\x02\u054B\u054C\x07\xAD\x02\x02\u054C\u054D\x07\x04\x02\x02\u054D" +
    "\u0552\x05,\x17\x02\u054E\u054F\x07\x06\x02\x02\u054F\u0551\x05,\x17\x02" +
    "\u0550\u054E\x03\x02\x02\x02\u0551\u0554\x03\x02\x02\x02\u0552\u0550\x03" +
    "\x02\x02\x02\u0552\u0553\x03\x02\x02\x02\u0553\u0555\x03\x02\x02\x02\u0554" +
    "\u0552\x03\x02\x02\x02\u0555\u0556\x07\x05\x02\x02\u0556+\x03\x02\x02" +
    "\x02\u0557\u055A\x05\u0110\x89\x02\u0558\u0559\x07\u0110\x02\x02\u0559" +
    "\u055B\x05\xD4k\x02\u055A\u0558\x03\x02\x02\x02\u055A\u055B\x03\x02\x02" +
    "\x02\u055B-\x03\x02\x02\x02\u055C\u055D\t\x10\x02\x02\u055D/\x03\x02\x02" +
    "\x02\u055E\u0564\x05\u010A\x86\x02\u055F\u0564\x07\u0123\x02\x02\u0560" +
    "\u0564\x05\xD6l\x02\u0561\u0564\x05\xD8m\x02\u0562\u0564\x05\xDAn\x02" +
    "\u0563\u055E\x03\x02\x02\x02\u0563\u055F\x03\x02\x02\x02\u0563\u0560\x03" +
    "\x02\x02\x02\u0563\u0561\x03\x02\x02\x02\u0563\u0562\x03\x02\x02\x02\u0564" +
    "1\x03\x02\x02\x02\u0565\u056A\x05\u0110\x89\x02\u0566\u0567\x07\x07\x02" +
    "\x02\u0567\u0569\x05\u0110\x89\x02\u0568\u0566\x03\x02\x02\x02\u0569\u056C" +
    "\x03\x02\x02\x02\u056A\u0568\x03\x02\x02\x02\u056A\u056B\x03\x02\x02\x02" +
    "\u056B3\x03\x02\x02\x02\u056C\u056A\x03\x02\x02\x02\u056D\u056E\x07\u010D" +
    "\x02\x02\u056E\u0573\x056\x1C\x02\u056F\u0570\x07\x06\x02\x02\u0570\u0572" +
    "\x056\x1C\x02\u0571\u056F\x03\x02\x02\x02\u0572\u0575\x03\x02\x02\x02" +
    "\u0573\u0571\x03\x02\x02\x02\u0573\u0574\x03\x02\x02\x02\u05745\x03\x02" +
    "\x02\x02\u0575\u0573\x03\x02\x02\x02\u0576\u0578\x05\u010C\x87\x02\u0577" +
    "\u0579\x05\x9EP\x02\u0578\u0577\x03\x02\x02\x02\u0578\u0579\x03\x02\x02" +
    "\x02\u0579\u057B\x03\x02\x02\x02\u057A\u057C\x07\x18\x02\x02\u057B\u057A" +
    "\x03\x02\x02\x02\u057B\u057C\x03\x02\x02\x02\u057C\u057D\x03\x02\x02\x02" +
    "\u057D\u057E\x07\x04\x02\x02\u057E\u057F\x05$\x13\x02\u057F\u0580\x07" +
    "\x05\x02\x02\u05807\x03\x02\x02\x02\u0581\u0582\x07\u0106\x02\x02\u0582" +
    "\u0583\x05\xB6\\\x02\u05839\x03\x02\x02\x02\u0584\u0585\x07\xA3\x02\x02" +
    "\u0585\u0592\x05<\x1F\x02\u0586\u0587\x07\xAE\x02\x02\u0587\u0588\x07" +
    " \x02\x02\u0588\u0592\x05\xC0a\x02\u0589\u0592\x05\x1E\x10\x02\u058A\u0592" +
    "\x05\x1C\x0F\x02\u058B\u0592\x05\xB2Z\x02\u058C\u0592\x05H%\x02\u058D" +
    '\u0592\x05 \x11\x02\u058E\u0592\x05"\x12\x02\u058F\u0590\x07\xEB\x02' +
    "\x02\u0590\u0592\x05<\x1F\x02\u0591\u0584\x03\x02\x02\x02\u0591\u0586" +
    "\x03\x02\x02\x02\u0591\u0589\x03\x02\x02\x02\u0591\u058A\x03\x02\x02\x02" +
    "\u0591\u058B\x03\x02\x02\x02\u0591\u058C\x03\x02\x02\x02\u0591\u058D\x03" +
    "\x02\x02\x02\u0591\u058E\x03\x02\x02\x02\u0591\u058F\x03\x02\x02\x02\u0592" +
    "\u0595\x03\x02\x02\x02\u0593\u0591\x03\x02\x02\x02\u0593\u0594\x03\x02" +
    "\x02\x02\u0594;\x03\x02\x02\x02\u0595\u0593\x03\x02\x02\x02\u0596\u0597" +
    "\x07\x04\x02\x02\u0597\u059C\x05> \x02\u0598\u0599\x07\x06\x02\x02\u0599" +
    "\u059B\x05> \x02\u059A\u0598\x03\x02\x02\x02\u059B\u059E\x03\x02\x02\x02" +
    "\u059C\u059A\x03\x02\x02\x02\u059C\u059D\x03\x02\x02\x02\u059D\u059F\x03" +
    "\x02\x02\x02\u059E\u059C\x03\x02\x02\x02\u059F\u05A0\x07\x05\x02\x02\u05A0" +
    "=\x03\x02\x02\x02\u05A1\u05A6\x05@!\x02\u05A2\u05A4\x07\u0110\x02\x02" +
    "\u05A3\u05A2\x03\x02\x02\x02\u05A3\u05A4\x03\x02\x02\x02\u05A4\u05A5\x03" +
    '\x02\x02\x02\u05A5\u05A7\x05B"\x02\u05A6\u05A3\x03\x02\x02\x02\u05A6' +
    "\u05A7\x03\x02\x02\x02\u05A7?\x03\x02\x02\x02\u05A8\u05AD\x05\u0110\x89" +
    "\x02\u05A9\u05AA\x07\x07\x02\x02\u05AA\u05AC\x05\u0110\x89\x02\u05AB\u05A9" +
    "\x03\x02\x02\x02\u05AC\u05AF\x03\x02\x02\x02\u05AD\u05AB\x03\x02\x02\x02" +
    "\u05AD\u05AE\x03\x02\x02\x02\u05AE\u05B2\x03\x02\x02\x02\u05AF\u05AD\x03" +
    "\x02\x02\x02\u05B0\u05B2\x07\u0123\x02\x02\u05B1\u05A8\x03\x02\x02\x02" +
    "\u05B1\u05B0\x03\x02\x02\x02\u05B2A\x03\x02\x02\x02\u05B3\u05B8\x07\u0127" +
    "\x02\x02\u05B4\u05B8\x07\u0129\x02\x02\u05B5\u05B8\x05\xDCo\x02\u05B6" +
    "\u05B8\x07\u0123\x02\x02\u05B7\u05B3\x03\x02\x02\x02\u05B7\u05B4\x03\x02" +
    "\x02\x02\u05B7\u05B5\x03\x02\x02\x02\u05B7\u05B6\x03\x02\x02\x02\u05B8" +
    "C\x03\x02\x02\x02\u05B9\u05BA\x07\x04\x02\x02\u05BA\u05BF\x05\xD4k\x02" +
    "\u05BB\u05BC\x07\x06\x02\x02\u05BC\u05BE\x05\xD4k\x02\u05BD\u05BB\x03" +
    "\x02\x02\x02\u05BE\u05C1\x03\x02\x02\x02\u05BF\u05BD\x03\x02\x02\x02\u05BF" +
    "\u05C0\x03\x02\x02\x02\u05C0\u05C2\x03\x02\x02\x02\u05C1\u05BF\x03\x02" +
    "\x02\x02\u05C2\u05C3\x07\x05\x02\x02\u05C3E\x03\x02\x02\x02\u05C4\u05C5" +
    "\x07\x04\x02\x02\u05C5\u05CA\x05D#\x02\u05C6\u05C7\x07\x06\x02\x02\u05C7" +
    "\u05C9\x05D#\x02\u05C8\u05C6\x03\x02\x02\x02\u05C9\u05CC\x03\x02\x02\x02" +
    "\u05CA\u05C8\x03\x02\x02\x02\u05CA\u05CB\x03\x02\x02\x02\u05CB\u05CD\x03" +
    "\x02\x02\x02\u05CC\u05CA\x03\x02\x02\x02\u05CD\u05CE\x07\x05\x02\x02\u05CE" +
    "G\x03\x02\x02\x02\u05CF\u05D0\x07\xE2\x02\x02\u05D0\u05D1\x07\x18\x02" +
    "\x02\u05D1\u05D6\x05J&\x02\u05D2\u05D3\x07\xE2\x02\x02\u05D3\u05D4\x07" +
    " \x02\x02\u05D4\u05D6\x05L'\x02\u05D5\u05CF\x03\x02\x02\x02\u05D5\u05D2" +
    "\x03\x02\x02\x02\u05D6I\x03\x02\x02\x02\u05D7\u05D8\x07y\x02\x02\u05D8" +
    "\u05D9\x07\u0123\x02\x02\u05D9\u05DA\x07\xA8\x02\x02\u05DA\u05DD\x07\u0123" +
    "\x02\x02\u05DB\u05DD\x05\u0110\x89\x02\u05DC\u05D7\x03\x02\x02\x02\u05DC" +
    "\u05DB\x03\x02\x02\x02\u05DDK\x03\x02\x02\x02\u05DE\u05E2\x07\u0123\x02" +
    "\x02\u05DF\u05E0\x07\u010D\x02\x02\u05E0\u05E1\x07\xD6\x02\x02\u05E1\u05E3" +
    "\x05<\x1F\x02\u05E2\u05DF\x03\x02\x02\x02\u05E2\u05E3\x03\x02\x02\x02" +
    "\u05E3M\x03\x02\x02\x02\u05E4\u05E5\x05\u0110\x89\x02\u05E5\u05E6\x07" +
    "\u0123\x02\x02\u05E6O\x03\x02\x02\x02\u05E7\u05E8\x05&\x14\x02\u05E8\u05E9" +
    "\x05V,\x02\u05E9\u05EA\x05R*\x02\u05EA\u061B\x03\x02\x02\x02\u05EB\u05ED" +
    "\x05|?\x02\u05EC\u05EE\x05T+\x02\u05ED\u05EC\x03\x02\x02\x02\u05EE\u05EF" +
    "\x03\x02\x02\x02\u05EF\u05ED\x03\x02\x02\x02\u05EF\u05F0\x03\x02\x02\x02" +
    "\u05F0\u061B\x03\x02\x02\x02\u05F1\u05F2\x07E\x02\x02\u05F2\u05F3\x07" +
    "g\x02\x02\u05F3\u05F4\x05\xB6\\\x02\u05F4\u05F6\x05\xB0Y\x02\u05F5\u05F7" +
    "\x05t;\x02\u05F6\u05F5\x03\x02\x02\x02\u05F6\u05F7\x03\x02\x02\x02\u05F7" +
    "\u061B\x03\x02\x02\x02\u05F8\u05F9\x07\u0103\x02\x02\u05F9\u05FA\x05\xB6" +
    "\\\x02\u05FA\u05FB\x05\xB0Y\x02\u05FB\u05FD\x05f4\x02\u05FC\u05FE\x05" +
    "t;\x02\u05FD\u05FC\x03\x02\x02\x02\u05FD\u05FE\x03\x02\x02\x02\u05FE\u061B" +
    "\x03\x02\x02\x02\u05FF\u0600\x07\x94\x02\x02\u0600\u0601\x07}\x02\x02" +
    "\u0601\u0602\x05\xB6\\\x02\u0602\u0603\x05\xB0Y\x02\u0603\u0609\x07\u0106" +
    "\x02\x02\u0604\u060A\x05\xB6\\\x02\u0605\u0606\x07\x04\x02\x02\u0606\u0607" +
    "\x05$\x13\x02\u0607\u0608\x07\x05\x02\x02\u0608\u060A\x03\x02\x02\x02" +
    "\u0609\u0604\x03\x02\x02\x02\u0609\u0605\x03\x02\x02\x02\u060A\u060B\x03" +
    "\x02\x02\x02\u060B\u060C\x05\xB0Y\x02\u060C\u060D\x07\xA0\x02\x02\u060D" +
    "\u0611\x05\xCCg\x02\u060E\u0610\x05h5\x02\u060F\u060E\x03\x02\x02\x02" +
    "\u0610\u0613\x03\x02\x02\x02\u0611\u060F\x03\x02\x02\x02\u0611\u0612\x03" +
    "\x02\x02\x02\u0612\u0617\x03\x02\x02\x02\u0613\u0611\x03\x02\x02\x02\u0614" +
    "\u0616\x05j6\x02\u0615\u0614\x03\x02\x02\x02\u0616\u0619\x03\x02\x02\x02" +
    "\u0617\u0615\x03\x02\x02\x02\u0617\u0618\x03\x02\x02\x02\u0618\u061B\x03" +
    "\x02\x02\x02\u0619\u0617\x03\x02\x02\x02\u061A\u05E7\x03\x02\x02\x02\u061A" +
    "\u05EB\x03\x02\x02\x02\u061A\u05F1\x03\x02\x02\x02\u061A\u05F8\x03\x02" +
    "\x02\x02\u061A\u05FF\x03\x02\x02\x02\u061BQ\x03\x02\x02\x02\u061C\u061D" +
    "\x07\xA5\x02\x02\u061D\u061E\x07 \x02\x02\u061E\u0623\x05Z.\x02\u061F" +
    "\u0620\x07\x06\x02\x02\u0620\u0622\x05Z.\x02\u0621\u061F\x03\x02\x02\x02" +
    "\u0622\u0625\x03\x02\x02\x02\u0623\u0621\x03\x02\x02\x02\u0623\u0624\x03" +
    "\x02\x02\x02\u0624\u0627\x03\x02\x02\x02\u0625\u0623\x03\x02\x02\x02\u0626" +
    "\u061C\x03\x02\x02\x02\u0626\u0627\x03\x02\x02\x02\u0627\u0632\x03\x02" +
    "\x02\x02\u0628\u0629\x07(\x02\x02\u0629\u062A\x07 \x02\x02\u062A\u062F" +
    "\x05\xC8e\x02\u062B\u062C\x07\x06\x02\x02\u062C\u062E\x05\xC8e\x02\u062D" +
    "\u062B\x03\x02\x02\x02\u062E\u0631\x03\x02\x02\x02\u062F\u062D\x03\x02" +
    "\x02\x02\u062F\u0630\x03\x02\x02\x02\u0630\u0633\x03\x02\x02\x02\u0631" +
    "\u062F\x03\x02\x02\x02\u0632\u0628\x03\x02\x02\x02\u0632\u0633\x03\x02" +
    "\x02\x02\u0633\u063E\x03\x02\x02\x02\u0634\u0635\x07M\x02\x02\u0635\u0636" +
    "\x07 \x02\x02\u0636\u063B\x05\xC8e\x02\u0637\u0638\x07\x06\x02\x02\u0638" +
    "\u063A\x05\xC8e\x02\u0639\u0637\x03\x02\x02\x02\u063A\u063D\x03\x02\x02" +
    "\x02\u063B\u0639\x03\x02\x02\x02\u063B\u063C\x03\x02\x02\x02\u063C\u063F" +
    "\x03\x02\x02\x02\u063D\u063B\x03\x02\x02\x02\u063E\u0634\x03\x02\x02\x02" +
    "\u063E\u063F\x03\x02\x02\x02\u063F\u064A\x03\x02\x02\x02\u0640\u0641\x07" +
    "\xDE\x02\x02\u0641\u0642\x07 \x02\x02\u0642\u0647\x05Z.\x02\u0643\u0644" +
    "\x07\x06\x02\x02\u0644\u0646\x05Z.\x02\u0645\u0643\x03\x02\x02\x02\u0646" +
    "\u0649\x03\x02\x02\x02\u0647\u0645\x03\x02\x02\x02\u0647\u0648\x03\x02" +
    "\x02\x02\u0648\u064B\x03\x02\x02\x02\u0649\u0647\x03\x02\x02\x02\u064A" +
    "\u0640\x03\x02\x02\x02\u064A\u064B\x03\x02\x02\x02\u064B\u064D\x03\x02" +
    "\x02\x02\u064C\u064E\x05\xFC\x7F\x02\u064D\u064C\x03\x02\x02\x02\u064D" +
    "\u064E\x03\x02\x02\x02\u064E\u0654\x03\x02\x02\x02\u064F\u0652\x07\x88" +
    "\x02\x02\u0650\u0653\x07\x10\x02\x02\u0651\u0653\x05\xC8e\x02\u0652\u0650" +
    "\x03\x02\x02\x02\u0652\u0651\x03\x02\x02\x02\u0653\u0655\x03\x02\x02\x02" +
    "\u0654\u064F\x03\x02\x02\x02\u0654\u0655\x03\x02\x02\x02\u0655S\x03\x02" +
    "\x02\x02\u0656\u0657\x05&\x14\x02\u0657\u0658\x05^0\x02\u0658U\x03\x02" +
    "\x02\x02\u0659\u065A\b,\x01\x02\u065A\u065B\x05X-\x02\u065B\u0673\x03" +
    "\x02\x02\x02\u065C\u065D\f\x05\x02\x02\u065D\u065E\x06,\x03\x02\u065E" +
    "\u0660\t\x11\x02\x02\u065F\u0661\x05\x90I\x02\u0660\u065F\x03\x02\x02" +
    "\x02\u0660\u0661\x03\x02\x02\x02\u0661\u0662\x03\x02\x02\x02\u0662\u0672" +
    "\x05V,\x06\u0663\u0664\f\x04\x02\x02\u0664\u0665\x06,\x05\x02\u0665\u0667" +
    "\x07{\x02\x02\u0666\u0668\x05\x90I\x02\u0667\u0666\x03\x02\x02\x02\u0667" +
    "\u0668\x03\x02\x02\x02\u0668\u0669\x03\x02\x02\x02\u0669\u0672\x05V,\x05" +
    "\u066A\u066B\f\x03\x02\x02\u066B\u066C\x06,\x07\x02\u066C\u066E\t\x12" +
    "\x02\x02\u066D\u066F\x05\x90I\x02\u066E\u066D\x03\x02\x02\x02\u066E\u066F" +
    "\x03\x02\x02\x02\u066F\u0670\x03\x02\x02\x02\u0670\u0672\x05V,\x04\u0671" +
    "\u065C\x03\x02\x02\x02\u0671\u0663\x03\x02\x02\x02\u0671\u066A\x03\x02" +
    "\x02\x02\u0672\u0675\x03\x02\x02\x02\u0673\u0671\x03\x02\x02\x02\u0673" +
    "\u0674\x03\x02\x02\x02\u0674W\x03\x02\x02\x02\u0675\u0673\x03\x02\x02" +
    "\x02\u0676\u0680\x05`1\x02\u0677\u0680\x05\\/\x02\u0678\u0679\x07\xE8" +
    "\x02\x02\u0679\u0680\x05\xB6\\\x02\u067A\u0680\x05\xACW\x02\u067B\u067C" +
    "\x07\x04\x02\x02\u067C\u067D\x05$\x13\x02\u067D\u067E\x07\x05\x02\x02" +
    "\u067E\u0680\x03\x02\x02\x02\u067F\u0676\x03\x02\x02\x02\u067F\u0677\x03" +
    "\x02\x02\x02\u067F\u0678\x03\x02\x02\x02\u067F\u067A\x03\x02\x02\x02\u067F" +
    "\u067B\x03\x02\x02\x02\u0680Y\x03\x02\x02\x02\u0681\u0683\x05\xC8e\x02" +
    "\u0682\u0684\t\x13\x02\x02\u0683\u0682\x03\x02\x02\x02\u0683\u0684\x03" +
    "\x02\x02\x02\u0684\u0687\x03\x02\x02\x02\u0685\u0686\x07\x9E\x02\x02\u0686" +
    "\u0688\t\x14\x02\x02\u0687\u0685\x03\x02\x02\x02\u0687\u0688\x03\x02\x02" +
    "\x02\u0688[\x03\x02\x02\x02\u0689\u068B\x05|?\x02\u068A\u068C\x05^0\x02" +
    "\u068B\u068A\x03\x02\x02\x02\u068C\u068D\x03\x02\x02\x02\u068D\u068B\x03" +
    "\x02\x02\x02\u068D\u068E\x03\x02\x02\x02\u068E]\x03\x02\x02\x02\u068F" +
    "\u0691\x05b2\x02\u0690\u0692\x05t;\x02\u0691\u0690\x03\x02\x02\x02\u0691" +
    "\u0692\x03\x02\x02\x02\u0692\u0693\x03\x02\x02\x02\u0693\u0694\x05R*\x02" +
    "\u0694\u06AB\x03\x02\x02\x02\u0695\u0699\x05d3\x02\u0696\u0698\x05\x8E" +
    "H\x02\u0697\u0696\x03\x02\x02\x02\u0698\u069B\x03\x02\x02\x02\u0699\u0697" +
    "\x03\x02\x02\x02\u0699\u069A\x03\x02\x02\x02\u069A\u069D\x03\x02\x02\x02" +
    "\u069B\u0699\x03\x02\x02\x02\u069C\u069E\x05t;\x02\u069D\u069C\x03\x02" +
    "\x02\x02\u069D\u069E\x03\x02\x02\x02\u069E\u06A0\x03\x02\x02\x02\u069F" +
    "\u06A1\x05~@\x02\u06A0\u069F\x03\x02\x02\x02\u06A0\u06A1\x03\x02\x02\x02" +
    "\u06A1\u06A3\x03\x02\x02\x02\u06A2\u06A4\x05v<\x02\u06A3\u06A2\x03\x02" +
    "\x02\x02\u06A3\u06A4\x03\x02\x02\x02\u06A4\u06A6\x03\x02\x02\x02\u06A5" +
    "\u06A7\x05\xFC\x7F\x02\u06A6\u06A5\x03\x02\x02\x02\u06A6\u06A7\x03\x02" +
    "\x02\x02\u06A7\u06A8\x03\x02\x02\x02\u06A8\u06A9\x05R*\x02\u06A9\u06AB" +
    "\x03\x02\x02\x02\u06AA\u068F\x03\x02\x02\x02\u06AA\u0695\x03\x02\x02\x02" +
    "\u06AB_\x03\x02\x02\x02\u06AC\u06AE\x05b2\x02\u06AD\u06AF\x05|?\x02\u06AE" +
    "\u06AD\x03\x02\x02\x02\u06AE\u06AF\x03\x02\x02\x02\u06AF\u06B3\x03\x02" +
    "\x02\x02\u06B0\u06B2\x05\x8EH\x02\u06B1\u06B0\x03\x02\x02\x02\u06B2\u06B5" +
    "\x03\x02\x02\x02\u06B3\u06B1\x03\x02\x02\x02\u06B3\u06B4\x03\x02\x02\x02" +
    "\u06B4\u06B7\x03\x02\x02\x02\u06B5\u06B3\x03\x02\x02\x02\u06B6\u06B8\x05" +
    "t;\x02\u06B7\u06B6\x03\x02\x02\x02\u06B7\u06B8\x03\x02\x02\x02\u06B8\u06BA" +
    "\x03\x02\x02\x02\u06B9\u06BB\x05~@\x02\u06BA\u06B9\x03\x02\x02\x02\u06BA" +
    "\u06BB\x03\x02\x02\x02\u06BB\u06BD\x03\x02\x02\x02\u06BC\u06BE\x05v<\x02" +
    "\u06BD\u06BC\x03\x02\x02\x02\u06BD\u06BE\x03\x02\x02\x02\u06BE\u06C0\x03" +
    "\x02\x02\x02\u06BF\u06C1\x05\xFC\x7F\x02\u06C0\u06BF\x03\x02\x02\x02\u06C0" +
    "\u06C1\x03\x02\x02\x02\u06C1\u06D9\x03\x02\x02\x02\u06C2\u06C4\x05d3\x02" +
    "\u06C3\u06C5\x05|?\x02\u06C4\u06C3\x03\x02\x02\x02\u06C4\u06C5\x03\x02" +
    "\x02\x02\u06C5\u06C9\x03\x02\x02\x02\u06C6\u06C8\x05\x8EH\x02\u06C7\u06C6" +
    "\x03\x02\x02\x02\u06C8\u06CB\x03\x02\x02\x02\u06C9\u06C7\x03\x02\x02\x02" +
    "\u06C9\u06CA\x03\x02\x02\x02\u06CA\u06CD\x03\x02\x02\x02\u06CB\u06C9\x03" +
    "\x02\x02\x02\u06CC\u06CE\x05t;\x02\u06CD\u06CC\x03\x02\x02\x02\u06CD\u06CE" +
    "\x03\x02\x02\x02\u06CE\u06D0\x03\x02\x02\x02\u06CF\u06D1\x05~@\x02\u06D0" +
    "\u06CF\x03\x02\x02\x02\u06D0\u06D1\x03\x02\x02\x02\u06D1\u06D3\x03\x02" +
    "\x02\x02\u06D2\u06D4\x05v<\x02\u06D3\u06D2\x03\x02\x02\x02\u06D3\u06D4" +
    "\x03\x02\x02\x02\u06D4\u06D6\x03\x02\x02\x02\u06D5\u06D7\x05\xFC\x7F\x02" +
    "\u06D6\u06D5\x03\x02\x02\x02\u06D6\u06D7\x03\x02\x02\x02\u06D7\u06D9\x03" +
    "\x02\x02\x02\u06D8\u06AC\x03\x02\x02\x02\u06D8\u06C2\x03\x02\x02\x02\u06D9" +
    "a\x03\x02\x02\x02\u06DA\u06DB\x07\xD2\x02\x02\u06DB\u06DC\x07\xF5\x02" +
    "\x02\u06DC\u06DE\x07\x04\x02\x02\u06DD\u06DF\x05\x90I\x02\u06DE\u06DD" +
    "\x03\x02\x02\x02\u06DE\u06DF\x03\x02\x02\x02\u06DF\u06E0\x03\x02\x02\x02" +
    "\u06E0\u06E1\x05\xCAf\x02\u06E1\u06E2\x07\x05\x02\x02\u06E2\u06EE\x03" +
    "\x02\x02\x02\u06E3\u06E5\x07\x92\x02\x02\u06E4\u06E6\x05\x90I\x02\u06E5" +
    "\u06E4\x03\x02\x02\x02\u06E5\u06E6\x03\x02\x02\x02\u06E6\u06E7\x03\x02" +
    "\x02\x02\u06E7\u06EE\x05\xCAf\x02\u06E8\u06EA\x07\xBE\x02\x02\u06E9\u06EB" +
    "\x05\x90I\x02\u06EA\u06E9\x03\x02\x02\x02\u06EA\u06EB\x03\x02\x02\x02" +
    "\u06EB\u06EC\x03\x02\x02\x02\u06EC\u06EE\x05\xCAf\x02\u06ED\u06DA\x03" +
    "\x02\x02\x02\u06ED\u06E3\x03\x02\x02\x02\u06ED\u06E8\x03\x02\x02\x02\u06EE" +
    "\u06F0\x03\x02\x02\x02\u06EF\u06F1\x05\xB2Z\x02\u06F0\u06EF\x03\x02\x02" +
    "\x02\u06F0\u06F1\x03\x02\x02\x02\u06F1\u06F4\x03\x02\x02\x02\u06F2\u06F3" +
    "\x07\xBC\x02\x02\u06F3\u06F5\x07\u0123\x02\x02\u06F4\u06F2\x03\x02\x02" +
    "\x02\u06F4\u06F5\x03\x02\x02\x02\u06F5\u06F6\x03\x02\x02\x02\u06F6\u06F7" +
    "\x07\u0106\x02\x02\u06F7\u0704\x07\u0123\x02\x02\u06F8\u0702\x07\x18\x02" +
    "\x02\u06F9\u0703\x05\xA0Q\x02\u06FA\u0703\x05\xF2z\x02\u06FB\u06FE\x07" +
    "\x04\x02\x02\u06FC\u06FF\x05\xA0Q\x02\u06FD\u06FF\x05\xF2z\x02\u06FE\u06FC" +
    "\x03\x02\x02\x02\u06FE\u06FD\x03\x02\x02\x02\u06FF\u0700\x03\x02\x02\x02" +
    "\u0700\u0701\x07\x05\x02\x02\u0701\u0703\x03\x02\x02\x02\u0702\u06F9\x03" +
    "\x02\x02\x02\u0702\u06FA\x03\x02\x02\x02\u0702\u06FB\x03\x02\x02\x02\u0703" +
    "\u0705\x03\x02\x02\x02\u0704\u06F8\x03\x02\x02\x02\u0704\u0705\x03\x02" +
    "\x02\x02\u0705\u0707\x03\x02\x02\x02\u0706\u0708\x05\xB2Z\x02\u0707\u0706" +
    "\x03\x02\x02\x02\u0707\u0708\x03\x02\x02\x02\u0708\u070B\x03\x02\x02\x02" +
    "\u0709\u070A\x07\xBB\x02\x02\u070A\u070C\x07\u0123\x02\x02\u070B\u0709" +
    "\x03\x02\x02\x02\u070B\u070C\x03\x02\x02\x02\u070Cc\x03\x02\x02\x02\u070D" +
    "\u0711\x07\xD2\x02\x02\u070E\u0710\x05x=\x02\u070F\u070E\x03\x02\x02\x02" +
    "\u0710\u0713\x03\x02\x02\x02\u0711\u070F\x03\x02\x02\x02\u0711\u0712\x03" +
    "\x02\x02\x02\u0712\u0715\x03\x02\x02\x02\u0713\u0711\x03\x02\x02\x02\u0714" +
    "\u0716\x05\x90I\x02\u0715\u0714\x03\x02\x02\x02\u0715\u0716\x03\x02\x02" +
    "\x02\u0716\u0717\x03\x02\x02\x02\u0717\u0718\x05\xBE`\x02\u0718e\x03\x02" +
    "\x02\x02\u0719\u071A\x07\xD8\x02\x02\u071A\u071B\x05p9\x02\u071Bg\x03" +
    "\x02\x02\x02\u071C\u071D\x07\u010A\x02\x02\u071D\u0720\x07\x93\x02\x02" +
    "\u071E\u071F\x07\x13\x02\x02\u071F\u0721\x05\xCCg\x02\u0720\u071E\x03" +
    "\x02\x02\x02\u0720\u0721\x03\x02\x02\x02\u0721\u0722\x03\x02\x02\x02\u0722" +
    "\u0723\x07\xEE\x02\x02\u0723\u0724\x05l7\x02\u0724i\x03\x02\x02\x02\u0725" +
    "\u0726\x07\u010A\x02\x02\u0726\u0727\x07\x9C\x02\x02\u0727\u072A\x07\x93" +
    "\x02\x02\u0728\u0729\x07\x13\x02\x02\u0729\u072B\x05\xCCg\x02\u072A\u0728" +
    "\x03\x02\x02\x02\u072A\u072B\x03\x02\x02\x02\u072B\u072C\x03\x02\x02\x02" +
    "\u072C\u072D\x07\xEE\x02\x02\u072D\u072E\x05n8\x02\u072Ek\x03\x02\x02" +
    "\x02\u072F\u0737\x07E\x02\x02\u0730\u0731\x07\u0103\x02\x02\u0731\u0732" +
    "\x07\xD8\x02\x02\u0732\u0737\x07\u011A\x02\x02\u0733\u0734\x07\u0103";
  private static readonly _serializedATNSegment4: string =
    "\x02\x02\u0734\u0735\x07\xD8\x02\x02\u0735\u0737\x05p9\x02\u0736\u072F" +
    "\x03\x02\x02\x02\u0736\u0730\x03\x02\x02\x02\u0736\u0733\x03\x02\x02\x02" +
    "\u0737m\x03\x02\x02\x02\u0738\u0739\x07z\x02\x02\u0739\u074B\x07\u011A" +
    "\x02\x02\u073A\u073B\x07z\x02\x02\u073B\u073C\x07\x04\x02\x02\u073C\u073D" +
    "\x05\xB4[\x02\u073D\u073E\x07\x05\x02\x02\u073E\u073F\x07\u0107\x02\x02" +
    "\u073F\u0740\x07\x04\x02\x02\u0740\u0745\x05\xC8e\x02\u0741\u0742\x07" +
    "\x06\x02\x02\u0742\u0744\x05\xC8e\x02\u0743\u0741\x03\x02\x02\x02\u0744" +
    "\u0747\x03\x02\x02\x02\u0745\u0743\x03\x02\x02\x02\u0745\u0746\x03\x02" +
    "\x02\x02\u0746\u0748\x03\x02\x02\x02\u0747\u0745\x03\x02\x02\x02\u0748" +
    "\u0749\x07\x05\x02\x02\u0749\u074B\x03\x02\x02\x02\u074A\u0738\x03\x02" +
    "\x02\x02\u074A\u073A\x03\x02\x02\x02\u074Bo\x03\x02\x02\x02\u074C\u0751" +
    "\x05r:\x02\u074D\u074E\x07\x06\x02\x02\u074E\u0750\x05r:\x02\u074F\u074D" +
    "\x03\x02\x02\x02\u0750\u0753\x03\x02\x02\x02\u0751\u074F\x03\x02\x02\x02" +
    "\u0751\u0752\x03\x02\x02\x02\u0752q\x03\x02\x02\x02\u0753\u0751\x03\x02" +
    "\x02\x02\u0754\u0755\x05\xB6\\\x02\u0755\u0756\x07\u0110\x02\x02\u0756" +
    "\u0757\x05\xC8e\x02\u0757s\x03\x02\x02\x02\u0758\u0759\x07\u010B\x02\x02" +
    "\u0759\u075A\x05\xCCg\x02\u075Au\x03\x02\x02\x02\u075B\u075C\x07o\x02" +
    "\x02\u075C\u075D\x05\xCCg\x02\u075Dw\x03\x02\x02\x02\u075E\u075F\x07\b" +
    "\x02\x02\u075F\u0766\x05z>\x02\u0760\u0762\x07\x06\x02\x02\u0761\u0760" +
    "\x03\x02\x02\x02\u0761\u0762\x03\x02\x02\x02\u0762\u0763\x03\x02\x02\x02" +
    "\u0763\u0765\x05z>\x02\u0764\u0761\x03\x02\x02\x02\u0765\u0768\x03\x02" +
    "\x02\x02\u0766\u0764\x03\x02\x02\x02\u0766\u0767\x03\x02\x02\x02\u0767" +
    "\u0769\x03\x02\x02\x02\u0768\u0766\x03\x02\x02\x02\u0769\u076A\x07\t\x02" +
    "\x02\u076Ay\x03\x02\x02\x02\u076B\u0779\x05\u0110\x89\x02\u076C\u076D" +
    "\x05\u0110\x89\x02\u076D\u076E\x07\x04\x02\x02\u076E\u0773\x05\xD2j\x02" +
    "\u076F\u0770\x07\x06\x02\x02\u0770\u0772\x05\xD2j\x02\u0771\u076F\x03" +
    "\x02\x02\x02\u0772\u0775\x03\x02\x02\x02\u0773\u0771\x03\x02\x02\x02\u0773" +
    "\u0774\x03\x02\x02\x02\u0774\u0776\x03\x02\x02\x02\u0775\u0773\x03\x02" +
    "\x02\x02\u0776\u0777\x07\x05\x02\x02\u0777\u0779\x03\x02\x02\x02\u0778" +
    "\u076B\x03\x02\x02\x02\u0778\u076C\x03\x02\x02\x02\u0779{\x03\x02\x02" +
    "\x02\u077A\u077B\x07g\x02\x02\u077B\u0780\x05\x92J\x02\u077C\u077D\x07" +
    "\x06\x02\x02\u077D\u077F\x05\x92J\x02\u077E\u077C\x03\x02\x02\x02\u077F" +
    "\u0782\x03\x02\x02\x02\u0780\u077E\x03\x02\x02\x02\u0780\u0781\x03\x02" +
    "\x02\x02\u0781\u0786\x03\x02\x02\x02\u0782\u0780\x03\x02\x02\x02\u0783" +
    "\u0785\x05\x8EH\x02\u0784\u0783\x03\x02\x02\x02\u0785\u0788\x03\x02\x02" +
    "\x02\u0786\u0784\x03\x02\x02\x02\u0786\u0787\x03\x02\x02\x02\u0787\u078A" +
    "\x03\x02\x02\x02\u0788\u0786\x03\x02\x02\x02\u0789\u078B\x05\x88E\x02" +
    "\u078A\u0789\x03\x02\x02\x02\u078A\u078B\x03\x02\x02\x02\u078B}\x03\x02" +
    "\x02\x02\u078C\u078D\x07m\x02\x02\u078D\u078E\x07 \x02\x02\u078E\u0793" +
    "\x05\x80A\x02\u078F\u0790\x07\x06\x02\x02\u0790\u0792\x05\x80A\x02\u0791" +
    "\u078F\x03\x02\x02\x02\u0792\u0795\x03\x02\x02\x02\u0793\u0791\x03\x02" +
    "\x02\x02\u0793\u0794\x03\x02\x02\x02\u0794\u07B4\x03\x02\x02\x02\u0795" +
    "\u0793\x03\x02\x02\x02\u0796\u0797\x07m\x02\x02\u0797\u0798\x07 \x02\x02" +
    "\u0798\u079D\x05\xC8e\x02\u0799\u079A\x07\x06\x02\x02\u079A\u079C\x05" +
    "\xC8e\x02\u079B\u0799\x03\x02\x02\x02\u079C\u079F\x03\x02\x02\x02\u079D" +
    "\u079B\x03\x02\x02\x02\u079D\u079E\x03\x02\x02\x02\u079E\u07B1\x03\x02" +
    "\x02\x02\u079F\u079D\x03\x02\x02\x02\u07A0\u07A1\x07\u010D\x02\x02\u07A1" +
    "\u07B2\x07\xCD\x02\x02\u07A2\u07A3\x07\u010D\x02\x02\u07A3\u07B2\x079" +
    "\x02\x02\u07A4\u07A5\x07n\x02\x02\u07A5\u07A6\x07\xDA\x02\x02\u07A6\u07A7" +
    "\x07\x04\x02\x02\u07A7\u07AC\x05\x86D\x02\u07A8\u07A9\x07\x06\x02\x02" +
    "\u07A9\u07AB\x05\x86D\x02\u07AA\u07A8\x03\x02\x02\x02\u07AB\u07AE\x03" +
    "\x02\x02\x02\u07AC\u07AA\x03\x02\x02\x02\u07AC\u07AD\x03\x02\x02\x02\u07AD" +
    "\u07AF\x03\x02\x02\x02\u07AE\u07AC\x03\x02\x02\x02\u07AF\u07B0\x07\x05" +
    "\x02\x02\u07B0\u07B2\x03\x02\x02\x02\u07B1\u07A0\x03\x02\x02\x02\u07B1" +
    "\u07A2\x03\x02\x02\x02\u07B1\u07A4\x03\x02\x02\x02\u07B1\u07B2\x03\x02" +
    "\x02\x02\u07B2\u07B4\x03\x02\x02\x02\u07B3\u078C\x03\x02\x02\x02\u07B3" +
    "\u0796\x03\x02\x02\x02\u07B4\x7F\x03\x02\x02\x02\u07B5\u07B8\x05\x82B" +
    "\x02\u07B6\u07B8\x05\xC8e\x02\u07B7\u07B5\x03\x02\x02\x02\u07B7\u07B6" +
    "\x03\x02\x02\x02\u07B8\x81\x03\x02\x02\x02\u07B9\u07BA\t\x15\x02\x02\u07BA" +
    "\u07BB\x07\x04\x02\x02\u07BB\u07C0\x05\x86D\x02\u07BC\u07BD\x07\x06\x02" +
    "\x02\u07BD\u07BF\x05\x86D\x02\u07BE\u07BC\x03\x02\x02\x02\u07BF\u07C2" +
    "\x03\x02\x02\x02\u07C0\u07BE\x03\x02\x02\x02\u07C0\u07C1\x03\x02\x02\x02" +
    "\u07C1\u07C3\x03\x02\x02\x02\u07C2\u07C0\x03\x02\x02\x02\u07C3\u07C4\x07" +
    "\x05\x02\x02\u07C4\u07D3\x03\x02\x02\x02\u07C5\u07C6\x07n\x02\x02\u07C6" +
    "\u07C7\x07\xDA\x02\x02\u07C7\u07C8\x07\x04\x02\x02\u07C8\u07CD\x05\x84" +
    "C\x02\u07C9\u07CA\x07\x06\x02\x02\u07CA\u07CC\x05\x84C\x02\u07CB\u07C9" +
    "\x03\x02\x02\x02\u07CC\u07CF\x03\x02\x02\x02\u07CD\u07CB\x03\x02\x02\x02" +
    "\u07CD\u07CE\x03\x02\x02\x02\u07CE\u07D0\x03\x02\x02\x02\u07CF\u07CD\x03" +
    "\x02\x02\x02\u07D0\u07D1\x07\x05\x02\x02\u07D1\u07D3\x03\x02\x02\x02\u07D2" +
    "\u07B9\x03\x02\x02\x02\u07D2\u07C5\x03\x02\x02\x02\u07D3\x83\x03\x02\x02" +
    "\x02\u07D4\u07D7\x05\x82B\x02\u07D5\u07D7\x05\x86D\x02\u07D6\u07D4\x03" +
    "\x02\x02\x02\u07D6\u07D5\x03\x02\x02\x02\u07D7\x85\x03\x02\x02\x02\u07D8" +
    "\u07E1\x07\x04\x02\x02\u07D9\u07DE\x05\xC8e\x02\u07DA\u07DB\x07\x06\x02" +
    "\x02\u07DB\u07DD\x05\xC8e\x02\u07DC\u07DA\x03\x02\x02\x02\u07DD\u07E0" +
    "\x03\x02\x02\x02\u07DE\u07DC\x03\x02\x02\x02\u07DE\u07DF\x03\x02\x02\x02" +
    "\u07DF\u07E2\x03\x02\x02\x02\u07E0\u07DE\x03\x02\x02\x02\u07E1\u07D9\x03" +
    "\x02\x02\x02\u07E1\u07E2\x03\x02\x02\x02\u07E2\u07E3\x03\x02\x02\x02\u07E3" +
    "\u07E6\x07\x05\x02\x02\u07E4\u07E6\x05\xC8e\x02\u07E5\u07D8\x03\x02\x02" +
    "\x02\u07E5\u07E4\x03\x02\x02\x02\u07E6\x87\x03\x02\x02\x02\u07E7\u07E8" +
    "\x07\xB1\x02\x02\u07E8\u07E9\x07\x04\x02\x02\u07E9\u07EA\x05\xBE`\x02" +
    "\u07EA\u07EB\x07c\x02\x02\u07EB\u07EC\x05\x8AF\x02\u07EC\u07ED\x07t\x02" +
    "\x02\u07ED\u07EE\x07\x04\x02\x02\u07EE\u07F3\x05\x8CG\x02\u07EF\u07F0" +
    "\x07\x06\x02\x02\u07F0\u07F2\x05\x8CG\x02\u07F1\u07EF\x03\x02\x02\x02" +
    "\u07F2\u07F5\x03\x02\x02\x02\u07F3\u07F1\x03\x02\x02\x02\u07F3\u07F4\x03" +
    "\x02\x02\x02\u07F4\u07F6\x03\x02\x02\x02\u07F5\u07F3\x03\x02\x02\x02\u07F6" +
    "\u07F7\x07\x05\x02\x02\u07F7\u07F8\x07\x05\x02\x02\u07F8\x89\x03\x02\x02" +
    "\x02\u07F9\u0806\x05\u0110\x89\x02\u07FA\u07FB\x07\x04\x02\x02\u07FB\u0800" +
    "\x05\u0110\x89\x02\u07FC\u07FD\x07\x06\x02\x02\u07FD\u07FF\x05\u0110\x89" +
    "\x02\u07FE\u07FC\x03\x02\x02\x02\u07FF\u0802\x03\x02\x02\x02\u0800\u07FE" +
    "\x03\x02\x02\x02\u0800\u0801\x03\x02\x02\x02\u0801\u0803\x03\x02\x02\x02" +
    "\u0802\u0800\x03\x02\x02\x02\u0803\u0804\x07\x05\x02\x02\u0804\u0806\x03" +
    "\x02\x02\x02\u0805\u07F9\x03\x02\x02\x02\u0805\u07FA\x03\x02\x02\x02\u0806" +
    "\x8B\x03\x02\x02\x02\u0807\u080C\x05\xC8e\x02\u0808\u080A\x07\x18\x02" +
    "\x02\u0809\u0808\x03\x02\x02\x02\u0809\u080A\x03\x02\x02\x02\u080A\u080B" +
    "\x03\x02\x02\x02\u080B\u080D\x05\u0110\x89\x02\u080C\u0809\x03\x02\x02" +
    "\x02\u080C\u080D\x03\x02\x02\x02\u080D\x8D\x03\x02\x02\x02\u080E\u080F" +
    "\x07\x83\x02\x02\u080F\u0811\x07\u0108\x02\x02\u0810\u0812\x07\xA7\x02" +
    "\x02\u0811\u0810\x03\x02\x02\x02\u0811\u0812\x03\x02\x02\x02\u0812\u0813" +
    "\x03\x02\x02\x02\u0813\u0814\x05\u010A\x86\x02\u0814\u081D\x07\x04\x02" +
    "\x02\u0815\u081A\x05\xC8e\x02\u0816\u0817\x07\x06\x02\x02\u0817\u0819" +
    "\x05\xC8e\x02\u0818\u0816\x03\x02\x02\x02\u0819\u081C\x03\x02\x02\x02" +
    "\u081A\u0818\x03\x02\x02\x02\u081A\u081B\x03\x02\x02\x02\u081B\u081E\x03" +
    "\x02\x02\x02\u081C\u081A\x03\x02\x02\x02\u081D\u0815\x03\x02\x02\x02\u081D" +
    "\u081E\x03\x02\x02\x02\u081E\u081F\x03\x02\x02\x02\u081F\u0820\x07\x05" +
    "\x02\x02\u0820\u082C\x05\u0110\x89\x02\u0821\u0823\x07\x18\x02\x02\u0822" +
    "\u0821\x03\x02\x02\x02\u0822\u0823\x03\x02\x02\x02\u0823\u0824\x03\x02" +
    "\x02\x02\u0824\u0829\x05\u0110\x89\x02\u0825\u0826\x07\x06\x02\x02\u0826" +
    "\u0828\x05\u0110\x89\x02\u0827\u0825\x03\x02\x02\x02\u0828\u082B\x03\x02" +
    "\x02\x02\u0829\u0827\x03\x02\x02\x02\u0829\u082A\x03\x02\x02\x02\u082A" +
    "\u082D\x03\x02\x02\x02\u082B\u0829\x03\x02\x02\x02\u082C\u0822\x03\x02" +
    "\x02\x02\u082C\u082D\x03\x02\x02\x02\u082D\x8F\x03\x02\x02\x02\u082E\u082F" +
    "\t\x16\x02\x02\u082F\x91\x03\x02\x02\x02\u0830\u0832\x07\x83\x02\x02\u0831" +
    "\u0830\x03\x02\x02\x02\u0831\u0832\x03\x02\x02\x02\u0832\u0833\x03\x02" +
    "\x02\x02\u0833\u0837\x05\xAAV\x02\u0834\u0836\x05\x94K\x02\u0835\u0834" +
    "\x03\x02\x02\x02\u0836\u0839\x03\x02\x02\x02\u0837\u0835\x03\x02\x02\x02" +
    "\u0837\u0838\x03\x02\x02\x02\u0838\x93\x03\x02\x02\x02\u0839\u0837\x03" +
    "\x02\x02\x02\u083A\u083B\x05\x96L\x02\u083B\u083D\x07\x80\x02\x02\u083C" +
    "\u083E\x07\x83\x02\x02\u083D\u083C\x03\x02\x02\x02\u083D\u083E\x03\x02" +
    "\x02\x02\u083E\u083F\x03\x02\x02\x02\u083F\u0841\x05\xAAV\x02\u0840\u0842" +
    "\x05\x98M\x02\u0841\u0840\x03\x02\x02\x02\u0841\u0842\x03\x02\x02\x02" +
    "\u0842\u084C\x03\x02\x02\x02\u0843\u0844\x07\x9A\x02\x02\u0844\u0845\x05" +
    "\x96L\x02\u0845\u0847\x07\x80\x02\x02\u0846\u0848\x07\x83\x02\x02\u0847" +
    "\u0846\x03\x02\x02\x02\u0847\u0848\x03\x02\x02\x02\u0848\u0849\x03\x02" +
    "\x02\x02\u0849\u084A\x05\xAAV\x02\u084A\u084C\x03\x02\x02\x02\u084B\u083A" +
    "\x03\x02\x02\x02\u084B\u0843\x03\x02\x02\x02\u084C\x95\x03\x02\x02\x02" +
    "\u084D\u084F\x07w\x02\x02\u084E\u084D\x03\x02\x02\x02\u084E\u084F\x03" +
    "\x02\x02\x02\u084F\u0866\x03\x02\x02\x02\u0850\u0866\x078\x02\x02\u0851" +
    "\u0853\x07\x86\x02\x02\u0852\u0854\x07\xA7\x02\x02\u0853\u0852\x03\x02" +
    "\x02\x02\u0853\u0854\x03\x02\x02\x02\u0854\u0866\x03\x02\x02\x02\u0855" +
    "\u0857\x07\x86\x02\x02\u0856\u0855\x03\x02\x02\x02\u0856\u0857\x03\x02" +
    "\x02\x02\u0857\u0858\x03\x02\x02\x02\u0858\u0866\x07\xD3\x02\x02\u0859" +
    "\u085B\x07\xC8\x02\x02\u085A\u085C\x07\xA7\x02\x02\u085B\u085A\x03\x02" +
    "\x02\x02\u085B\u085C\x03\x02\x02\x02\u085C\u0866\x03\x02\x02\x02\u085D" +
    "\u085F\x07h\x02\x02\u085E\u0860\x07\xA7\x02\x02\u085F\u085E\x03\x02\x02" +
    "\x02\u085F\u0860\x03\x02\x02\x02\u0860\u0866\x03\x02\x02\x02\u0861\u0863" +
    "\x07\x86\x02\x02\u0862\u0861\x03\x02\x02\x02\u0862\u0863\x03\x02\x02\x02" +
    "\u0863\u0864\x03\x02\x02\x02\u0864\u0866\x07\x14\x02\x02\u0865\u084E\x03" +
    "\x02\x02\x02\u0865\u0850\x03\x02\x02\x02\u0865\u0851\x03\x02\x02\x02\u0865" +
    "\u0856\x03\x02\x02\x02\u0865\u0859\x03\x02\x02\x02\u0865\u085D\x03\x02" +
    "\x02\x02\u0865\u0862\x03\x02\x02\x02\u0866\x97\x03\x02\x02\x02\u0867\u0868" +
    "\x07\xA0\x02\x02\u0868\u086C\x05\xCCg\x02\u0869\u086A\x07\u0106\x02\x02" +
    "\u086A\u086C\x05\x9EP\x02\u086B\u0867\x03\x02\x02\x02\u086B\u0869\x03" +
    "\x02\x02\x02\u086C\x99\x03\x02\x02\x02\u086D\u086E\x07\xEA\x02\x02\u086E" +
    "\u0870\x07\x04\x02\x02\u086F\u0871\x05\x9CO\x02\u0870\u086F\x03\x02\x02" +
    "\x02\u0870\u0871\x03\x02\x02\x02\u0871\u0872\x03\x02\x02\x02\u0872\u0873" +
    "\x07\x05\x02\x02\u0873\x9B\x03\x02\x02\x02\u0874\u0876\x07\u0119\x02\x02" +
    "\u0875\u0874\x03\x02\x02\x02\u0875\u0876\x03\x02\x02\x02\u0876\u0877\x03" +
    "\x02\x02\x02\u0877\u0878\t\x17\x02\x02\u0878\u088D\x07\xB0\x02\x02\u0879" +
    "\u087A\x05\xC8e\x02\u087A\u087B\x07\xCF\x02\x02\u087B\u088D\x03\x02\x02" +
    "\x02\u087C\u087D\x07\x1E\x02\x02\u087D\u087E\x07\u0127\x02\x02\u087E\u087F" +
    "\x07\xA6\x02\x02\u087F\u0880\x07\x9F\x02\x02\u0880\u0889\x07\u0127\x02" +
    "\x02\u0881\u0887\x07\xA0\x02\x02\u0882\u0888\x05\u0110\x89\x02\u0883\u0884" +
    "\x05\u010A\x86\x02\u0884\u0885\x07\x04\x02\x02\u0885\u0886\x07\x05\x02" +
    "\x02\u0886\u0888\x03\x02\x02\x02\u0887\u0882\x03\x02\x02\x02\u0887\u0883" +
    "\x03\x02\x02\x02\u0888\u088A\x03\x02\x02\x02\u0889\u0881\x03\x02\x02\x02" +
    "\u0889\u088A\x03\x02\x02\x02\u088A\u088D\x03\x02\x02\x02\u088B\u088D\x05" +
    "\xC8e\x02\u088C\u0875\x03\x02\x02\x02\u088C\u0879\x03\x02\x02\x02\u088C" +
    "\u087C\x03\x02\x02\x02\u088C\u088B\x03\x02\x02\x02\u088D\x9D\x03\x02\x02" +
    "\x02\u088E\u088F\x07\x04\x02\x02\u088F\u0890\x05\xA0Q\x02\u0890\u0891" +
    "\x07\x05\x02\x02\u0891\x9F\x03\x02\x02\x02\u0892\u0897\x05\u010C\x87\x02" +
    "\u0893\u0894\x07\x06\x02\x02\u0894\u0896\x05\u010C\x87\x02\u0895\u0893" +
    "\x03\x02\x02\x02\u0896\u0899\x03\x02\x02\x02\u0897\u0895\x03\x02\x02\x02" +
    "\u0897\u0898\x03\x02\x02\x02\u0898\xA1\x03\x02\x02\x02\u0899\u0897\x03" +
    "\x02\x02\x02\u089A\u089B\x07\x04\x02\x02\u089B\u08A0\x05\xA4S\x02\u089C" +
    "\u089D\x07\x06\x02\x02\u089D\u089F\x05\xA4S\x02\u089E\u089C\x03\x02\x02" +
    "\x02\u089F\u08A2\x03\x02\x02\x02\u08A0\u089E\x03\x02\x02\x02\u08A0\u08A1" +
    "\x03\x02\x02\x02\u08A1\u08A3\x03\x02\x02\x02\u08A2\u08A0\x03\x02\x02\x02" +
    "\u08A3\u08A4\x07\x05\x02\x02\u08A4\xA3\x03\x02\x02\x02\u08A5\u08A7\x05" +
    "\u010C\x87\x02\u08A6\u08A8\t\x13\x02\x02\u08A7\u08A6\x03\x02\x02\x02\u08A7" +
    "\u08A8\x03\x02\x02\x02\u08A8\xA5\x03\x02\x02\x02\u08A9\u08AA\x07\x04\x02" +
    "\x02\u08AA\u08AF\x05\xA8U\x02\u08AB\u08AC\x07\x06\x02\x02\u08AC\u08AE" +
    "\x05\xA8U\x02\u08AD\u08AB\x03\x02\x02\x02\u08AE\u08B1\x03\x02\x02\x02" +
    "\u08AF\u08AD\x03\x02\x02\x02\u08AF\u08B0\x03\x02\x02\x02\u08B0\u08B2\x03" +
    "\x02\x02\x02\u08B1\u08AF\x03\x02\x02\x02\u08B2\u08B3\x07\x05\x02\x02\u08B3" +
    '\xA7\x03\x02\x02\x02\u08B4\u08B6\x05\u0110\x89\x02\u08B5\u08B7\x05"\x12' +
    "\x02\u08B6\u08B5\x03\x02\x02\x02\u08B6\u08B7\x03\x02\x02\x02\u08B7\xA9" +
    "\x03\x02\x02\x02\u08B8\u08BA\x05\xB6\\\x02\u08B9\u08BB\x05\x9AN\x02\u08BA" +
    "\u08B9\x03\x02\x02\x02\u08BA\u08BB\x03\x02\x02\x02\u08BB\u08BC\x03\x02" +
    "\x02\x02\u08BC\u08BD\x05\xB0Y\x02\u08BD\u08D1\x03\x02\x02\x02\u08BE\u08BF" +
    "\x07\x04\x02\x02\u08BF\u08C0\x05$\x13\x02\u08C0\u08C2\x07\x05\x02\x02" +
    "\u08C1\u08C3\x05\x9AN\x02\u08C2\u08C1\x03\x02\x02\x02\u08C2\u08C3\x03" +
    "\x02\x02\x02\u08C3\u08C4\x03\x02\x02\x02\u08C4\u08C5\x05\xB0Y\x02\u08C5" +
    "\u08D1\x03\x02\x02\x02\u08C6\u08C7\x07\x04\x02\x02\u08C7\u08C8\x05\x92" +
    "J\x02\u08C8\u08CA\x07\x05\x02\x02\u08C9\u08CB\x05\x9AN\x02\u08CA\u08C9" +
    "\x03\x02\x02\x02\u08CA\u08CB\x03\x02\x02\x02\u08CB\u08CC\x03\x02\x02\x02" +
    "\u08CC\u08CD\x05\xB0Y\x02\u08CD\u08D1\x03\x02\x02\x02\u08CE\u08D1\x05" +
    "\xACW\x02\u08CF\u08D1\x05\xAEX\x02\u08D0\u08B8\x03\x02\x02\x02\u08D0\u08BE" +
    "\x03\x02\x02\x02\u08D0\u08C6\x03\x02\x02\x02\u08D0\u08CE\x03\x02\x02\x02" +
    "\u08D0\u08CF\x03\x02\x02\x02\u08D1\xAB\x03\x02\x02\x02\u08D2\u08D3\x07" +
    "\u0107\x02\x02\u08D3\u08D8\x05\xC8e\x02\u08D4\u08D5\x07\x06\x02\x02\u08D5" +
    "\u08D7\x05\xC8e\x02\u08D6\u08D4\x03\x02\x02\x02\u08D7\u08DA\x03\x02\x02" +
    "\x02\u08D8\u08D6\x03\x02\x02\x02\u08D8\u08D9\x03\x02\x02\x02\u08D9\u08DB" +
    "\x03\x02\x02\x02\u08DA\u08D8\x03\x02\x02\x02\u08DB\u08DC\x05\xB0Y\x02" +
    "\u08DC\xAD\x03\x02\x02\x02\u08DD\u08DE\x05\u0108\x85\x02\u08DE\u08E7\x07" +
    "\x04\x02\x02\u08DF\u08E4\x05\xC8e\x02\u08E0\u08E1\x07\x06\x02\x02\u08E1" +
    "\u08E3\x05\xC8e\x02\u08E2\u08E0\x03\x02\x02\x02\u08E3\u08E6\x03\x02\x02" +
    "\x02\u08E4\u08E2\x03\x02\x02\x02\u08E4\u08E5\x03\x02\x02\x02\u08E5\u08E8" +
    "\x03\x02\x02\x02\u08E6\u08E4\x03\x02\x02\x02\u08E7\u08DF\x03\x02\x02\x02" +
    "\u08E7\u08E8\x03\x02\x02\x02\u08E8\u08E9\x03\x02\x02\x02\u08E9\u08EA\x07" +
    "\x05\x02\x02\u08EA\u08EB\x05\xB0Y\x02\u08EB\xAF\x03\x02\x02\x02\u08EC" +
    "\u08EE\x07\x18\x02\x02\u08ED\u08EC\x03\x02\x02\x02\u08ED\u08EE\x03\x02" +
    "\x02\x02\u08EE\u08EF\x03\x02\x02\x02\u08EF\u08F1\x05\u0112\x8A\x02\u08F0" +
    "\u08F2\x05\x9EP\x02\u08F1\u08F0\x03\x02\x02\x02\u08F1\u08F2\x03\x02\x02" +
    "\x02\u08F2\u08F4\x03\x02\x02\x02\u08F3\u08ED\x03\x02\x02\x02\u08F3\u08F4" +
    "\x03\x02\x02\x02\u08F4\xB1\x03\x02\x02\x02\u08F5\u08F6\x07\xCE\x02\x02" +
    "\u08F6\u08F7\x07e\x02\x02\u08F7\u08F8\x07\xD5\x02\x02\u08F8\u08FC\x07" +
    "\u0123\x02\x02\u08F9\u08FA\x07\u010D\x02\x02\u08FA\u08FB\x07\xD6\x02\x02" +
    "\u08FB\u08FD\x05<\x1F\x02\u08FC\u08F9\x03\x02\x02\x02\u08FC\u08FD\x03" +
    "\x02\x02\x02\u08FD\u0927\x03\x02\x02\x02\u08FE\u08FF\x07\xCE\x02\x02\u08FF" +
    "\u0900\x07e\x02\x02\u0900\u090A\x07F\x02\x02\u0901\u0902\x07^\x02\x02" +
    "\u0902\u0903\x07\xED\x02\x02\u0903\u0904\x07 \x02\x02\u0904\u0908\x07" +
    "\u0123\x02\x02\u0905\u0906\x07S\x02\x02\u0906\u0907\x07 \x02\x02\u0907" +
    "\u0909\x07\u0123\x02\x02\u0908\u0905\x03\x02\x02\x02\u0908\u0909\x03\x02" +
    "\x02\x02\u0909\u090B\x03\x02\x02\x02\u090A\u0901\x03\x02\x02\x02\u090A" +
    "\u090B\x03\x02\x02\x02\u090B\u0911\x03\x02\x02\x02\u090C\u090D\x07,\x02" +
    "\x02\u090D\u090E\x07\x7F\x02\x02\u090E\u090F\x07\xED\x02\x02\u090F\u0910" +
    "\x07 \x02\x02\u0910\u0912\x07\u0123\x02\x02\u0911\u090C\x03\x02\x02\x02" +
    "\u0911\u0912\x03\x02\x02\x02\u0912\u0918\x03\x02\x02\x02\u0913\u0914\x07" +
    "\x92\x02\x02\u0914\u0915\x07\x81\x02\x02\u0915\u0916\x07\xED\x02\x02\u0916" +
    "\u0917\x07 \x02\x02\u0917\u0919\x07\u0123\x02\x02\u0918\u0913\x03\x02" +
    "\x02\x02\u0918\u0919\x03\x02\x02\x02\u0919\u091E\x03\x02\x02\x02\u091A" +
    "\u091B\x07\x89\x02\x02\u091B\u091C\x07\xED\x02\x02\u091C\u091D\x07 \x02" +
    "\x02\u091D\u091F\x07\u0123\x02\x02\u091E\u091A\x03\x02\x02\x02\u091E\u091F" +
    "\x03\x02\x02\x02\u091F\u0924\x03\x02\x02\x02\u0920\u0921\x07\x9D\x02\x02" +
    "\u0921\u0922\x07D\x02\x02\u0922\u0923\x07\x18\x02\x02\u0923\u0925\x07" +
    "\u0123\x02\x02\u0924\u0920\x03\x02\x02\x02\u0924\u0925\x03\x02\x02\x02" +
    "\u0925\u0927\x03\x02\x02\x02\u0926\u08F5\x03\x02\x02\x02\u0926\u08FE\x03" +
    "\x02\x02\x02\u0927\xB3\x03\x02\x02\x02\u0928\u092D\x05\xB6\\\x02\u0929" +
    "\u092A\x07\x06\x02\x02\u092A\u092C\x05\xB6\\\x02\u092B\u0929\x03\x02\x02" +
    "\x02\u092C\u092F\x03\x02\x02\x02\u092D\u092B\x03\x02\x02\x02\u092D\u092E" +
    "\x03\x02\x02\x02\u092E\xB5\x03\x02\x02\x02\u092F\u092D\x03\x02\x02\x02" +
    "\u0930\u0935\x05\u010C\x87\x02\u0931\u0932\x07\x07\x02\x02\u0932\u0934" +
    "\x05\u010C\x87\x02\u0933\u0931\x03\x02\x02\x02\u0934\u0937\x03\x02\x02" +
    "\x02\u0935\u0933\x03\x02\x02\x02\u0935\u0936\x03\x02\x02\x02\u0936\xB7" +
    "\x03\x02\x02\x02\u0937\u0935\x03\x02\x02\x02\u0938\u0939\x05\u010C\x87" +
    "\x02\u0939\u093A\x07\x07\x02\x02\u093A\u093C\x03\x02\x02\x02\u093B\u0938" +
    "\x03\x02\x02\x02\u093B\u093C\x03\x02\x02\x02\u093C\u093D\x03\x02\x02\x02" +
    "\u093D\u093E\x05\u010C\x87\x02\u093E\xB9\x03\x02\x02\x02\u093F\u0940\x05" +
    "\u010C\x87\x02\u0940\u0941\x07\x07\x02\x02\u0941\u0943\x03\x02\x02\x02" +
    "\u0942\u093F\x03\x02\x02\x02\u0942\u0943\x03\x02\x02\x02\u0943\u0944\x03" +
    "\x02\x02\x02\u0944\u0945\x05\u010C\x87\x02\u0945\xBB\x03\x02\x02\x02\u0946" +
    "\u094E\x05\xC8e\x02\u0947\u0949\x07\x18\x02\x02\u0948\u0947\x03\x02\x02" +
    "\x02\u0948\u0949\x03\x02\x02\x02\u0949\u094C\x03\x02\x02\x02\u094A\u094D" +
    "\x05\u010C\x87\x02\u094B\u094D\x05\x9EP\x02\u094C\u094A\x03\x02\x02\x02" +
    "\u094C\u094B\x03\x02\x02\x02\u094D\u094F\x03\x02\x02\x02\u094E\u0948\x03" +
    "\x02\x02\x02\u094E\u094F\x03\x02\x02\x02\u094F\xBD\x03\x02\x02\x02\u0950" +
    "\u0955\x05\xBC_\x02\u0951\u0952\x07\x06\x02\x02\u0952\u0954\x05\xBC_\x02" +
    "\u0953\u0951\x03\x02\x02\x02\u0954\u0957\x03\x02\x02\x02\u0955\u0953\x03" +
    "\x02\x02\x02\u0955\u0956\x03\x02\x02\x02\u0956\xBF\x03\x02\x02\x02\u0957" +
    "\u0955\x03\x02\x02\x02\u0958\u0959\x07\x04\x02\x02\u0959\u095E\x05\xC2" +
    "b\x02\u095A\u095B\x07\x06\x02\x02\u095B\u095D\x05\xC2b\x02\u095C\u095A" +
    "\x03\x02\x02\x02\u095D\u0960\x03\x02\x02\x02\u095E\u095C\x03\x02\x02\x02" +
    "\u095E\u095F\x03\x02\x02\x02\u095F\u0961\x03\x02\x02\x02\u0960\u095E\x03" +
    "\x02\x02\x02\u0961\u0962\x07\x05\x02\x02\u0962\xC1\x03\x02\x02\x02\u0963" +
    "\u0966\x05\xC4c\x02\u0964\u0966\x05\xF4{\x02\u0965\u0963\x03\x02\x02\x02" +
    "\u0965\u0964\x03\x02\x02\x02\u0966\xC3\x03\x02\x02\x02\u0967\u0975\x05" +
    "\u010A\x86\x02\u0968\u0969\x05\u0110\x89\x02\u0969\u096A\x07\x04\x02\x02" +
    "\u096A\u096F\x05\xC6d\x02\u096B\u096C\x07\x06\x02\x02\u096C\u096E\x05" +
    "\xC6d\x02\u096D\u096B\x03\x02\x02\x02\u096E\u0971\x03\x02\x02\x02\u096F" +
    "\u096D\x03\x02\x02\x02\u096F\u0970\x03\x02\x02\x02\u0970\u0972\x03\x02" +
    "\x02\x02\u0971\u096F\x03\x02\x02\x02\u0972\u0973\x07\x05\x02\x02\u0973" +
    "\u0975\x03\x02\x02\x02\u0974\u0967\x03\x02\x02\x02\u0974\u0968\x03\x02" +
    "\x02\x02\u0975\xC5\x03\x02\x02\x02\u0976\u0979\x05\u010A\x86\x02\u0977" +
    "\u0979\x05\xD4k\x02\u0978\u0976\x03\x02\x02\x02\u0978\u0977\x03\x02\x02" +
    "\x02\u0979\xC7\x03\x02\x02\x02\u097A\u097B\x05\xCCg\x02\u097B\xC9\x03" +
    "\x02\x02\x02\u097C\u0981\x05\xC8e\x02\u097D\u097E\x07\x06\x02\x02\u097E" +
    "\u0980\x05\xC8e\x02\u097F\u097D\x03\x02\x02\x02\u0980\u0983\x03\x02\x02" +
    "\x02\u0981\u097F\x03\x02\x02\x02\u0981\u0982\x03\x02\x02\x02\u0982\xCB" +
    "\x03\x02\x02\x02\u0983\u0981\x03\x02\x02\x02\u0984\u0985\bg\x01\x02\u0985" +
    "\u0986\x07\x9C\x02\x02\u0986\u0991\x05\xCCg\x07\u0987\u0988\x07V\x02\x02" +
    "\u0988\u0989\x07\x04\x02\x02\u0989\u098A\x05$\x13\x02\u098A\u098B\x07" +
    "\x05\x02\x02\u098B\u0991\x03\x02\x02\x02\u098C\u098E\x05\xD0i\x02\u098D" +
    "\u098F\x05\xCEh\x02\u098E\u098D\x03\x02\x02\x02\u098E\u098F\x03\x02\x02" +
    "\x02\u098F\u0991\x03\x02\x02\x02\u0990\u0984\x03\x02\x02\x02\u0990\u0987" +
    "\x03\x02\x02\x02\u0990\u098C\x03\x02\x02\x02\u0991\u099A\x03\x02\x02\x02" +
    "\u0992\u0993\f\x04\x02\x02\u0993\u0994\x07\x13\x02\x02\u0994\u0999\x05" +
    "\xCCg\x05\u0995\u0996\f\x03\x02\x02\u0996\u0997\x07\xA4\x02\x02\u0997" +
    "\u0999\x05\xCCg\x04\u0998\u0992\x03\x02\x02\x02\u0998\u0995\x03\x02\x02" +
    "\x02\u0999\u099C\x03\x02\x02\x02\u099A\u0998\x03\x02\x02\x02\u099A\u099B" +
    "\x03\x02\x02\x02\u099B\xCD\x03\x02\x02\x02\u099C\u099A\x03\x02\x02\x02" +
    "\u099D\u099F\x07\x9C\x02\x02\u099E\u099D\x03\x02\x02\x02\u099E\u099F\x03" +
    "\x02\x02\x02\u099F\u09A0\x03\x02\x02\x02\u09A0\u09A1\x07\x1C\x02\x02\u09A1" +
    "\u09A2\x05\xD0i\x02\u09A2\u09A3\x07\x13\x02\x02\u09A3\u09A4\x05\xD0i\x02" +
    "\u09A4\u09F0\x03\x02\x02\x02\u09A5\u09A7\x07\x9C\x02\x02\u09A6\u09A5\x03" +
    "\x02\x02\x02\u09A6\u09A7\x03\x02\x02\x02\u09A7\u09A8\x03\x02\x02\x02\u09A8" +
    "\u09A9\x07t\x02\x02\u09A9\u09AA\x07\x04\x02\x02\u09AA\u09AF\x05\xC8e\x02" +
    "\u09AB\u09AC\x07\x06\x02\x02\u09AC\u09AE\x05\xC8e\x02\u09AD\u09AB\x03" +
    "\x02\x02\x02\u09AE\u09B1\x03\x02\x02\x02\u09AF\u09AD\x03\x02\x02\x02\u09AF" +
    "\u09B0\x03\x02\x02\x02\u09B0\u09B2\x03\x02\x02\x02\u09B1\u09AF\x03\x02" +
    "\x02\x02\u09B2\u09B3\x07\x05\x02\x02\u09B3\u09F0\x03\x02\x02\x02\u09B4" +
    "\u09B6\x07\x9C\x02\x02\u09B5\u09B4\x03\x02\x02\x02\u09B5\u09B6\x03\x02" +
    "\x02\x02\u09B6\u09B7\x03\x02\x02\x02\u09B7\u09B8\x07t\x02\x02\u09B8\u09B9" +
    "\x07\x04\x02\x02\u09B9\u09BA\x05$\x13\x02\u09BA\u09BB\x07\x05\x02\x02" +
    "\u09BB\u09F0\x03\x02\x02\x02\u09BC\u09BE\x07\x9C\x02\x02\u09BD\u09BC\x03" +
    "\x02\x02\x02\u09BD\u09BE\x03\x02\x02\x02\u09BE\u09BF\x03\x02\x02\x02\u09BF" +
    "\u09C0\x07\xC9\x02\x02\u09C0\u09F0\x05\xD0i\x02\u09C1\u09C3\x07\x9C\x02" +
    "\x02\u09C2\u09C1\x03\x02\x02\x02\u09C2\u09C3\x03\x02\x02\x02\u09C3\u09C4" +
    "\x03\x02\x02\x02\u09C4\u09C5\x07\x87\x02\x02\u09C5\u09D3\t\x18\x02\x02" +
    "\u09C6\u09C7\x07\x04\x02\x02\u09C7\u09D4\x07\x05\x02\x02\u09C8\u09C9\x07" +
    "\x04\x02\x02\u09C9\u09CE\x05\xC8e\x02\u09CA\u09CB\x07\x06\x02\x02\u09CB" +
    "\u09CD\x05\xC8e\x02\u09CC\u09CA\x03\x02\x02\x02\u09CD\u09D0\x03\x02\x02" +
    "\x02\u09CE\u09CC\x03\x02\x02\x02\u09CE\u09CF\x03\x02\x02\x02\u09CF\u09D1" +
    "\x03\x02\x02\x02\u09D0\u09CE\x03\x02\x02\x02\u09D1\u09D2\x07\x05\x02\x02" +
    "\u09D2\u09D4\x03\x02\x02\x02\u09D3\u09C6\x03\x02\x02\x02\u09D3\u09C8\x03" +
    "\x02\x02\x02\u09D4\u09F0\x03\x02\x02\x02\u09D5\u09D7\x07\x9C\x02\x02\u09D6" +
    "\u09D5\x03\x02\x02\x02\u09D6\u09D7\x03\x02\x02\x02\u09D7\u09D8\x03\x02" +
    "\x02\x02\u09D8\u09D9\x07\x87\x02\x02\u09D9\u09DC\x05\xD0i\x02\u09DA\u09DB" +
    "\x07R\x02\x02\u09DB\u09DD\x07\u0123\x02\x02\u09DC\u09DA\x03\x02\x02\x02" +
    "\u09DC\u09DD\x03\x02\x02\x02\u09DD\u09F0\x03\x02\x02\x02\u09DE\u09E0\x07" +
    "~\x02\x02\u09DF\u09E1\x07\x9C\x02\x02\u09E0\u09DF\x03\x02\x02\x02\u09E0" +
    "\u09E1\x03\x02\x02\x02\u09E1\u09E2\x03\x02\x02\x02\u09E2\u09F0\x07\x9D" +
    "\x02\x02\u09E3\u09E5\x07~\x02\x02\u09E4\u09E6\x07\x9C\x02\x02\u09E5\u09E4" +
    "\x03\x02\x02\x02\u09E5\u09E6\x03\x02\x02\x02\u09E6\u09E7\x03\x02\x02\x02" +
    "\u09E7\u09F0\t\x19\x02\x02\u09E8\u09EA\x07~\x02\x02\u09E9\u09EB\x07\x9C" +
    "\x02\x02\u09EA\u09E9\x03\x02\x02\x02\u09EA\u09EB\x03\x02\x02\x02\u09EB" +
    "\u09EC\x03\x02\x02\x02\u09EC\u09ED\x07L\x02\x02\u09ED\u09EE\x07g\x02\x02" +
    "\u09EE\u09F0\x05\xD0i\x02\u09EF\u099E\x03\x02\x02\x02\u09EF\u09A6\x03" +
    "\x02\x02\x02\u09EF\u09B5\x03\x02\x02\x02\u09EF\u09BD\x03\x02\x02\x02\u09EF" +
    "\u09C2\x03\x02\x02\x02\u09EF\u09D6\x03\x02\x02\x02\u09EF\u09DE\x03\x02" +
    "\x02\x02\u09EF\u09E3\x03\x02\x02\x02\u09EF\u09E8\x03\x02\x02\x02\u09F0" +
    "\xCF\x03\x02\x02\x02\u09F1\u09F2\bi\x01\x02\u09F2\u09F6\x05\xD2j\x02";
  private static readonly _serializedATNSegment5: string =
    "\u09F3\u09F4\t\x1A\x02\x02\u09F4\u09F6\x05\xD0i\t\u09F5\u09F1\x03\x02" +
    "\x02\x02\u09F5\u09F3\x03\x02\x02\x02\u09F6\u0A0C\x03\x02\x02\x02\u09F7" +
    "\u09F8\f\b\x02\x02\u09F8\u09F9\t\x1B\x02\x02\u09F9\u0A0B\x05\xD0i\t\u09FA" +
    "\u09FB\f\x07\x02\x02\u09FB\u09FC\t\x1C\x02\x02\u09FC\u0A0B\x05\xD0i\b" +
    "\u09FD\u09FE\f\x06\x02\x02\u09FE\u09FF\x07\u011E\x02\x02\u09FF\u0A0B\x05" +
    "\xD0i\x07\u0A00\u0A01\f\x05\x02\x02\u0A01\u0A02\x07\u0121\x02\x02\u0A02" +
    "\u0A0B\x05\xD0i\x06\u0A03\u0A04\f\x04\x02\x02\u0A04\u0A05\x07\u011F\x02" +
    "\x02\u0A05\u0A0B\x05\xD0i\x05\u0A06\u0A07\f\x03\x02\x02\u0A07\u0A08\x05" +
    "\xD6l\x02\u0A08\u0A09\x05\xD0i\x04\u0A09\u0A0B\x03\x02\x02\x02\u0A0A\u09F7" +
    "\x03\x02\x02\x02\u0A0A\u09FA\x03\x02\x02\x02\u0A0A\u09FD\x03\x02\x02\x02" +
    "\u0A0A\u0A00\x03\x02\x02\x02\u0A0A\u0A03\x03\x02\x02\x02\u0A0A\u0A06\x03" +
    "\x02\x02\x02\u0A0B\u0A0E\x03\x02\x02\x02\u0A0C\u0A0A\x03\x02\x02\x02\u0A0C" +
    "\u0A0D\x03\x02\x02\x02\u0A0D\xD1\x03\x02\x02\x02\u0A0E\u0A0C\x03\x02\x02" +
    "\x02\u0A0F\u0A10\bj\x01\x02\u0A10\u0ACC\t\x1D\x02\x02\u0A11\u0A13\x07" +
    "#\x02\x02\u0A12\u0A14\x05\xFA~\x02\u0A13\u0A12\x03\x02\x02\x02\u0A14\u0A15" +
    "\x03\x02\x02\x02\u0A15\u0A13\x03\x02\x02\x02\u0A15\u0A16\x03\x02\x02\x02" +
    "\u0A16\u0A19\x03\x02\x02\x02\u0A17\u0A18\x07P\x02\x02\u0A18\u0A1A\x05" +
    "\xC8e\x02\u0A19\u0A17\x03\x02\x02\x02\u0A19\u0A1A\x03\x02\x02\x02\u0A1A" +
    "\u0A1B\x03\x02\x02\x02\u0A1B\u0A1C\x07Q\x02\x02\u0A1C\u0ACC\x03\x02\x02" +
    "\x02\u0A1D\u0A1E\x07#\x02\x02\u0A1E\u0A20\x05\xC8e\x02\u0A1F\u0A21\x05" +
    "\xFA~\x02\u0A20\u0A1F\x03\x02\x02\x02\u0A21\u0A22\x03\x02\x02\x02\u0A22" +
    "\u0A20\x03\x02\x02\x02\u0A22\u0A23\x03\x02\x02\x02\u0A23\u0A26\x03\x02" +
    "\x02\x02\u0A24\u0A25\x07P\x02\x02\u0A25\u0A27\x05\xC8e\x02\u0A26\u0A24" +
    "\x03\x02\x02\x02\u0A26\u0A27\x03\x02\x02\x02\u0A27\u0A28\x03\x02\x02\x02" +
    "\u0A28\u0A29\x07Q\x02\x02\u0A29\u0ACC\x03\x02\x02\x02\u0A2A\u0A2B\t\x1E" +
    "\x02\x02\u0A2B\u0A2C\x07\x04\x02\x02\u0A2C\u0A2D\x05\xC8e\x02\u0A2D\u0A2E" +
    "\x07\x18\x02\x02\u0A2E\u0A2F\x05\xECw\x02\u0A2F\u0A30\x07\x05\x02\x02" +
    "\u0A30\u0ACC\x03\x02\x02\x02\u0A31\u0A32\x07\xE4\x02\x02\u0A32\u0A3B\x07" +
    "\x04\x02\x02\u0A33\u0A38\x05\xBC_\x02\u0A34\u0A35\x07\x06\x02\x02\u0A35" +
    "\u0A37\x05\xBC_\x02\u0A36\u0A34\x03\x02\x02\x02\u0A37\u0A3A\x03\x02\x02" +
    "\x02\u0A38\u0A36\x03\x02\x02\x02\u0A38\u0A39\x03\x02\x02\x02\u0A39\u0A3C" +
    "\x03\x02\x02\x02\u0A3A\u0A38\x03\x02\x02\x02\u0A3B\u0A33\x03\x02\x02\x02" +
    "\u0A3B\u0A3C\x03\x02\x02\x02\u0A3C\u0A3D\x03\x02\x02\x02\u0A3D\u0ACC\x07" +
    "\x05\x02\x02\u0A3E\u0A3F\x07a\x02\x02\u0A3F\u0A40\x07\x04\x02\x02\u0A40" +
    "\u0A43\x05\xC8e\x02\u0A41\u0A42\x07r\x02\x02\u0A42\u0A44\x07\x9E\x02\x02" +
    "\u0A43\u0A41\x03\x02\x02\x02\u0A43\u0A44\x03\x02\x02\x02\u0A44\u0A45\x03" +
    "\x02\x02\x02\u0A45\u0A46\x07\x05\x02\x02\u0A46\u0ACC\x03\x02\x02\x02\u0A47" +
    "\u0A48\x07\x82\x02\x02\u0A48\u0A49\x07\x04\x02\x02\u0A49\u0A4C\x05\xC8" +
    "e\x02\u0A4A\u0A4B\x07r\x02\x02\u0A4B\u0A4D\x07\x9E\x02\x02\u0A4C\u0A4A" +
    "\x03\x02\x02\x02\u0A4C\u0A4D\x03\x02\x02\x02\u0A4D\u0A4E\x03\x02\x02\x02" +
    "\u0A4E\u0A4F\x07\x05\x02\x02\u0A4F\u0ACC\x03\x02\x02\x02\u0A50\u0A51\x07" +
    "\xB3\x02\x02\u0A51\u0A52\x07\x04\x02\x02\u0A52\u0A53\x05\xD0i\x02\u0A53" +
    "\u0A54\x07t\x02\x02\u0A54\u0A55\x05\xD0i\x02\u0A55\u0A56\x07\x05\x02\x02" +
    "\u0A56\u0ACC\x03\x02\x02\x02\u0A57\u0ACC\x05\xD4k\x02\u0A58\u0ACC\x07" +
    "\u011A\x02\x02\u0A59\u0A5A\x05\u010A\x86\x02\u0A5A\u0A5B\x07\x07\x02\x02" +
    "\u0A5B\u0A5C\x07\u011A\x02\x02\u0A5C\u0ACC\x03\x02\x02\x02\u0A5D\u0A5E" +
    "\x07\x04\x02\x02\u0A5E\u0A61\x05\xBC_\x02\u0A5F\u0A60\x07\x06\x02\x02" +
    "\u0A60\u0A62\x05\xBC_\x02\u0A61\u0A5F\x03\x02\x02\x02\u0A62\u0A63\x03" +
    "\x02\x02\x02\u0A63\u0A61\x03\x02\x02\x02\u0A63\u0A64\x03\x02\x02\x02\u0A64" +
    "\u0A65\x03\x02\x02\x02\u0A65\u0A66\x07\x05\x02\x02\u0A66\u0ACC\x03\x02" +
    "\x02\x02\u0A67\u0A68\x07\x04\x02\x02\u0A68\u0A69\x05$\x13\x02\u0A69\u0A6A" +
    "\x07\x05\x02\x02\u0A6A\u0ACC\x03\x02\x02\x02\u0A6B\u0A6C\x05\u0108\x85" +
    "\x02\u0A6C\u0A78\x07\x04\x02\x02\u0A6D\u0A6F\x05\x90I\x02\u0A6E\u0A6D" +
    "\x03\x02\x02\x02\u0A6E\u0A6F\x03\x02\x02\x02\u0A6F\u0A70\x03\x02\x02\x02" +
    "\u0A70\u0A75\x05\xC8e\x02\u0A71\u0A72\x07\x06\x02\x02\u0A72\u0A74\x05" +
    "\xC8e\x02\u0A73\u0A71\x03\x02\x02\x02\u0A74\u0A77\x03\x02\x02\x02\u0A75" +
    "\u0A73\x03\x02\x02\x02\u0A75\u0A76\x03\x02\x02\x02\u0A76\u0A79\x03\x02" +
    "\x02\x02\u0A77\u0A75\x03\x02\x02\x02\u0A78\u0A6E\x03\x02\x02\x02\u0A78" +
    "\u0A79\x03\x02\x02\x02\u0A79\u0A7A\x03\x02\x02\x02\u0A7A\u0A81\x07\x05" +
    "\x02\x02\u0A7B\u0A7C\x07_\x02\x02\u0A7C\u0A7D\x07\x04\x02\x02\u0A7D\u0A7E" +
    "\x07\u010B\x02\x02\u0A7E\u0A7F\x05\xCCg\x02\u0A7F\u0A80\x07\x05\x02\x02" +
    "\u0A80\u0A82\x03\x02\x02\x02\u0A81\u0A7B\x03\x02\x02\x02\u0A81\u0A82\x03" +
    "\x02\x02\x02\u0A82\u0A85\x03\x02\x02\x02\u0A83\u0A84\t\x1F\x02\x02\u0A84" +
    "\u0A86\x07\x9E\x02\x02\u0A85\u0A83\x03\x02\x02\x02\u0A85\u0A86\x03\x02" +
    "\x02\x02\u0A86\u0A89\x03\x02\x02\x02\u0A87\u0A88\x07\xA9\x02\x02\u0A88" +
    "\u0A8A\x05\u0100\x81\x02\u0A89\u0A87\x03\x02\x02\x02\u0A89\u0A8A\x03\x02" +
    "\x02\x02\u0A8A\u0ACC\x03\x02\x02\x02\u0A8B\u0A8C\x05\u0110\x89\x02\u0A8C" +
    "\u0A8D\x07\n\x02\x02\u0A8D\u0A8E\x05\xC8e\x02\u0A8E\u0ACC\x03\x02\x02" +
    "\x02\u0A8F\u0A90\x07\x04\x02\x02\u0A90\u0A93\x05\u0110\x89\x02\u0A91\u0A92" +
    "\x07\x06\x02\x02\u0A92\u0A94\x05\u0110\x89\x02\u0A93\u0A91\x03\x02\x02" +
    "\x02\u0A94\u0A95\x03\x02\x02\x02\u0A95\u0A93\x03\x02\x02\x02\u0A95\u0A96" +
    "\x03\x02\x02\x02\u0A96\u0A97\x03\x02\x02\x02\u0A97\u0A98\x07\x05\x02\x02" +
    "\u0A98\u0A99\x07\n\x02\x02\u0A99\u0A9A\x05\xC8e\x02\u0A9A\u0ACC\x03\x02" +
    "\x02\x02\u0A9B\u0ACC\x05\u0110\x89\x02\u0A9C\u0A9D\x07\x04\x02\x02\u0A9D" +
    "\u0A9E\x05\xC8e\x02\u0A9E\u0A9F\x07\x05\x02\x02\u0A9F\u0ACC\x03\x02\x02" +
    "\x02\u0AA0\u0AA1\x07[\x02\x02\u0AA1\u0AA2\x07\x04\x02\x02\u0AA2\u0AA3" +
    "\x05\u0110\x89\x02\u0AA3\u0AA4\x07g\x02\x02\u0AA4\u0AA5\x05\xD0i\x02\u0AA5" +
    "\u0AA6\x07\x05\x02\x02\u0AA6\u0ACC\x03\x02\x02\x02\u0AA7\u0AA8\t \x02" +
    "\x02\u0AA8\u0AA9\x07\x04\x02\x02\u0AA9\u0AAA\x05\xD0i\x02\u0AAA\u0AAB" +
    '\t!\x02\x02\u0AAB\u0AAE\x05\xD0i\x02\u0AAC\u0AAD\t"\x02\x02\u0AAD\u0AAF' +
    "\x05\xD0i\x02\u0AAE\u0AAC\x03\x02\x02\x02\u0AAE\u0AAF\x03\x02\x02\x02" +
    "\u0AAF\u0AB0\x03\x02\x02\x02\u0AB0\u0AB1\x07\x05\x02\x02\u0AB1\u0ACC\x03" +
    "\x02\x02\x02\u0AB2\u0AB3\x07\xF6\x02\x02\u0AB3\u0AB5\x07\x04\x02\x02\u0AB4" +
    "\u0AB6\t#\x02\x02\u0AB5\u0AB4\x03\x02\x02\x02\u0AB5\u0AB6\x03\x02\x02" +
    "\x02\u0AB6\u0AB8\x03\x02\x02\x02\u0AB7\u0AB9\x05\xD0i\x02\u0AB8\u0AB7" +
    "\x03\x02\x02\x02\u0AB8\u0AB9\x03\x02\x02\x02\u0AB9\u0ABA\x03\x02\x02\x02" +
    "\u0ABA\u0ABB\x07g\x02\x02\u0ABB\u0ABC\x05\xD0i\x02\u0ABC\u0ABD\x07\x05" +
    "\x02\x02\u0ABD\u0ACC\x03\x02\x02\x02\u0ABE\u0ABF\x07\xAB\x02\x02\u0ABF" +
    "\u0AC0\x07\x04\x02\x02\u0AC0\u0AC1\x05\xD0i\x02\u0AC1\u0AC2\x07\xB2\x02" +
    "\x02\u0AC2\u0AC3\x05\xD0i\x02\u0AC3\u0AC4\x07g\x02\x02\u0AC4\u0AC7\x05" +
    "\xD0i\x02\u0AC5\u0AC6\x07c\x02\x02\u0AC6\u0AC8\x05\xD0i\x02\u0AC7\u0AC5" +
    "\x03\x02\x02\x02\u0AC7\u0AC8\x03\x02\x02\x02\u0AC8\u0AC9\x03\x02\x02\x02" +
    "\u0AC9\u0ACA\x07\x05\x02\x02\u0ACA\u0ACC\x03\x02\x02\x02\u0ACB\u0A0F\x03" +
    "\x02\x02\x02\u0ACB\u0A11\x03\x02\x02\x02\u0ACB\u0A1D\x03\x02\x02\x02\u0ACB" +
    "\u0A2A\x03\x02\x02\x02\u0ACB\u0A31\x03\x02\x02\x02\u0ACB\u0A3E\x03\x02" +
    "\x02\x02\u0ACB\u0A47\x03\x02\x02\x02\u0ACB\u0A50\x03\x02\x02\x02\u0ACB" +
    "\u0A57\x03\x02\x02\x02\u0ACB\u0A58\x03\x02\x02\x02\u0ACB\u0A59\x03\x02" +
    "\x02\x02\u0ACB\u0A5D\x03\x02\x02\x02\u0ACB\u0A67\x03\x02\x02\x02\u0ACB" +
    "\u0A6B\x03\x02\x02\x02\u0ACB\u0A8B\x03\x02\x02\x02\u0ACB\u0A8F\x03\x02" +
    "\x02\x02\u0ACB\u0A9B\x03\x02\x02\x02\u0ACB\u0A9C\x03\x02\x02\x02\u0ACB" +
    "\u0AA0\x03\x02\x02\x02\u0ACB\u0AA7\x03\x02\x02\x02\u0ACB\u0AB2\x03\x02" +
    "\x02\x02\u0ACB\u0ABE\x03\x02\x02\x02\u0ACC\u0ADA\x03\x02\x02\x02\u0ACD" +
    "\u0ACE\f\v\x02\x02\u0ACE\u0ACF\x07\v\x02\x02\u0ACF\u0AD0\x05\xD0i\x02" +
    "\u0AD0\u0AD1\x07\f\x02\x02\u0AD1\u0AD9\x03\x02\x02\x02\u0AD2\u0AD3\f\t" +
    "\x02\x02\u0AD3\u0AD4\x07\x07\x02\x02\u0AD4\u0AD9\x05\u0110\x89\x02\u0AD5" +
    "\u0AD6\f\b\x02\x02\u0AD6\u0AD7\x07\u0122\x02\x02\u0AD7\u0AD9\x05\xECw" +
    "\x02\u0AD8\u0ACD\x03\x02\x02\x02\u0AD8\u0AD2\x03\x02\x02\x02\u0AD8\u0AD5" +
    "\x03\x02\x02\x02\u0AD9\u0ADC\x03\x02\x02\x02\u0ADA\u0AD8\x03\x02\x02\x02" +
    "\u0ADA\u0ADB\x03\x02\x02\x02\u0ADB\xD3\x03\x02\x02\x02\u0ADC\u0ADA\x03" +
    "\x02\x02\x02\u0ADD\u0AEA\x07\x9D\x02\x02\u0ADE\u0AEA\x05\xDEp\x02\u0ADF" +
    "\u0AE0\x05\u0110\x89\x02\u0AE0\u0AE1\x07\u0123\x02\x02\u0AE1\u0AEA\x03" +
    "\x02\x02\x02\u0AE2\u0AEA\x05\u0116\x8C\x02\u0AE3\u0AEA\x05\xDCo\x02\u0AE4" +
    "\u0AE6\x07\u0123\x02\x02\u0AE5\u0AE4\x03\x02\x02\x02\u0AE6\u0AE7\x03\x02" +
    "\x02\x02\u0AE7\u0AE5\x03\x02\x02\x02\u0AE7\u0AE8\x03\x02\x02\x02\u0AE8" +
    "\u0AEA\x03\x02\x02\x02\u0AE9\u0ADD\x03\x02\x02\x02\u0AE9\u0ADE\x03\x02" +
    "\x02\x02\u0AE9\u0ADF\x03\x02\x02\x02\u0AE9\u0AE2\x03\x02\x02\x02\u0AE9" +
    "\u0AE3\x03\x02\x02\x02\u0AE9\u0AE5\x03\x02\x02\x02\u0AEA\xD5\x03\x02\x02" +
    "\x02\u0AEB\u0AEC\t$\x02\x02\u0AEC\xD7\x03\x02\x02\x02\u0AED\u0AEE\t%\x02" +
    "\x02\u0AEE\xD9\x03\x02\x02\x02\u0AEF\u0AF0\t&\x02\x02\u0AF0\xDB\x03\x02" +
    "\x02\x02\u0AF1\u0AF2\t'\x02\x02\u0AF2\xDD\x03\x02\x02\x02\u0AF3\u0AF6" +
    "\x07|\x02\x02\u0AF4\u0AF7\x05\xE0q\x02\u0AF5\u0AF7\x05\xE4s\x02\u0AF6" +
    "\u0AF4\x03\x02\x02\x02\u0AF6\u0AF5\x03\x02\x02\x02\u0AF6\u0AF7\x03\x02" +
    "\x02\x02\u0AF7\xDF\x03\x02\x02\x02\u0AF8\u0AFA\x05\xE2r\x02\u0AF9\u0AFB" +
    "\x05\xE6t\x02\u0AFA\u0AF9\x03\x02\x02\x02\u0AFA\u0AFB\x03\x02\x02\x02" +
    "\u0AFB\xE1\x03\x02\x02\x02\u0AFC\u0AFD\x05\xE8u\x02\u0AFD\u0AFE\x05\u0110" +
    "\x89\x02\u0AFE\u0B00\x03\x02\x02\x02\u0AFF\u0AFC\x03\x02\x02\x02\u0B00" +
    "\u0B01\x03\x02\x02\x02\u0B01\u0AFF\x03\x02\x02\x02\u0B01\u0B02\x03\x02" +
    "\x02\x02\u0B02\xE3\x03\x02\x02\x02\u0B03\u0B06\x05\xE6t\x02\u0B04\u0B07" +
    "\x05\xE2r\x02\u0B05\u0B07\x05\xE6t\x02\u0B06\u0B04\x03\x02\x02\x02\u0B06" +
    "\u0B05\x03\x02\x02\x02\u0B06\u0B07\x03\x02\x02\x02\u0B07\xE5\x03\x02\x02" +
    "\x02\u0B08\u0B09\x05\xE8u\x02\u0B09\u0B0A\x05\u0110\x89\x02\u0B0A\u0B0B" +
    "\x07\xF0\x02\x02\u0B0B\u0B0C\x05\u0110\x89\x02\u0B0C\xE7\x03\x02\x02\x02" +
    "\u0B0D\u0B0F\t(\x02\x02\u0B0E\u0B0D\x03\x02\x02\x02\u0B0E\u0B0F\x03\x02" +
    "\x02\x02\u0B0F\u0B10\x03\x02\x02\x02\u0B10\u0B11\t)\x02\x02\u0B11\xE9" +
    "\x03\x02\x02\x02\u0B12\u0B16\x07a\x02\x02\u0B13\u0B14\x07\x0F\x02\x02" +
    "\u0B14\u0B16\x05\u010C\x87\x02\u0B15\u0B12\x03\x02\x02\x02\u0B15\u0B13" +
    "\x03\x02\x02\x02\u0B16\xEB\x03\x02\x02\x02\u0B17\u0B18\x07\x17\x02\x02" +
    "\u0B18\u0B19\x07\u0114\x02\x02\u0B19\u0B1A\x05\xECw\x02\u0B1A\u0B1B\x07" +
    "\u0116\x02\x02\u0B1B\u0B46\x03\x02\x02\x02\u0B1C\u0B1D\x07\x92\x02\x02" +
    "\u0B1D\u0B1E\x07\u0114\x02\x02\u0B1E\u0B1F\x05\xECw\x02\u0B1F\u0B20\x07" +
    "\x06\x02\x02\u0B20\u0B21\x05\xECw\x02\u0B21\u0B22\x07\u0116\x02\x02\u0B22" +
    "\u0B46\x03\x02\x02\x02\u0B23\u0B2A\x07\xE4\x02\x02\u0B24\u0B26\x07\u0114" +
    "\x02\x02\u0B25\u0B27\x05\xF6|\x02\u0B26\u0B25\x03\x02\x02\x02\u0B26\u0B27" +
    "\x03\x02\x02\x02\u0B27\u0B28\x03\x02\x02\x02\u0B28\u0B2B\x07\u0116\x02" +
    "\x02\u0B29\u0B2B\x07\u0112\x02\x02\u0B2A\u0B24\x03\x02\x02\x02\u0B2A\u0B29" +
    "\x03\x02\x02\x02\u0B2B\u0B46\x03\x02\x02\x02\u0B2C\u0B2D\x07|\x02\x02" +
    "\u0B2D\u0B30\t*\x02\x02\u0B2E\u0B2F\x07\xF0\x02\x02\u0B2F\u0B31\x07\x96" +
    "\x02\x02\u0B30\u0B2E\x03\x02\x02\x02\u0B30\u0B31\x03\x02\x02\x02\u0B31" +
    "\u0B46\x03\x02\x02\x02\u0B32\u0B33\x07|\x02\x02\u0B33\u0B36\t+\x02\x02" +
    "\u0B34\u0B35\x07\xF0\x02\x02\u0B35\u0B37\t,\x02\x02\u0B36\u0B34\x03\x02" +
    "\x02\x02\u0B36\u0B37\x03\x02\x02\x02\u0B37\u0B46\x03\x02\x02\x02\u0B38" +
    "\u0B43\x05\u0110\x89\x02\u0B39\u0B3A\x07\x04\x02\x02\u0B3A\u0B3F\x07\u0127" +
    "\x02\x02\u0B3B\u0B3C\x07\x06\x02\x02\u0B3C\u0B3E\x07\u0127\x02\x02\u0B3D" +
    "\u0B3B\x03\x02\x02\x02\u0B3E\u0B41\x03\x02\x02\x02\u0B3F\u0B3D\x03\x02" +
    "\x02\x02\u0B3F\u0B40\x03\x02\x02\x02\u0B40\u0B42\x03\x02\x02\x02\u0B41" +
    "\u0B3F\x03\x02\x02\x02\u0B42\u0B44\x07\x05\x02\x02\u0B43\u0B39\x03\x02" +
    "\x02\x02\u0B43\u0B44\x03\x02\x02\x02\u0B44\u0B46\x03\x02\x02\x02\u0B45" +
    "\u0B17\x03\x02\x02\x02\u0B45\u0B1C\x03\x02\x02\x02\u0B45\u0B23\x03\x02" +
    "\x02\x02\u0B45\u0B2C\x03\x02\x02\x02\u0B45\u0B32\x03\x02\x02\x02\u0B45" +
    "\u0B38\x03\x02\x02\x02\u0B46\xED\x03\x02\x02\x02\u0B47\u0B4C\x05\xF0y" +
    "\x02\u0B48\u0B49\x07\x06\x02\x02\u0B49\u0B4B\x05\xF0y\x02\u0B4A\u0B48" +
    "\x03\x02\x02\x02\u0B4B\u0B4E\x03\x02\x02\x02\u0B4C\u0B4A\x03\x02\x02\x02" +
    "\u0B4C\u0B4D\x03\x02\x02\x02\u0B4D\xEF\x03\x02\x02\x02\u0B4E\u0B4C\x03" +
    "\x02\x02\x02\u0B4F\u0B50\x05\xB6\\\x02\u0B50\u0B53\x05\xECw\x02\u0B51" +
    "\u0B52\x07\x9C\x02\x02\u0B52\u0B54\x07\x9D\x02\x02\u0B53\u0B51\x03\x02" +
    "\x02\x02\u0B53\u0B54\x03\x02\x02\x02\u0B54\u0B56\x03\x02\x02\x02\u0B55" +
    '\u0B57\x05"\x12\x02\u0B56\u0B55\x03\x02\x02\x02\u0B56\u0B57\x03\x02\x02' +
    "\x02\u0B57\u0B59\x03\x02\x02\x02\u0B58\u0B5A\x05\xEAv\x02\u0B59\u0B58" +
    "\x03\x02\x02\x02\u0B59\u0B5A\x03\x02\x02\x02\u0B5A\xF1\x03\x02\x02\x02" +
    "\u0B5B\u0B60\x05\xF4{\x02\u0B5C\u0B5D\x07\x06\x02\x02\u0B5D\u0B5F\x05" +
    "\xF4{\x02\u0B5E\u0B5C\x03\x02\x02\x02\u0B5F\u0B62\x03\x02\x02\x02\u0B60" +
    "\u0B5E\x03\x02\x02\x02\u0B60\u0B61\x03\x02\x02\x02\u0B61\xF3\x03\x02\x02" +
    "\x02\u0B62\u0B60\x03\x02\x02\x02\u0B63\u0B64\x05\u010C\x87\x02\u0B64\u0B67" +
    "\x05\xECw\x02\u0B65\u0B66\x07\x9C\x02\x02\u0B66\u0B68\x07\x9D\x02\x02" +
    "\u0B67\u0B65\x03\x02\x02\x02\u0B67\u0B68\x03\x02\x02\x02\u0B68\u0B6A\x03" +
    '\x02\x02\x02\u0B69\u0B6B\x05"\x12\x02\u0B6A\u0B69\x03\x02\x02\x02\u0B6A' +
    "\u0B6B\x03\x02\x02\x02\u0B6B\xF5\x03\x02\x02\x02\u0B6C\u0B71\x05\xF8}" +
    "\x02\u0B6D\u0B6E\x07\x06\x02\x02\u0B6E\u0B70\x05\xF8}\x02\u0B6F\u0B6D" +
    "\x03\x02\x02\x02\u0B70\u0B73\x03\x02\x02\x02\u0B71\u0B6F\x03\x02\x02\x02" +
    "\u0B71\u0B72\x03\x02\x02\x02\u0B72\xF7\x03\x02\x02\x02\u0B73\u0B71\x03" +
    "\x02\x02\x02\u0B74\u0B76\x05\u0110\x89\x02\u0B75\u0B77\x07\r\x02\x02\u0B76" +
    "\u0B75\x03\x02\x02\x02\u0B76\u0B77\x03\x02\x02\x02\u0B77\u0B78\x03\x02" +
    "\x02\x02\u0B78\u0B7B\x05\xECw\x02\u0B79\u0B7A\x07\x9C\x02\x02\u0B7A\u0B7C" +
    "\x07\x9D\x02\x02\u0B7B\u0B79\x03\x02\x02\x02\u0B7B\u0B7C\x03\x02\x02\x02" +
    '\u0B7C\u0B7E\x03\x02\x02\x02\u0B7D\u0B7F\x05"\x12\x02\u0B7E\u0B7D\x03' +
    "\x02\x02\x02\u0B7E\u0B7F\x03\x02\x02\x02\u0B7F\xF9\x03\x02\x02\x02\u0B80" +
    "\u0B81\x07\u010A\x02\x02\u0B81\u0B82\x05\xC8e\x02\u0B82\u0B83\x07\xEE" +
    "\x02\x02\u0B83\u0B84\x05\xC8e\x02\u0B84\xFB\x03\x02\x02\x02\u0B85\u0B86" +
    "\x07\u010C\x02\x02\u0B86\u0B8B\x05\xFE\x80\x02\u0B87\u0B88\x07\x06\x02" +
    "\x02\u0B88\u0B8A\x05\xFE\x80\x02\u0B89\u0B87\x03\x02\x02\x02\u0B8A\u0B8D" +
    "\x03\x02\x02\x02\u0B8B\u0B89\x03\x02\x02\x02\u0B8B\u0B8C\x03\x02\x02\x02" +
    "\u0B8C\xFD\x03\x02\x02\x02\u0B8D\u0B8B\x03\x02\x02\x02\u0B8E\u0B8F\x05" +
    "\u010C\x87\x02\u0B8F\u0B90\x07\x18\x02\x02\u0B90\u0B91\x05\u0100\x81\x02" +
    "\u0B91\xFF\x03\x02\x02\x02\u0B92\u0BC1\x05\u010C\x87\x02\u0B93\u0B94\x07" +
    "\x04\x02\x02\u0B94\u0B95\x05\u010C\x87\x02\u0B95\u0B96\x07\x05\x02\x02" +
    "\u0B96\u0BC1\x03\x02\x02\x02\u0B97\u0BBA\x07\x04\x02\x02\u0B98\u0B99\x07" +
    "(\x02\x02\u0B99\u0B9A\x07 \x02\x02\u0B9A\u0B9F\x05\xC8e\x02\u0B9B\u0B9C" +
    "\x07\x06\x02\x02\u0B9C\u0B9E\x05\xC8e\x02\u0B9D\u0B9B\x03\x02\x02\x02" +
    "\u0B9E\u0BA1\x03\x02\x02\x02\u0B9F\u0B9D\x03\x02\x02\x02\u0B9F\u0BA0\x03" +
    "\x02\x02\x02\u0BA0\u0BBB\x03\x02\x02\x02\u0BA1\u0B9F\x03\x02\x02\x02\u0BA2" +
    "\u0BA3\t-\x02\x02\u0BA3\u0BA4\x07 \x02\x02\u0BA4\u0BA9\x05\xC8e\x02\u0BA5" +
    "\u0BA6\x07\x06\x02\x02\u0BA6\u0BA8\x05\xC8e\x02\u0BA7\u0BA5\x03\x02\x02" +
    "\x02\u0BA8\u0BAB\x03\x02\x02\x02\u0BA9\u0BA7\x03\x02\x02\x02\u0BA9\u0BAA" +
    "\x03\x02\x02\x02\u0BAA\u0BAD\x03\x02\x02\x02\u0BAB\u0BA9\x03\x02\x02\x02" +
    "\u0BAC\u0BA2\x03\x02\x02\x02\u0BAC\u0BAD\x03\x02\x02\x02\u0BAD\u0BB8\x03" +
    "\x02\x02\x02\u0BAE\u0BAF\t.\x02\x02\u0BAF\u0BB0\x07 \x02\x02\u0BB0\u0BB5" +
    "\x05Z.\x02\u0BB1\u0BB2\x07\x06\x02\x02\u0BB2\u0BB4\x05Z.\x02\u0BB3\u0BB1" +
    "\x03\x02\x02\x02\u0BB4\u0BB7\x03\x02\x02\x02\u0BB5\u0BB3\x03\x02\x02\x02" +
    "\u0BB5\u0BB6\x03\x02\x02\x02\u0BB6\u0BB9\x03\x02\x02\x02\u0BB7\u0BB5\x03" +
    "\x02\x02\x02\u0BB8\u0BAE\x03\x02\x02\x02\u0BB8\u0BB9\x03\x02\x02\x02\u0BB9" +
    "\u0BBB\x03\x02\x02\x02\u0BBA\u0B98\x03\x02\x02\x02\u0BBA\u0BAC\x03\x02" +
    "\x02\x02\u0BBB\u0BBD\x03\x02\x02\x02\u0BBC\u0BBE\x05\u0102\x82\x02\u0BBD" +
    "\u0BBC\x03\x02\x02\x02\u0BBD\u0BBE\x03\x02\x02\x02\u0BBE\u0BBF\x03\x02" +
    "\x02\x02\u0BBF\u0BC1\x07\x05\x02\x02\u0BC0\u0B92\x03\x02\x02\x02\u0BC0" +
    "\u0B93\x03\x02\x02\x02\u0BC0\u0B97\x03\x02\x02\x02\u0BC1\u0101\x03\x02" +
    "\x02\x02\u0BC2\u0BC3\x07\xBA\x02\x02\u0BC3\u0BD3\x05\u0104\x83\x02\u0BC4" +
    "\u0BC5\x07\xCF\x02\x02\u0BC5\u0BD3\x05\u0104\x83\x02\u0BC6\u0BC7\x07\xBA" +
    "\x02\x02\u0BC7\u0BC8\x07\x1C\x02\x02\u0BC8\u0BC9\x05\u0104\x83\x02\u0BC9" +
    "\u0BCA\x07\x13\x02\x02\u0BCA\u0BCB\x05\u0104\x83\x02\u0BCB\u0BD3\x03\x02" +
    "\x02\x02\u0BCC\u0BCD\x07\xCF\x02\x02\u0BCD\u0BCE\x07\x1C\x02\x02\u0BCE" +
    "\u0BCF\x05\u0104\x83\x02\u0BCF\u0BD0\x07\x13\x02\x02\u0BD0\u0BD1\x05\u0104" +
    "\x83\x02\u0BD1\u0BD3\x03\x02\x02\x02\u0BD2\u0BC2\x03\x02\x02\x02\u0BD2" +
    "\u0BC4\x03\x02\x02\x02\u0BD2\u0BC6\x03\x02\x02\x02\u0BD2\u0BCC\x03\x02" +
    "\x02\x02\u0BD3\u0103\x03\x02\x02\x02\u0BD4\u0BD5\x07\xFC\x02\x02\u0BD5" +
    "\u0BDC\t/\x02\x02\u0BD6\u0BD7\x07:\x02\x02\u0BD7\u0BDC\x07\xCE\x02\x02" +
    "\u0BD8\u0BD9\x05\xC8e\x02\u0BD9\u0BDA\t/\x02\x02\u0BDA\u0BDC\x03\x02\x02" +
    "\x02\u0BDB\u0BD4\x03\x02\x02\x02\u0BDB\u0BD6\x03\x02\x02\x02\u0BDB\u0BD8" +
    "\x03\x02\x02\x02\u0BDC\u0105\x03\x02\x02\x02\u0BDD\u0BE2\x05\u010A\x86" +
    "\x02\u0BDE\u0BDF\x07\x06\x02\x02\u0BDF\u0BE1\x05\u010A\x86\x02\u0BE0\u0BDE" +
    "\x03\x02\x02\x02\u0BE1\u0BE4\x03\x02\x02\x02\u0BE2\u0BE0\x03\x02\x02\x02" +
    "\u0BE2\u0BE3\x03\x02\x02\x02\u0BE3\u0107\x03\x02\x02\x02\u0BE4\u0BE2\x03" +
    "\x02\x02\x02\u0BE5\u0BEA\x05\u010A\x86\x02\u0BE6\u0BEA\x07_\x02\x02\u0BE7" +
    "\u0BEA\x07\x86\x02\x02\u0BE8\u0BEA\x07\xC8\x02\x02\u0BE9\u0BE5\x03\x02" +
    "\x02\x02\u0BE9\u0BE6\x03\x02\x02\x02\u0BE9\u0BE7\x03\x02\x02\x02\u0BE9" +
    "\u0BE8\x03\x02\x02\x02\u0BEA\u0109\x03\x02\x02\x02\u0BEB\u0BF0\x05\u0110" +
    "\x89\x02\u0BEC\u0BED\x07\x07\x02\x02\u0BED\u0BEF\x05\u0110\x89\x02\u0BEE" +
    "\u0BEC\x03\x02\x02\x02\u0BEF\u0BF2\x03\x02\x02\x02\u0BF0\u0BEE\x03\x02" +
    "\x02\x02\u0BF0\u0BF1\x03\x02\x02\x02\u0BF1\u010B\x03\x02\x02\x02\u0BF2" +
    "\u0BF0\x03\x02\x02\x02\u0BF3\u0BF4\x05\u0110\x89\x02\u0BF4\u0BF5\x05\u010E" +
    "\x88\x02\u0BF5\u010D\x03\x02\x02\x02\u0BF6\u0BF7\x07\u0119\x02\x02\u0BF7" +
    "\u0BF9\x05\u0110\x89\x02\u0BF8\u0BF6\x03\x02\x02\x02\u0BF9\u0BFA\x03\x02" +
    "\x02\x02\u0BFA\u0BF8\x03\x02\x02\x02\u0BFA\u0BFB\x03\x02\x02\x02\u0BFB" +
    "\u0BFE\x03\x02\x02\x02\u0BFC\u0BFE\x03\x02\x02\x02\u0BFD\u0BF8\x03\x02" +
    "\x02\x02\u0BFD\u0BFC\x03\x02\x02\x02\u0BFE\u010F\x03\x02\x02\x02\u0BFF" +
    "\u0C03\x05\u0112\x8A\x02\u0C00\u0C01\x06\x89\x13\x02\u0C01\u0C03\x05\u011C" +
    "\x8F\x02\u0C02\u0BFF\x03\x02\x02\x02\u0C02\u0C00\x03\x02\x02\x02\u0C03" +
    "\u0111\x03\x02\x02\x02\u0C04\u0C0B\x07\u012D\x02\x02\u0C05\u0C0B\x05\u0114" +
    "\x8B\x02\u0C06\u0C07\x06\x8A\x14\x02\u0C07\u0C0B\x05\u011A\x8E\x02\u0C08" +
    "\u0C09\x06\x8A\x15\x02\u0C09\u0C0B\x05\u011E\x90\x02\u0C0A\u0C04\x03\x02" +
    "\x02\x02\u0C0A\u0C05\x03\x02\x02\x02\u0C0A\u0C06\x03\x02\x02\x02\u0C0A" +
    "\u0C08\x03\x02\x02\x02\u0C0B\u0113\x03\x02\x02\x02\u0C0C\u0C0D\x06\x8B" +
    "\x16\x02\u0C0D\u0C11\x07\u012E\x02\x02\u0C0E\u0C0F\x06\x8B\x17\x02\u0C0F" +
    "\u0C11\x07\u012F\x02\x02\u0C10\u0C0C\x03\x02\x02\x02\u0C10\u0C0E\x03\x02" +
    "\x02\x02\u0C11\u0115\x03\x02\x02\x02\u0C12\u0C14\x06\x8C\x18\x02\u0C13" +
    "\u0C15\x07\u0119\x02\x02\u0C14\u0C13\x03\x02\x02\x02\u0C14\u0C15\x03\x02" +
    "\x02\x02\u0C15\u0C16\x03\x02\x02\x02\u0C16\u0C3E\x07\u0128\x02\x02\u0C17" +
    "\u0C19\x06\x8C\x19\x02\u0C18\u0C1A\x07\u0119\x02\x02\u0C19\u0C18\x03\x02" +
    "\x02\x02\u0C19\u0C1A\x03\x02\x02\x02\u0C1A\u0C1B\x03\x02\x02\x02\u0C1B" +
    "\u0C3E\x07\u0129\x02\x02\u0C1C\u0C1E\x06\x8C\x1A\x02\u0C1D\u0C1F\x07\u0119" +
    "\x02\x02\u0C1E\u0C1D\x03\x02\x02\x02\u0C1E\u0C1F\x03\x02\x02\x02\u0C1F" +
    "\u0C20\x03\x02\x02\x02\u0C20\u0C3E\t0\x02\x02\u0C21\u0C23\x07\u0119\x02" +
    "\x02\u0C22\u0C21\x03\x02\x02\x02\u0C22\u0C23\x03\x02\x02\x02\u0C23\u0C24" +
    "\x03\x02\x02\x02\u0C24\u0C3E\x07\u0127\x02\x02\u0C25\u0C27\x07\u0119\x02" +
    "\x02\u0C26\u0C25\x03\x02\x02\x02\u0C26\u0C27\x03\x02\x02\x02\u0C27\u0C28" +
    "\x03\x02\x02\x02\u0C28\u0C3E\x07\u0124\x02\x02\u0C29\u0C2B\x07\u0119\x02" +
    "\x02\u0C2A\u0C29\x03\x02\x02\x02\u0C2A\u0C2B\x03\x02\x02\x02\u0C2B\u0C2C" +
    "\x03\x02\x02\x02\u0C2C\u0C3E\x07\u0125\x02\x02\u0C2D\u0C2F\x07\u0119\x02" +
    "\x02\u0C2E\u0C2D\x03\x02\x02\x02\u0C2E\u0C2F\x03\x02\x02\x02\u0C2F\u0C30" +
    "\x03\x02\x02\x02\u0C30\u0C3E\x07\u0126\x02\x02\u0C31\u0C33\x07\u0119\x02" +
    "\x02\u0C32\u0C31\x03\x02\x02\x02\u0C32\u0C33\x03\x02\x02\x02\u0C33\u0C34" +
    "\x03\x02\x02\x02\u0C34\u0C3E\x07\u012B\x02\x02\u0C35\u0C37\x07\u0119\x02" +
    "\x02\u0C36\u0C35\x03\x02\x02\x02\u0C36\u0C37\x03\x02\x02\x02\u0C37\u0C38" +
    "\x03\x02\x02\x02\u0C38\u0C3E\x07\u012A\x02\x02\u0C39\u0C3B\x07\u0119\x02" +
    "\x02\u0C3A\u0C39\x03\x02\x02\x02\u0C3A\u0C3B\x03\x02\x02\x02\u0C3B\u0C3C" +
    "\x03\x02\x02\x02\u0C3C\u0C3E\x07\u012C\x02\x02\u0C3D\u0C12\x03\x02\x02" +
    "\x02\u0C3D\u0C17\x03\x02\x02\x02\u0C3D\u0C1C\x03\x02\x02\x02\u0C3D\u0C22" +
    "\x03\x02\x02\x02\u0C3D\u0C26\x03\x02\x02\x02\u0C3D\u0C2A\x03\x02\x02\x02" +
    "\u0C3D\u0C2E\x03\x02\x02\x02\u0C3D\u0C32\x03\x02\x02\x02\u0C3D\u0C36\x03" +
    "\x02\x02\x02\u0C3D\u0C3A\x03\x02\x02\x02\u0C3E\u0117\x03\x02\x02\x02\u0C3F" +
    '\u0C40\x07\xFA\x02\x02\u0C40\u0C47\x05\xECw\x02\u0C41\u0C47\x05"\x12' +
    "\x02\u0C42\u0C47\x05\xEAv\x02\u0C43\u0C44\t1\x02\x02\u0C44\u0C45\x07\x9C" +
    "\x02\x02\u0C45\u0C47\x07\x9D\x02\x02\u0C46\u0C3F\x03\x02\x02\x02\u0C46" +
    "\u0C41\x03\x02\x02\x02\u0C46\u0C42\x03\x02\x02\x02\u0C46\u0C43\x03\x02" +
    "\x02\x02\u0C47\u0119\x03\x02\x02\x02\u0C48\u0C49\t2\x02\x02\u0C49\u011B" +
    "\x03\x02\x02\x02\u0C4A\u0C4B\t3\x02\x02\u0C4B\u011D\x03\x02\x02\x02\u0C4C" +
    "\u0C4D\t4\x02\x02\u0C4D\u011F\x03\x02\x02\x02\u01A2\u0124\u013D\u0142" +
    "\u014A\u0152\u0154\u0168\u016C\u0172\u0175\u0178\u017F\u0182\u0186\u0189" +
    "\u0190\u019B\u019D\u01A5\u01A8\u01AC\u01AF\u01B5\u01C0\u01C6\u01CB\u020B" +
    "\u0214\u0218\u021E\u0222\u0227\u022D\u0239\u0241\u0247\u0254\u0259\u0269" +
    "\u0270\u0274\u027A\u0289\u028D\u0293\u0299\u029C\u029F\u02A5\u02A9\u02B1" +
    "\u02B3\u02BC\u02BF\u02C8\u02CD\u02D3\u02DA\u02DD\u02E3\u02EE\u02F1\u02F5" +
    "\u02FA\u02FF\u0306\u0309\u030C\u0313\u0318\u0321\u0329\u032F\u0332\u0335" +
    "\u033B\u033F\u0343\u0347\u0349\u0351\u0359\u035F\u0365\u0368\u036C\u036F" +
    "\u0373\u038F\u0392\u0396\u039C\u039F\u03A2\u03A8\u03B0\u03B5\u03BB\u03C1" +
    "\u03C9\u03D0\u03D8\u03E9\u03F7\u03FA\u0400\u0409\u0412\u0419\u041C\u0428" +
    "\u042C\u0433\u04A7\u04AF\u04B7\u04C0\u04CA\u04CE\u04D1\u04D7\u04DD\u04E9" +
    "\u04F5\u04FA\u0503\u050B\u0512\u0514\u0517\u051C\u0520\u0525\u0528\u052D" +
    "\u0532\u0535\u053A\u053E\u0543\u0545\u0549\u0552\u055A\u0563\u056A\u0573" +
    "\u0578\u057B\u0591\u0593\u059C\u05A3\u05A6\u05AD\u05B1\u05B7\u05BF\u05CA" +
    "\u05D5\u05DC\u05E2\u05EF\u05F6\u05FD\u0609\u0611\u0617\u061A\u0623\u0626" +
    "\u062F\u0632\u063B\u063E\u0647\u064A\u064D\u0652\u0654\u0660\u0667\u066E" +
    "\u0671\u0673\u067F\u0683\u0687\u068D\u0691\u0699\u069D\u06A0\u06A3\u06A6" +
    "\u06AA\u06AE\u06B3\u06B7\u06BA\u06BD\u06C0\u06C4\u06C9\u06CD\u06D0\u06D3" +
    "\u06D6\u06D8\u06DE\u06E5\u06EA\u06ED\u06F0\u06F4\u06FE\u0702\u0704\u0707" +
    "\u070B\u0711\u0715\u0720\u072A\u0736\u0745\u074A\u0751\u0761\u0766\u0773" +
    "\u0778\u0780\u0786\u078A\u0793\u079D\u07AC\u07B1\u07B3\u07B7\u07C0\u07CD" +
    "\u07D2\u07D6\u07DE\u07E1\u07E5\u07F3\u0800\u0805\u0809\u080C\u0811\u081A" +
    "\u081D\u0822\u0829\u082C\u0831\u0837\u083D\u0841\u0847\u084B\u084E\u0853" +
    "\u0856\u085B\u085F\u0862\u0865\u086B\u0870\u0875\u0887\u0889\u088C\u0897" +
    "\u08A0\u08A7\u08AF\u08B6\u08BA\u08C2\u08CA\u08D0\u08D8\u08E4\u08E7\u08ED" +
    "\u08F1\u08F3\u08FC\u0908\u090A\u0911\u0918\u091E\u0924\u0926\u092D\u0935" +
    "\u093B\u0942\u0948\u094C\u094E\u0955\u095E\u0965\u096F\u0974\u0978\u0981" +
    "\u098E\u0990\u0998\u099A\u099E\u09A6\u09AF\u09B5\u09BD\u09C2\u09CE\u09D3" +
    "\u09D6\u09DC\u09E0\u09E5\u09EA\u09EF\u09F5\u0A0A\u0A0C\u0A15\u0A19\u0A22" +
    "\u0A26\u0A38\u0A3B\u0A43\u0A4C\u0A63\u0A6E\u0A75\u0A78\u0A81\u0A85\u0A89" +
    "\u0A95\u0AAE\u0AB5\u0AB8\u0AC7\u0ACB\u0AD8\u0ADA\u0AE7\u0AE9\u0AF6\u0AFA" +
    "\u0B01\u0B06\u0B0E\u0B15\u0B26\u0B2A\u0B30\u0B36\u0B3F\u0B43\u0B45\u0B4C" +
    "\u0B53\u0B56\u0B59\u0B60\u0B67\u0B6A\u0B71\u0B76\u0B7B\u0B7E\u0B8B\u0B9F" +
    "\u0BA9\u0BAC\u0BB5\u0BB8\u0BBA\u0BBD\u0BC0\u0BD2\u0BDB\u0BE2\u0BE9\u0BF0" +
    "\u0BFA\u0BFD\u0C02\u0C0A\u0C10\u0C14\u0C19\u0C1E\u0C22\u0C26\u0C2A\u0C2E" +
    "\u0C32\u0C36\u0C3A\u0C3D\u0C46";
  public static readonly _serializedATN: string = Utils.join(
    [
      SqlBaseParser._serializedATNSegment0,
      SqlBaseParser._serializedATNSegment1,
      SqlBaseParser._serializedATNSegment2,
      SqlBaseParser._serializedATNSegment3,
      SqlBaseParser._serializedATNSegment4,
      SqlBaseParser._serializedATNSegment5
    ],
    ""
  );
  public static __ATN: ATN;
  public static get _ATN(): ATN {
    if (!SqlBaseParser.__ATN) {
      SqlBaseParser.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(SqlBaseParser._serializedATN));
    }

    return SqlBaseParser.__ATN;
  }
}

export class SingleStatementContext extends ParserRuleContext {
  public statement(): StatementContext {
    return this.getRuleContext(0, StatementContext);
  }
  public EOF(): TerminalNode {
    return this.getToken(SqlBaseParser.EOF, 0);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_singleStatement;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterSingleStatement) {
      listener.enterSingleStatement(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitSingleStatement) {
      listener.exitSingleStatement(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitSingleStatement) {
      return visitor.visitSingleStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class SingleExpressionContext extends ParserRuleContext {
  public namedExpression(): NamedExpressionContext {
    return this.getRuleContext(0, NamedExpressionContext);
  }
  public EOF(): TerminalNode {
    return this.getToken(SqlBaseParser.EOF, 0);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_singleExpression;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterSingleExpression) {
      listener.enterSingleExpression(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitSingleExpression) {
      listener.exitSingleExpression(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitSingleExpression) {
      return visitor.visitSingleExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class SingleTableIdentifierContext extends ParserRuleContext {
  public tableIdentifier(): TableIdentifierContext {
    return this.getRuleContext(0, TableIdentifierContext);
  }
  public EOF(): TerminalNode {
    return this.getToken(SqlBaseParser.EOF, 0);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_singleTableIdentifier;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterSingleTableIdentifier) {
      listener.enterSingleTableIdentifier(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitSingleTableIdentifier) {
      listener.exitSingleTableIdentifier(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitSingleTableIdentifier) {
      return visitor.visitSingleTableIdentifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class SingleMultipartIdentifierContext extends ParserRuleContext {
  public multipartIdentifier(): MultipartIdentifierContext {
    return this.getRuleContext(0, MultipartIdentifierContext);
  }
  public EOF(): TerminalNode {
    return this.getToken(SqlBaseParser.EOF, 0);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_singleMultipartIdentifier;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterSingleMultipartIdentifier) {
      listener.enterSingleMultipartIdentifier(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitSingleMultipartIdentifier) {
      listener.exitSingleMultipartIdentifier(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitSingleMultipartIdentifier) {
      return visitor.visitSingleMultipartIdentifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class SingleFunctionIdentifierContext extends ParserRuleContext {
  public functionIdentifier(): FunctionIdentifierContext {
    return this.getRuleContext(0, FunctionIdentifierContext);
  }
  public EOF(): TerminalNode {
    return this.getToken(SqlBaseParser.EOF, 0);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_singleFunctionIdentifier;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterSingleFunctionIdentifier) {
      listener.enterSingleFunctionIdentifier(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitSingleFunctionIdentifier) {
      listener.exitSingleFunctionIdentifier(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitSingleFunctionIdentifier) {
      return visitor.visitSingleFunctionIdentifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class SingleDataTypeContext extends ParserRuleContext {
  public dataType(): DataTypeContext {
    return this.getRuleContext(0, DataTypeContext);
  }
  public EOF(): TerminalNode {
    return this.getToken(SqlBaseParser.EOF, 0);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_singleDataType;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterSingleDataType) {
      listener.enterSingleDataType(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitSingleDataType) {
      listener.exitSingleDataType(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitSingleDataType) {
      return visitor.visitSingleDataType(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class SingleTableSchemaContext extends ParserRuleContext {
  public colTypeList(): ColTypeListContext {
    return this.getRuleContext(0, ColTypeListContext);
  }
  public EOF(): TerminalNode {
    return this.getToken(SqlBaseParser.EOF, 0);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_singleTableSchema;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterSingleTableSchema) {
      listener.enterSingleTableSchema(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitSingleTableSchema) {
      listener.exitSingleTableSchema(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitSingleTableSchema) {
      return visitor.visitSingleTableSchema(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class StatementContext extends ParserRuleContext {
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_statement;
  }
  public copyFrom(ctx: StatementContext): void {
    super.copyFrom(ctx);
  }
}
export class StatementDefaultContext extends StatementContext {
  public query(): QueryContext {
    return this.getRuleContext(0, QueryContext);
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterStatementDefault) {
      listener.enterStatementDefault(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitStatementDefault) {
      listener.exitStatementDefault(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitStatementDefault) {
      return visitor.visitStatementDefault(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class DmlStatementContext extends StatementContext {
  public dmlStatementNoWith(): DmlStatementNoWithContext {
    return this.getRuleContext(0, DmlStatementNoWithContext);
  }
  public ctes(): CtesContext | undefined {
    return this.tryGetRuleContext(0, CtesContext);
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterDmlStatement) {
      listener.enterDmlStatement(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitDmlStatement) {
      listener.exitDmlStatement(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitDmlStatement) {
      return visitor.visitDmlStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class UseContext extends StatementContext {
  public USE(): TerminalNode {
    return this.getToken(SqlBaseParser.USE, 0);
  }
  public multipartIdentifier(): MultipartIdentifierContext {
    return this.getRuleContext(0, MultipartIdentifierContext);
  }
  public NAMESPACE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.NAMESPACE, 0);
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterUse) {
      listener.enterUse(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitUse) {
      listener.exitUse(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitUse) {
      return visitor.visitUse(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class CreateNamespaceContext extends StatementContext {
  public CREATE(): TerminalNode {
    return this.getToken(SqlBaseParser.CREATE, 0);
  }
  public namespace(): NamespaceContext {
    return this.getRuleContext(0, NamespaceContext);
  }
  public multipartIdentifier(): MultipartIdentifierContext {
    return this.getRuleContext(0, MultipartIdentifierContext);
  }
  public IF(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.IF, 0);
  }
  public NOT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.NOT, 0);
  }
  public EXISTS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.EXISTS, 0);
  }
  public commentSpec(): CommentSpecContext[];
  public commentSpec(i: number): CommentSpecContext;
  public commentSpec(i?: number): CommentSpecContext | CommentSpecContext[] {
    if (i === undefined) {
      return this.getRuleContexts(CommentSpecContext);
    } else {
      return this.getRuleContext(i, CommentSpecContext);
    }
  }
  public locationSpec(): LocationSpecContext[];
  public locationSpec(i: number): LocationSpecContext;
  public locationSpec(i?: number): LocationSpecContext | LocationSpecContext[] {
    if (i === undefined) {
      return this.getRuleContexts(LocationSpecContext);
    } else {
      return this.getRuleContext(i, LocationSpecContext);
    }
  }
  public WITH(): TerminalNode[];
  public WITH(i: number): TerminalNode;
  public WITH(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(SqlBaseParser.WITH);
    } else {
      return this.getToken(SqlBaseParser.WITH, i);
    }
  }
  public tablePropertyList(): TablePropertyListContext[];
  public tablePropertyList(i: number): TablePropertyListContext;
  public tablePropertyList(i?: number): TablePropertyListContext | TablePropertyListContext[] {
    if (i === undefined) {
      return this.getRuleContexts(TablePropertyListContext);
    } else {
      return this.getRuleContext(i, TablePropertyListContext);
    }
  }
  public DBPROPERTIES(): TerminalNode[];
  public DBPROPERTIES(i: number): TerminalNode;
  public DBPROPERTIES(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(SqlBaseParser.DBPROPERTIES);
    } else {
      return this.getToken(SqlBaseParser.DBPROPERTIES, i);
    }
  }
  public PROPERTIES(): TerminalNode[];
  public PROPERTIES(i: number): TerminalNode;
  public PROPERTIES(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(SqlBaseParser.PROPERTIES);
    } else {
      return this.getToken(SqlBaseParser.PROPERTIES, i);
    }
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterCreateNamespace) {
      listener.enterCreateNamespace(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitCreateNamespace) {
      listener.exitCreateNamespace(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitCreateNamespace) {
      return visitor.visitCreateNamespace(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class SetNamespacePropertiesContext extends StatementContext {
  public ALTER(): TerminalNode {
    return this.getToken(SqlBaseParser.ALTER, 0);
  }
  public namespace(): NamespaceContext {
    return this.getRuleContext(0, NamespaceContext);
  }
  public multipartIdentifier(): MultipartIdentifierContext {
    return this.getRuleContext(0, MultipartIdentifierContext);
  }
  public SET(): TerminalNode {
    return this.getToken(SqlBaseParser.SET, 0);
  }
  public tablePropertyList(): TablePropertyListContext {
    return this.getRuleContext(0, TablePropertyListContext);
  }
  public DBPROPERTIES(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DBPROPERTIES, 0);
  }
  public PROPERTIES(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.PROPERTIES, 0);
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterSetNamespaceProperties) {
      listener.enterSetNamespaceProperties(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitSetNamespaceProperties) {
      listener.exitSetNamespaceProperties(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitSetNamespaceProperties) {
      return visitor.visitSetNamespaceProperties(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class SetNamespaceLocationContext extends StatementContext {
  public ALTER(): TerminalNode {
    return this.getToken(SqlBaseParser.ALTER, 0);
  }
  public namespace(): NamespaceContext {
    return this.getRuleContext(0, NamespaceContext);
  }
  public multipartIdentifier(): MultipartIdentifierContext {
    return this.getRuleContext(0, MultipartIdentifierContext);
  }
  public SET(): TerminalNode {
    return this.getToken(SqlBaseParser.SET, 0);
  }
  public locationSpec(): LocationSpecContext {
    return this.getRuleContext(0, LocationSpecContext);
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterSetNamespaceLocation) {
      listener.enterSetNamespaceLocation(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitSetNamespaceLocation) {
      listener.exitSetNamespaceLocation(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitSetNamespaceLocation) {
      return visitor.visitSetNamespaceLocation(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class DropNamespaceContext extends StatementContext {
  public DROP(): TerminalNode {
    return this.getToken(SqlBaseParser.DROP, 0);
  }
  public namespace(): NamespaceContext {
    return this.getRuleContext(0, NamespaceContext);
  }
  public multipartIdentifier(): MultipartIdentifierContext {
    return this.getRuleContext(0, MultipartIdentifierContext);
  }
  public IF(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.IF, 0);
  }
  public EXISTS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.EXISTS, 0);
  }
  public RESTRICT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.RESTRICT, 0);
  }
  public CASCADE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.CASCADE, 0);
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterDropNamespace) {
      listener.enterDropNamespace(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitDropNamespace) {
      listener.exitDropNamespace(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitDropNamespace) {
      return visitor.visitDropNamespace(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class ShowNamespacesContext extends StatementContext {
  public _pattern!: Token;
  public SHOW(): TerminalNode {
    return this.getToken(SqlBaseParser.SHOW, 0);
  }
  public DATABASES(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DATABASES, 0);
  }
  public NAMESPACES(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.NAMESPACES, 0);
  }
  public multipartIdentifier(): MultipartIdentifierContext | undefined {
    return this.tryGetRuleContext(0, MultipartIdentifierContext);
  }
  public FROM(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.FROM, 0);
  }
  public IN(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.IN, 0);
  }
  public STRING(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.STRING, 0);
  }
  public LIKE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.LIKE, 0);
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterShowNamespaces) {
      listener.enterShowNamespaces(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitShowNamespaces) {
      listener.exitShowNamespaces(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitShowNamespaces) {
      return visitor.visitShowNamespaces(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class CreateTableContext extends StatementContext {
  public createTableHeader(): CreateTableHeaderContext {
    return this.getRuleContext(0, CreateTableHeaderContext);
  }
  public createTableClauses(): CreateTableClausesContext {
    return this.getRuleContext(0, CreateTableClausesContext);
  }
  public colTypeList(): ColTypeListContext | undefined {
    return this.tryGetRuleContext(0, ColTypeListContext);
  }
  public tableProvider(): TableProviderContext | undefined {
    return this.tryGetRuleContext(0, TableProviderContext);
  }
  public query(): QueryContext | undefined {
    return this.tryGetRuleContext(0, QueryContext);
  }
  public AS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.AS, 0);
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterCreateTable) {
      listener.enterCreateTable(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitCreateTable) {
      listener.exitCreateTable(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitCreateTable) {
      return visitor.visitCreateTable(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class CreateTableLikeContext extends StatementContext {
  public _target!: TableIdentifierContext;
  public _source!: TableIdentifierContext;
  public _tableProps!: TablePropertyListContext;
  public CREATE(): TerminalNode {
    return this.getToken(SqlBaseParser.CREATE, 0);
  }
  public TABLE(): TerminalNode {
    return this.getToken(SqlBaseParser.TABLE, 0);
  }
  public LIKE(): TerminalNode {
    return this.getToken(SqlBaseParser.LIKE, 0);
  }
  public tableIdentifier(): TableIdentifierContext[];
  public tableIdentifier(i: number): TableIdentifierContext;
  public tableIdentifier(i?: number): TableIdentifierContext | TableIdentifierContext[] {
    if (i === undefined) {
      return this.getRuleContexts(TableIdentifierContext);
    } else {
      return this.getRuleContext(i, TableIdentifierContext);
    }
  }
  public IF(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.IF, 0);
  }
  public NOT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.NOT, 0);
  }
  public EXISTS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.EXISTS, 0);
  }
  public tableProvider(): TableProviderContext[];
  public tableProvider(i: number): TableProviderContext;
  public tableProvider(i?: number): TableProviderContext | TableProviderContext[] {
    if (i === undefined) {
      return this.getRuleContexts(TableProviderContext);
    } else {
      return this.getRuleContext(i, TableProviderContext);
    }
  }
  public rowFormat(): RowFormatContext[];
  public rowFormat(i: number): RowFormatContext;
  public rowFormat(i?: number): RowFormatContext | RowFormatContext[] {
    if (i === undefined) {
      return this.getRuleContexts(RowFormatContext);
    } else {
      return this.getRuleContext(i, RowFormatContext);
    }
  }
  public createFileFormat(): CreateFileFormatContext[];
  public createFileFormat(i: number): CreateFileFormatContext;
  public createFileFormat(i?: number): CreateFileFormatContext | CreateFileFormatContext[] {
    if (i === undefined) {
      return this.getRuleContexts(CreateFileFormatContext);
    } else {
      return this.getRuleContext(i, CreateFileFormatContext);
    }
  }
  public locationSpec(): LocationSpecContext[];
  public locationSpec(i: number): LocationSpecContext;
  public locationSpec(i?: number): LocationSpecContext | LocationSpecContext[] {
    if (i === undefined) {
      return this.getRuleContexts(LocationSpecContext);
    } else {
      return this.getRuleContext(i, LocationSpecContext);
    }
  }
  public TBLPROPERTIES(): TerminalNode[];
  public TBLPROPERTIES(i: number): TerminalNode;
  public TBLPROPERTIES(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(SqlBaseParser.TBLPROPERTIES);
    } else {
      return this.getToken(SqlBaseParser.TBLPROPERTIES, i);
    }
  }
  public tablePropertyList(): TablePropertyListContext[];
  public tablePropertyList(i: number): TablePropertyListContext;
  public tablePropertyList(i?: number): TablePropertyListContext | TablePropertyListContext[] {
    if (i === undefined) {
      return this.getRuleContexts(TablePropertyListContext);
    } else {
      return this.getRuleContext(i, TablePropertyListContext);
    }
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterCreateTableLike) {
      listener.enterCreateTableLike(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitCreateTableLike) {
      listener.exitCreateTableLike(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitCreateTableLike) {
      return visitor.visitCreateTableLike(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class ReplaceTableContext extends StatementContext {
  public replaceTableHeader(): ReplaceTableHeaderContext {
    return this.getRuleContext(0, ReplaceTableHeaderContext);
  }
  public createTableClauses(): CreateTableClausesContext {
    return this.getRuleContext(0, CreateTableClausesContext);
  }
  public colTypeList(): ColTypeListContext | undefined {
    return this.tryGetRuleContext(0, ColTypeListContext);
  }
  public tableProvider(): TableProviderContext | undefined {
    return this.tryGetRuleContext(0, TableProviderContext);
  }
  public query(): QueryContext | undefined {
    return this.tryGetRuleContext(0, QueryContext);
  }
  public AS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.AS, 0);
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterReplaceTable) {
      listener.enterReplaceTable(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitReplaceTable) {
      listener.exitReplaceTable(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitReplaceTable) {
      return visitor.visitReplaceTable(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class AnalyzeContext extends StatementContext {
  public ANALYZE(): TerminalNode {
    return this.getToken(SqlBaseParser.ANALYZE, 0);
  }
  public TABLE(): TerminalNode {
    return this.getToken(SqlBaseParser.TABLE, 0);
  }
  public multipartIdentifier(): MultipartIdentifierContext {
    return this.getRuleContext(0, MultipartIdentifierContext);
  }
  public COMPUTE(): TerminalNode {
    return this.getToken(SqlBaseParser.COMPUTE, 0);
  }
  public STATISTICS(): TerminalNode {
    return this.getToken(SqlBaseParser.STATISTICS, 0);
  }
  public partitionSpec(): PartitionSpecContext | undefined {
    return this.tryGetRuleContext(0, PartitionSpecContext);
  }
  public identifier(): IdentifierContext | undefined {
    return this.tryGetRuleContext(0, IdentifierContext);
  }
  public FOR(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.FOR, 0);
  }
  public COLUMNS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.COLUMNS, 0);
  }
  public identifierSeq(): IdentifierSeqContext | undefined {
    return this.tryGetRuleContext(0, IdentifierSeqContext);
  }
  public ALL(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ALL, 0);
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterAnalyze) {
      listener.enterAnalyze(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitAnalyze) {
      listener.exitAnalyze(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitAnalyze) {
      return visitor.visitAnalyze(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class AnalyzeTablesContext extends StatementContext {
  public ANALYZE(): TerminalNode {
    return this.getToken(SqlBaseParser.ANALYZE, 0);
  }
  public TABLES(): TerminalNode {
    return this.getToken(SqlBaseParser.TABLES, 0);
  }
  public COMPUTE(): TerminalNode {
    return this.getToken(SqlBaseParser.COMPUTE, 0);
  }
  public STATISTICS(): TerminalNode {
    return this.getToken(SqlBaseParser.STATISTICS, 0);
  }
  public multipartIdentifier(): MultipartIdentifierContext | undefined {
    return this.tryGetRuleContext(0, MultipartIdentifierContext);
  }
  public identifier(): IdentifierContext | undefined {
    return this.tryGetRuleContext(0, IdentifierContext);
  }
  public FROM(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.FROM, 0);
  }
  public IN(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.IN, 0);
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterAnalyzeTables) {
      listener.enterAnalyzeTables(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitAnalyzeTables) {
      listener.exitAnalyzeTables(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitAnalyzeTables) {
      return visitor.visitAnalyzeTables(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class AddTableColumnsContext extends StatementContext {
  public _columns!: QualifiedColTypeWithPositionListContext;
  public ALTER(): TerminalNode {
    return this.getToken(SqlBaseParser.ALTER, 0);
  }
  public TABLE(): TerminalNode {
    return this.getToken(SqlBaseParser.TABLE, 0);
  }
  public multipartIdentifier(): MultipartIdentifierContext {
    return this.getRuleContext(0, MultipartIdentifierContext);
  }
  public ADD(): TerminalNode {
    return this.getToken(SqlBaseParser.ADD, 0);
  }
  public COLUMN(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.COLUMN, 0);
  }
  public COLUMNS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.COLUMNS, 0);
  }
  public qualifiedColTypeWithPositionList(): QualifiedColTypeWithPositionListContext {
    return this.getRuleContext(0, QualifiedColTypeWithPositionListContext);
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterAddTableColumns) {
      listener.enterAddTableColumns(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitAddTableColumns) {
      listener.exitAddTableColumns(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitAddTableColumns) {
      return visitor.visitAddTableColumns(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class RenameTableColumnContext extends StatementContext {
  public _table!: MultipartIdentifierContext;
  public _from!: MultipartIdentifierContext;
  public _to!: ErrorCapturingIdentifierContext;
  public ALTER(): TerminalNode {
    return this.getToken(SqlBaseParser.ALTER, 0);
  }
  public TABLE(): TerminalNode {
    return this.getToken(SqlBaseParser.TABLE, 0);
  }
  public RENAME(): TerminalNode {
    return this.getToken(SqlBaseParser.RENAME, 0);
  }
  public COLUMN(): TerminalNode {
    return this.getToken(SqlBaseParser.COLUMN, 0);
  }
  public TO(): TerminalNode {
    return this.getToken(SqlBaseParser.TO, 0);
  }
  public multipartIdentifier(): MultipartIdentifierContext[];
  public multipartIdentifier(i: number): MultipartIdentifierContext;
  public multipartIdentifier(i?: number): MultipartIdentifierContext | MultipartIdentifierContext[] {
    if (i === undefined) {
      return this.getRuleContexts(MultipartIdentifierContext);
    } else {
      return this.getRuleContext(i, MultipartIdentifierContext);
    }
  }
  public errorCapturingIdentifier(): ErrorCapturingIdentifierContext {
    return this.getRuleContext(0, ErrorCapturingIdentifierContext);
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterRenameTableColumn) {
      listener.enterRenameTableColumn(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitRenameTableColumn) {
      listener.exitRenameTableColumn(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitRenameTableColumn) {
      return visitor.visitRenameTableColumn(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class DropTableColumnsContext extends StatementContext {
  public _columns!: MultipartIdentifierListContext;
  public ALTER(): TerminalNode {
    return this.getToken(SqlBaseParser.ALTER, 0);
  }
  public TABLE(): TerminalNode {
    return this.getToken(SqlBaseParser.TABLE, 0);
  }
  public multipartIdentifier(): MultipartIdentifierContext {
    return this.getRuleContext(0, MultipartIdentifierContext);
  }
  public DROP(): TerminalNode {
    return this.getToken(SqlBaseParser.DROP, 0);
  }
  public COLUMN(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.COLUMN, 0);
  }
  public COLUMNS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.COLUMNS, 0);
  }
  public multipartIdentifierList(): MultipartIdentifierListContext {
    return this.getRuleContext(0, MultipartIdentifierListContext);
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterDropTableColumns) {
      listener.enterDropTableColumns(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitDropTableColumns) {
      listener.exitDropTableColumns(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitDropTableColumns) {
      return visitor.visitDropTableColumns(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class RenameTableContext extends StatementContext {
  public _from!: MultipartIdentifierContext;
  public _to!: MultipartIdentifierContext;
  public ALTER(): TerminalNode {
    return this.getToken(SqlBaseParser.ALTER, 0);
  }
  public RENAME(): TerminalNode {
    return this.getToken(SqlBaseParser.RENAME, 0);
  }
  public TO(): TerminalNode {
    return this.getToken(SqlBaseParser.TO, 0);
  }
  public TABLE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.TABLE, 0);
  }
  public VIEW(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.VIEW, 0);
  }
  public multipartIdentifier(): MultipartIdentifierContext[];
  public multipartIdentifier(i: number): MultipartIdentifierContext;
  public multipartIdentifier(i?: number): MultipartIdentifierContext | MultipartIdentifierContext[] {
    if (i === undefined) {
      return this.getRuleContexts(MultipartIdentifierContext);
    } else {
      return this.getRuleContext(i, MultipartIdentifierContext);
    }
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterRenameTable) {
      listener.enterRenameTable(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitRenameTable) {
      listener.exitRenameTable(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitRenameTable) {
      return visitor.visitRenameTable(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class SetTablePropertiesContext extends StatementContext {
  public ALTER(): TerminalNode {
    return this.getToken(SqlBaseParser.ALTER, 0);
  }
  public multipartIdentifier(): MultipartIdentifierContext {
    return this.getRuleContext(0, MultipartIdentifierContext);
  }
  public SET(): TerminalNode {
    return this.getToken(SqlBaseParser.SET, 0);
  }
  public TBLPROPERTIES(): TerminalNode {
    return this.getToken(SqlBaseParser.TBLPROPERTIES, 0);
  }
  public tablePropertyList(): TablePropertyListContext {
    return this.getRuleContext(0, TablePropertyListContext);
  }
  public TABLE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.TABLE, 0);
  }
  public VIEW(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.VIEW, 0);
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterSetTableProperties) {
      listener.enterSetTableProperties(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitSetTableProperties) {
      listener.exitSetTableProperties(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitSetTableProperties) {
      return visitor.visitSetTableProperties(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class UnsetTablePropertiesContext extends StatementContext {
  public ALTER(): TerminalNode {
    return this.getToken(SqlBaseParser.ALTER, 0);
  }
  public multipartIdentifier(): MultipartIdentifierContext {
    return this.getRuleContext(0, MultipartIdentifierContext);
  }
  public UNSET(): TerminalNode {
    return this.getToken(SqlBaseParser.UNSET, 0);
  }
  public TBLPROPERTIES(): TerminalNode {
    return this.getToken(SqlBaseParser.TBLPROPERTIES, 0);
  }
  public tablePropertyList(): TablePropertyListContext {
    return this.getRuleContext(0, TablePropertyListContext);
  }
  public TABLE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.TABLE, 0);
  }
  public VIEW(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.VIEW, 0);
  }
  public IF(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.IF, 0);
  }
  public EXISTS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.EXISTS, 0);
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterUnsetTableProperties) {
      listener.enterUnsetTableProperties(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitUnsetTableProperties) {
      listener.exitUnsetTableProperties(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitUnsetTableProperties) {
      return visitor.visitUnsetTableProperties(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class AlterTableAlterColumnContext extends StatementContext {
  public _table!: MultipartIdentifierContext;
  public _column!: MultipartIdentifierContext;
  public ALTER(): TerminalNode[];
  public ALTER(i: number): TerminalNode;
  public ALTER(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(SqlBaseParser.ALTER);
    } else {
      return this.getToken(SqlBaseParser.ALTER, i);
    }
  }
  public TABLE(): TerminalNode {
    return this.getToken(SqlBaseParser.TABLE, 0);
  }
  public multipartIdentifier(): MultipartIdentifierContext[];
  public multipartIdentifier(i: number): MultipartIdentifierContext;
  public multipartIdentifier(i?: number): MultipartIdentifierContext | MultipartIdentifierContext[] {
    if (i === undefined) {
      return this.getRuleContexts(MultipartIdentifierContext);
    } else {
      return this.getRuleContext(i, MultipartIdentifierContext);
    }
  }
  public CHANGE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.CHANGE, 0);
  }
  public COLUMN(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.COLUMN, 0);
  }
  public alterColumnAction(): AlterColumnActionContext | undefined {
    return this.tryGetRuleContext(0, AlterColumnActionContext);
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterAlterTableAlterColumn) {
      listener.enterAlterTableAlterColumn(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitAlterTableAlterColumn) {
      listener.exitAlterTableAlterColumn(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitAlterTableAlterColumn) {
      return visitor.visitAlterTableAlterColumn(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class HiveChangeColumnContext extends StatementContext {
  public _table!: MultipartIdentifierContext;
  public _colName!: MultipartIdentifierContext;
  public ALTER(): TerminalNode {
    return this.getToken(SqlBaseParser.ALTER, 0);
  }
  public TABLE(): TerminalNode {
    return this.getToken(SqlBaseParser.TABLE, 0);
  }
  public CHANGE(): TerminalNode {
    return this.getToken(SqlBaseParser.CHANGE, 0);
  }
  public colType(): ColTypeContext {
    return this.getRuleContext(0, ColTypeContext);
  }
  public multipartIdentifier(): MultipartIdentifierContext[];
  public multipartIdentifier(i: number): MultipartIdentifierContext;
  public multipartIdentifier(i?: number): MultipartIdentifierContext | MultipartIdentifierContext[] {
    if (i === undefined) {
      return this.getRuleContexts(MultipartIdentifierContext);
    } else {
      return this.getRuleContext(i, MultipartIdentifierContext);
    }
  }
  public partitionSpec(): PartitionSpecContext | undefined {
    return this.tryGetRuleContext(0, PartitionSpecContext);
  }
  public COLUMN(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.COLUMN, 0);
  }
  public colPosition(): ColPositionContext | undefined {
    return this.tryGetRuleContext(0, ColPositionContext);
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterHiveChangeColumn) {
      listener.enterHiveChangeColumn(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitHiveChangeColumn) {
      listener.exitHiveChangeColumn(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitHiveChangeColumn) {
      return visitor.visitHiveChangeColumn(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class HiveReplaceColumnsContext extends StatementContext {
  public _table!: MultipartIdentifierContext;
  public _columns!: QualifiedColTypeWithPositionListContext;
  public ALTER(): TerminalNode {
    return this.getToken(SqlBaseParser.ALTER, 0);
  }
  public TABLE(): TerminalNode {
    return this.getToken(SqlBaseParser.TABLE, 0);
  }
  public REPLACE(): TerminalNode {
    return this.getToken(SqlBaseParser.REPLACE, 0);
  }
  public COLUMNS(): TerminalNode {
    return this.getToken(SqlBaseParser.COLUMNS, 0);
  }
  public multipartIdentifier(): MultipartIdentifierContext {
    return this.getRuleContext(0, MultipartIdentifierContext);
  }
  public qualifiedColTypeWithPositionList(): QualifiedColTypeWithPositionListContext {
    return this.getRuleContext(0, QualifiedColTypeWithPositionListContext);
  }
  public partitionSpec(): PartitionSpecContext | undefined {
    return this.tryGetRuleContext(0, PartitionSpecContext);
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterHiveReplaceColumns) {
      listener.enterHiveReplaceColumns(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitHiveReplaceColumns) {
      listener.exitHiveReplaceColumns(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitHiveReplaceColumns) {
      return visitor.visitHiveReplaceColumns(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class SetTableSerDeContext extends StatementContext {
  public ALTER(): TerminalNode {
    return this.getToken(SqlBaseParser.ALTER, 0);
  }
  public TABLE(): TerminalNode {
    return this.getToken(SqlBaseParser.TABLE, 0);
  }
  public multipartIdentifier(): MultipartIdentifierContext {
    return this.getRuleContext(0, MultipartIdentifierContext);
  }
  public SET(): TerminalNode {
    return this.getToken(SqlBaseParser.SET, 0);
  }
  public SERDE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.SERDE, 0);
  }
  public STRING(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.STRING, 0);
  }
  public partitionSpec(): PartitionSpecContext | undefined {
    return this.tryGetRuleContext(0, PartitionSpecContext);
  }
  public WITH(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.WITH, 0);
  }
  public SERDEPROPERTIES(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.SERDEPROPERTIES, 0);
  }
  public tablePropertyList(): TablePropertyListContext | undefined {
    return this.tryGetRuleContext(0, TablePropertyListContext);
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterSetTableSerDe) {
      listener.enterSetTableSerDe(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitSetTableSerDe) {
      listener.exitSetTableSerDe(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitSetTableSerDe) {
      return visitor.visitSetTableSerDe(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class AddTablePartitionContext extends StatementContext {
  public ALTER(): TerminalNode {
    return this.getToken(SqlBaseParser.ALTER, 0);
  }
  public multipartIdentifier(): MultipartIdentifierContext {
    return this.getRuleContext(0, MultipartIdentifierContext);
  }
  public ADD(): TerminalNode {
    return this.getToken(SqlBaseParser.ADD, 0);
  }
  public TABLE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.TABLE, 0);
  }
  public VIEW(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.VIEW, 0);
  }
  public IF(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.IF, 0);
  }
  public NOT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.NOT, 0);
  }
  public EXISTS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.EXISTS, 0);
  }
  public partitionSpecLocation(): PartitionSpecLocationContext[];
  public partitionSpecLocation(i: number): PartitionSpecLocationContext;
  public partitionSpecLocation(i?: number): PartitionSpecLocationContext | PartitionSpecLocationContext[] {
    if (i === undefined) {
      return this.getRuleContexts(PartitionSpecLocationContext);
    } else {
      return this.getRuleContext(i, PartitionSpecLocationContext);
    }
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterAddTablePartition) {
      listener.enterAddTablePartition(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitAddTablePartition) {
      listener.exitAddTablePartition(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitAddTablePartition) {
      return visitor.visitAddTablePartition(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class RenameTablePartitionContext extends StatementContext {
  public _from!: PartitionSpecContext;
  public _to!: PartitionSpecContext;
  public ALTER(): TerminalNode {
    return this.getToken(SqlBaseParser.ALTER, 0);
  }
  public TABLE(): TerminalNode {
    return this.getToken(SqlBaseParser.TABLE, 0);
  }
  public multipartIdentifier(): MultipartIdentifierContext {
    return this.getRuleContext(0, MultipartIdentifierContext);
  }
  public RENAME(): TerminalNode {
    return this.getToken(SqlBaseParser.RENAME, 0);
  }
  public TO(): TerminalNode {
    return this.getToken(SqlBaseParser.TO, 0);
  }
  public partitionSpec(): PartitionSpecContext[];
  public partitionSpec(i: number): PartitionSpecContext;
  public partitionSpec(i?: number): PartitionSpecContext | PartitionSpecContext[] {
    if (i === undefined) {
      return this.getRuleContexts(PartitionSpecContext);
    } else {
      return this.getRuleContext(i, PartitionSpecContext);
    }
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterRenameTablePartition) {
      listener.enterRenameTablePartition(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitRenameTablePartition) {
      listener.exitRenameTablePartition(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitRenameTablePartition) {
      return visitor.visitRenameTablePartition(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class DropTablePartitionsContext extends StatementContext {
  public ALTER(): TerminalNode {
    return this.getToken(SqlBaseParser.ALTER, 0);
  }
  public multipartIdentifier(): MultipartIdentifierContext {
    return this.getRuleContext(0, MultipartIdentifierContext);
  }
  public DROP(): TerminalNode {
    return this.getToken(SqlBaseParser.DROP, 0);
  }
  public partitionSpec(): PartitionSpecContext[];
  public partitionSpec(i: number): PartitionSpecContext;
  public partitionSpec(i?: number): PartitionSpecContext | PartitionSpecContext[] {
    if (i === undefined) {
      return this.getRuleContexts(PartitionSpecContext);
    } else {
      return this.getRuleContext(i, PartitionSpecContext);
    }
  }
  public TABLE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.TABLE, 0);
  }
  public VIEW(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.VIEW, 0);
  }
  public IF(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.IF, 0);
  }
  public EXISTS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.EXISTS, 0);
  }
  public PURGE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.PURGE, 0);
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterDropTablePartitions) {
      listener.enterDropTablePartitions(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitDropTablePartitions) {
      listener.exitDropTablePartitions(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitDropTablePartitions) {
      return visitor.visitDropTablePartitions(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class SetTableLocationContext extends StatementContext {
  public ALTER(): TerminalNode {
    return this.getToken(SqlBaseParser.ALTER, 0);
  }
  public TABLE(): TerminalNode {
    return this.getToken(SqlBaseParser.TABLE, 0);
  }
  public multipartIdentifier(): MultipartIdentifierContext {
    return this.getRuleContext(0, MultipartIdentifierContext);
  }
  public SET(): TerminalNode {
    return this.getToken(SqlBaseParser.SET, 0);
  }
  public locationSpec(): LocationSpecContext {
    return this.getRuleContext(0, LocationSpecContext);
  }
  public partitionSpec(): PartitionSpecContext | undefined {
    return this.tryGetRuleContext(0, PartitionSpecContext);
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterSetTableLocation) {
      listener.enterSetTableLocation(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitSetTableLocation) {
      listener.exitSetTableLocation(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitSetTableLocation) {
      return visitor.visitSetTableLocation(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class RecoverPartitionsContext extends StatementContext {
  public ALTER(): TerminalNode {
    return this.getToken(SqlBaseParser.ALTER, 0);
  }
  public TABLE(): TerminalNode {
    return this.getToken(SqlBaseParser.TABLE, 0);
  }
  public multipartIdentifier(): MultipartIdentifierContext {
    return this.getRuleContext(0, MultipartIdentifierContext);
  }
  public RECOVER(): TerminalNode {
    return this.getToken(SqlBaseParser.RECOVER, 0);
  }
  public PARTITIONS(): TerminalNode {
    return this.getToken(SqlBaseParser.PARTITIONS, 0);
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterRecoverPartitions) {
      listener.enterRecoverPartitions(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitRecoverPartitions) {
      listener.exitRecoverPartitions(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitRecoverPartitions) {
      return visitor.visitRecoverPartitions(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class DropTableContext extends StatementContext {
  public DROP(): TerminalNode {
    return this.getToken(SqlBaseParser.DROP, 0);
  }
  public TABLE(): TerminalNode {
    return this.getToken(SqlBaseParser.TABLE, 0);
  }
  public multipartIdentifier(): MultipartIdentifierContext {
    return this.getRuleContext(0, MultipartIdentifierContext);
  }
  public IF(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.IF, 0);
  }
  public EXISTS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.EXISTS, 0);
  }
  public PURGE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.PURGE, 0);
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterDropTable) {
      listener.enterDropTable(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitDropTable) {
      listener.exitDropTable(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitDropTable) {
      return visitor.visitDropTable(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class DropViewContext extends StatementContext {
  public DROP(): TerminalNode {
    return this.getToken(SqlBaseParser.DROP, 0);
  }
  public VIEW(): TerminalNode {
    return this.getToken(SqlBaseParser.VIEW, 0);
  }
  public multipartIdentifier(): MultipartIdentifierContext {
    return this.getRuleContext(0, MultipartIdentifierContext);
  }
  public IF(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.IF, 0);
  }
  public EXISTS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.EXISTS, 0);
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterDropView) {
      listener.enterDropView(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitDropView) {
      listener.exitDropView(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitDropView) {
      return visitor.visitDropView(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class CreateViewContext extends StatementContext {
  public CREATE(): TerminalNode {
    return this.getToken(SqlBaseParser.CREATE, 0);
  }
  public VIEW(): TerminalNode {
    return this.getToken(SqlBaseParser.VIEW, 0);
  }
  public multipartIdentifier(): MultipartIdentifierContext {
    return this.getRuleContext(0, MultipartIdentifierContext);
  }
  public AS(): TerminalNode {
    return this.getToken(SqlBaseParser.AS, 0);
  }
  public query(): QueryContext {
    return this.getRuleContext(0, QueryContext);
  }
  public OR(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.OR, 0);
  }
  public REPLACE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.REPLACE, 0);
  }
  public TEMPORARY(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.TEMPORARY, 0);
  }
  public IF(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.IF, 0);
  }
  public NOT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.NOT, 0);
  }
  public EXISTS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.EXISTS, 0);
  }
  public identifierCommentList(): IdentifierCommentListContext | undefined {
    return this.tryGetRuleContext(0, IdentifierCommentListContext);
  }
  public commentSpec(): CommentSpecContext[];
  public commentSpec(i: number): CommentSpecContext;
  public commentSpec(i?: number): CommentSpecContext | CommentSpecContext[] {
    if (i === undefined) {
      return this.getRuleContexts(CommentSpecContext);
    } else {
      return this.getRuleContext(i, CommentSpecContext);
    }
  }
  public PARTITIONED(): TerminalNode[];
  public PARTITIONED(i: number): TerminalNode;
  public PARTITIONED(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(SqlBaseParser.PARTITIONED);
    } else {
      return this.getToken(SqlBaseParser.PARTITIONED, i);
    }
  }
  public ON(): TerminalNode[];
  public ON(i: number): TerminalNode;
  public ON(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(SqlBaseParser.ON);
    } else {
      return this.getToken(SqlBaseParser.ON, i);
    }
  }
  public identifierList(): IdentifierListContext[];
  public identifierList(i: number): IdentifierListContext;
  public identifierList(i?: number): IdentifierListContext | IdentifierListContext[] {
    if (i === undefined) {
      return this.getRuleContexts(IdentifierListContext);
    } else {
      return this.getRuleContext(i, IdentifierListContext);
    }
  }
  public TBLPROPERTIES(): TerminalNode[];
  public TBLPROPERTIES(i: number): TerminalNode;
  public TBLPROPERTIES(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(SqlBaseParser.TBLPROPERTIES);
    } else {
      return this.getToken(SqlBaseParser.TBLPROPERTIES, i);
    }
  }
  public tablePropertyList(): TablePropertyListContext[];
  public tablePropertyList(i: number): TablePropertyListContext;
  public tablePropertyList(i?: number): TablePropertyListContext | TablePropertyListContext[] {
    if (i === undefined) {
      return this.getRuleContexts(TablePropertyListContext);
    } else {
      return this.getRuleContext(i, TablePropertyListContext);
    }
  }
  public GLOBAL(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.GLOBAL, 0);
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterCreateView) {
      listener.enterCreateView(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitCreateView) {
      listener.exitCreateView(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitCreateView) {
      return visitor.visitCreateView(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class CreateTempViewUsingContext extends StatementContext {
  public CREATE(): TerminalNode {
    return this.getToken(SqlBaseParser.CREATE, 0);
  }
  public TEMPORARY(): TerminalNode {
    return this.getToken(SqlBaseParser.TEMPORARY, 0);
  }
  public VIEW(): TerminalNode {
    return this.getToken(SqlBaseParser.VIEW, 0);
  }
  public tableIdentifier(): TableIdentifierContext {
    return this.getRuleContext(0, TableIdentifierContext);
  }
  public tableProvider(): TableProviderContext {
    return this.getRuleContext(0, TableProviderContext);
  }
  public OR(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.OR, 0);
  }
  public REPLACE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.REPLACE, 0);
  }
  public GLOBAL(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.GLOBAL, 0);
  }
  public colTypeList(): ColTypeListContext | undefined {
    return this.tryGetRuleContext(0, ColTypeListContext);
  }
  public OPTIONS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.OPTIONS, 0);
  }
  public tablePropertyList(): TablePropertyListContext | undefined {
    return this.tryGetRuleContext(0, TablePropertyListContext);
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterCreateTempViewUsing) {
      listener.enterCreateTempViewUsing(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitCreateTempViewUsing) {
      listener.exitCreateTempViewUsing(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitCreateTempViewUsing) {
      return visitor.visitCreateTempViewUsing(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class AlterViewQueryContext extends StatementContext {
  public ALTER(): TerminalNode {
    return this.getToken(SqlBaseParser.ALTER, 0);
  }
  public VIEW(): TerminalNode {
    return this.getToken(SqlBaseParser.VIEW, 0);
  }
  public multipartIdentifier(): MultipartIdentifierContext {
    return this.getRuleContext(0, MultipartIdentifierContext);
  }
  public query(): QueryContext {
    return this.getRuleContext(0, QueryContext);
  }
  public AS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.AS, 0);
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterAlterViewQuery) {
      listener.enterAlterViewQuery(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitAlterViewQuery) {
      listener.exitAlterViewQuery(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitAlterViewQuery) {
      return visitor.visitAlterViewQuery(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class CreateFunctionContext extends StatementContext {
  public _className!: Token;
  public CREATE(): TerminalNode {
    return this.getToken(SqlBaseParser.CREATE, 0);
  }
  public FUNCTION(): TerminalNode {
    return this.getToken(SqlBaseParser.FUNCTION, 0);
  }
  public multipartIdentifier(): MultipartIdentifierContext {
    return this.getRuleContext(0, MultipartIdentifierContext);
  }
  public AS(): TerminalNode {
    return this.getToken(SqlBaseParser.AS, 0);
  }
  public STRING(): TerminalNode {
    return this.getToken(SqlBaseParser.STRING, 0);
  }
  public OR(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.OR, 0);
  }
  public REPLACE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.REPLACE, 0);
  }
  public TEMPORARY(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.TEMPORARY, 0);
  }
  public IF(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.IF, 0);
  }
  public NOT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.NOT, 0);
  }
  public EXISTS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.EXISTS, 0);
  }
  public USING(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.USING, 0);
  }
  public resource(): ResourceContext[];
  public resource(i: number): ResourceContext;
  public resource(i?: number): ResourceContext | ResourceContext[] {
    if (i === undefined) {
      return this.getRuleContexts(ResourceContext);
    } else {
      return this.getRuleContext(i, ResourceContext);
    }
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterCreateFunction) {
      listener.enterCreateFunction(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitCreateFunction) {
      listener.exitCreateFunction(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitCreateFunction) {
      return visitor.visitCreateFunction(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class DropFunctionContext extends StatementContext {
  public DROP(): TerminalNode {
    return this.getToken(SqlBaseParser.DROP, 0);
  }
  public FUNCTION(): TerminalNode {
    return this.getToken(SqlBaseParser.FUNCTION, 0);
  }
  public multipartIdentifier(): MultipartIdentifierContext {
    return this.getRuleContext(0, MultipartIdentifierContext);
  }
  public TEMPORARY(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.TEMPORARY, 0);
  }
  public IF(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.IF, 0);
  }
  public EXISTS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.EXISTS, 0);
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterDropFunction) {
      listener.enterDropFunction(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitDropFunction) {
      listener.exitDropFunction(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitDropFunction) {
      return visitor.visitDropFunction(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class ExplainContext extends StatementContext {
  public EXPLAIN(): TerminalNode {
    return this.getToken(SqlBaseParser.EXPLAIN, 0);
  }
  public statement(): StatementContext {
    return this.getRuleContext(0, StatementContext);
  }
  public LOGICAL(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.LOGICAL, 0);
  }
  public FORMATTED(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.FORMATTED, 0);
  }
  public EXTENDED(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.EXTENDED, 0);
  }
  public CODEGEN(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.CODEGEN, 0);
  }
  public COST(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.COST, 0);
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterExplain) {
      listener.enterExplain(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitExplain) {
      listener.exitExplain(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitExplain) {
      return visitor.visitExplain(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class ShowTablesContext extends StatementContext {
  public _pattern!: Token;
  public SHOW(): TerminalNode {
    return this.getToken(SqlBaseParser.SHOW, 0);
  }
  public TABLES(): TerminalNode {
    return this.getToken(SqlBaseParser.TABLES, 0);
  }
  public multipartIdentifier(): MultipartIdentifierContext | undefined {
    return this.tryGetRuleContext(0, MultipartIdentifierContext);
  }
  public FROM(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.FROM, 0);
  }
  public IN(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.IN, 0);
  }
  public STRING(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.STRING, 0);
  }
  public LIKE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.LIKE, 0);
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterShowTables) {
      listener.enterShowTables(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitShowTables) {
      listener.exitShowTables(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitShowTables) {
      return visitor.visitShowTables(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class ShowTableExtendedContext extends StatementContext {
  public _ns!: MultipartIdentifierContext;
  public _pattern!: Token;
  public SHOW(): TerminalNode {
    return this.getToken(SqlBaseParser.SHOW, 0);
  }
  public TABLE(): TerminalNode {
    return this.getToken(SqlBaseParser.TABLE, 0);
  }
  public EXTENDED(): TerminalNode {
    return this.getToken(SqlBaseParser.EXTENDED, 0);
  }
  public LIKE(): TerminalNode {
    return this.getToken(SqlBaseParser.LIKE, 0);
  }
  public STRING(): TerminalNode {
    return this.getToken(SqlBaseParser.STRING, 0);
  }
  public partitionSpec(): PartitionSpecContext | undefined {
    return this.tryGetRuleContext(0, PartitionSpecContext);
  }
  public FROM(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.FROM, 0);
  }
  public IN(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.IN, 0);
  }
  public multipartIdentifier(): MultipartIdentifierContext | undefined {
    return this.tryGetRuleContext(0, MultipartIdentifierContext);
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterShowTableExtended) {
      listener.enterShowTableExtended(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitShowTableExtended) {
      listener.exitShowTableExtended(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitShowTableExtended) {
      return visitor.visitShowTableExtended(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class ShowTblPropertiesContext extends StatementContext {
  public _table!: MultipartIdentifierContext;
  public _key!: TablePropertyKeyContext;
  public SHOW(): TerminalNode {
    return this.getToken(SqlBaseParser.SHOW, 0);
  }
  public TBLPROPERTIES(): TerminalNode {
    return this.getToken(SqlBaseParser.TBLPROPERTIES, 0);
  }
  public multipartIdentifier(): MultipartIdentifierContext {
    return this.getRuleContext(0, MultipartIdentifierContext);
  }
  public tablePropertyKey(): TablePropertyKeyContext | undefined {
    return this.tryGetRuleContext(0, TablePropertyKeyContext);
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterShowTblProperties) {
      listener.enterShowTblProperties(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitShowTblProperties) {
      listener.exitShowTblProperties(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitShowTblProperties) {
      return visitor.visitShowTblProperties(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class ShowColumnsContext extends StatementContext {
  public _table!: MultipartIdentifierContext;
  public _ns!: MultipartIdentifierContext;
  public SHOW(): TerminalNode {
    return this.getToken(SqlBaseParser.SHOW, 0);
  }
  public COLUMNS(): TerminalNode {
    return this.getToken(SqlBaseParser.COLUMNS, 0);
  }
  public FROM(): TerminalNode[];
  public FROM(i: number): TerminalNode;
  public FROM(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(SqlBaseParser.FROM);
    } else {
      return this.getToken(SqlBaseParser.FROM, i);
    }
  }
  public IN(): TerminalNode[];
  public IN(i: number): TerminalNode;
  public IN(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(SqlBaseParser.IN);
    } else {
      return this.getToken(SqlBaseParser.IN, i);
    }
  }
  public multipartIdentifier(): MultipartIdentifierContext[];
  public multipartIdentifier(i: number): MultipartIdentifierContext;
  public multipartIdentifier(i?: number): MultipartIdentifierContext | MultipartIdentifierContext[] {
    if (i === undefined) {
      return this.getRuleContexts(MultipartIdentifierContext);
    } else {
      return this.getRuleContext(i, MultipartIdentifierContext);
    }
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterShowColumns) {
      listener.enterShowColumns(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitShowColumns) {
      listener.exitShowColumns(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitShowColumns) {
      return visitor.visitShowColumns(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class ShowViewsContext extends StatementContext {
  public _pattern!: Token;
  public SHOW(): TerminalNode {
    return this.getToken(SqlBaseParser.SHOW, 0);
  }
  public VIEWS(): TerminalNode {
    return this.getToken(SqlBaseParser.VIEWS, 0);
  }
  public multipartIdentifier(): MultipartIdentifierContext | undefined {
    return this.tryGetRuleContext(0, MultipartIdentifierContext);
  }
  public FROM(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.FROM, 0);
  }
  public IN(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.IN, 0);
  }
  public STRING(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.STRING, 0);
  }
  public LIKE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.LIKE, 0);
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterShowViews) {
      listener.enterShowViews(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitShowViews) {
      listener.exitShowViews(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitShowViews) {
      return visitor.visitShowViews(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class ShowPartitionsContext extends StatementContext {
  public SHOW(): TerminalNode {
    return this.getToken(SqlBaseParser.SHOW, 0);
  }
  public PARTITIONS(): TerminalNode {
    return this.getToken(SqlBaseParser.PARTITIONS, 0);
  }
  public multipartIdentifier(): MultipartIdentifierContext {
    return this.getRuleContext(0, MultipartIdentifierContext);
  }
  public partitionSpec(): PartitionSpecContext | undefined {
    return this.tryGetRuleContext(0, PartitionSpecContext);
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterShowPartitions) {
      listener.enterShowPartitions(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitShowPartitions) {
      listener.exitShowPartitions(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitShowPartitions) {
      return visitor.visitShowPartitions(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class ShowFunctionsContext extends StatementContext {
  public _pattern!: Token;
  public SHOW(): TerminalNode {
    return this.getToken(SqlBaseParser.SHOW, 0);
  }
  public FUNCTIONS(): TerminalNode {
    return this.getToken(SqlBaseParser.FUNCTIONS, 0);
  }
  public identifier(): IdentifierContext | undefined {
    return this.tryGetRuleContext(0, IdentifierContext);
  }
  public multipartIdentifier(): MultipartIdentifierContext | undefined {
    return this.tryGetRuleContext(0, MultipartIdentifierContext);
  }
  public LIKE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.LIKE, 0);
  }
  public STRING(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.STRING, 0);
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterShowFunctions) {
      listener.enterShowFunctions(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitShowFunctions) {
      listener.exitShowFunctions(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitShowFunctions) {
      return visitor.visitShowFunctions(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class ShowCreateTableContext extends StatementContext {
  public SHOW(): TerminalNode {
    return this.getToken(SqlBaseParser.SHOW, 0);
  }
  public CREATE(): TerminalNode {
    return this.getToken(SqlBaseParser.CREATE, 0);
  }
  public TABLE(): TerminalNode {
    return this.getToken(SqlBaseParser.TABLE, 0);
  }
  public multipartIdentifier(): MultipartIdentifierContext {
    return this.getRuleContext(0, MultipartIdentifierContext);
  }
  public AS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.AS, 0);
  }
  public SERDE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.SERDE, 0);
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterShowCreateTable) {
      listener.enterShowCreateTable(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitShowCreateTable) {
      listener.exitShowCreateTable(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitShowCreateTable) {
      return visitor.visitShowCreateTable(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class ShowCurrentNamespaceContext extends StatementContext {
  public SHOW(): TerminalNode {
    return this.getToken(SqlBaseParser.SHOW, 0);
  }
  public CURRENT(): TerminalNode {
    return this.getToken(SqlBaseParser.CURRENT, 0);
  }
  public NAMESPACE(): TerminalNode {
    return this.getToken(SqlBaseParser.NAMESPACE, 0);
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterShowCurrentNamespace) {
      listener.enterShowCurrentNamespace(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitShowCurrentNamespace) {
      listener.exitShowCurrentNamespace(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitShowCurrentNamespace) {
      return visitor.visitShowCurrentNamespace(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class DescribeFunctionContext extends StatementContext {
  public FUNCTION(): TerminalNode {
    return this.getToken(SqlBaseParser.FUNCTION, 0);
  }
  public describeFuncName(): DescribeFuncNameContext {
    return this.getRuleContext(0, DescribeFuncNameContext);
  }
  public DESC(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DESC, 0);
  }
  public DESCRIBE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DESCRIBE, 0);
  }
  public EXTENDED(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.EXTENDED, 0);
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterDescribeFunction) {
      listener.enterDescribeFunction(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitDescribeFunction) {
      listener.exitDescribeFunction(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitDescribeFunction) {
      return visitor.visitDescribeFunction(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class DescribeNamespaceContext extends StatementContext {
  public namespace(): NamespaceContext {
    return this.getRuleContext(0, NamespaceContext);
  }
  public multipartIdentifier(): MultipartIdentifierContext {
    return this.getRuleContext(0, MultipartIdentifierContext);
  }
  public DESC(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DESC, 0);
  }
  public DESCRIBE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DESCRIBE, 0);
  }
  public EXTENDED(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.EXTENDED, 0);
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterDescribeNamespace) {
      listener.enterDescribeNamespace(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitDescribeNamespace) {
      listener.exitDescribeNamespace(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitDescribeNamespace) {
      return visitor.visitDescribeNamespace(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class DescribeRelationContext extends StatementContext {
  public _option!: Token;
  public multipartIdentifier(): MultipartIdentifierContext {
    return this.getRuleContext(0, MultipartIdentifierContext);
  }
  public DESC(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DESC, 0);
  }
  public DESCRIBE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DESCRIBE, 0);
  }
  public TABLE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.TABLE, 0);
  }
  public partitionSpec(): PartitionSpecContext | undefined {
    return this.tryGetRuleContext(0, PartitionSpecContext);
  }
  public describeColName(): DescribeColNameContext | undefined {
    return this.tryGetRuleContext(0, DescribeColNameContext);
  }
  public EXTENDED(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.EXTENDED, 0);
  }
  public FORMATTED(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.FORMATTED, 0);
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterDescribeRelation) {
      listener.enterDescribeRelation(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitDescribeRelation) {
      listener.exitDescribeRelation(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitDescribeRelation) {
      return visitor.visitDescribeRelation(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class DescribeQueryContext extends StatementContext {
  public query(): QueryContext {
    return this.getRuleContext(0, QueryContext);
  }
  public DESC(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DESC, 0);
  }
  public DESCRIBE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DESCRIBE, 0);
  }
  public QUERY(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.QUERY, 0);
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterDescribeQuery) {
      listener.enterDescribeQuery(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitDescribeQuery) {
      listener.exitDescribeQuery(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitDescribeQuery) {
      return visitor.visitDescribeQuery(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class CommentNamespaceContext extends StatementContext {
  public _comment!: Token;
  public COMMENT(): TerminalNode {
    return this.getToken(SqlBaseParser.COMMENT, 0);
  }
  public ON(): TerminalNode {
    return this.getToken(SqlBaseParser.ON, 0);
  }
  public namespace(): NamespaceContext {
    return this.getRuleContext(0, NamespaceContext);
  }
  public multipartIdentifier(): MultipartIdentifierContext {
    return this.getRuleContext(0, MultipartIdentifierContext);
  }
  public IS(): TerminalNode {
    return this.getToken(SqlBaseParser.IS, 0);
  }
  public STRING(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.STRING, 0);
  }
  public NULL(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.NULL, 0);
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterCommentNamespace) {
      listener.enterCommentNamespace(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitCommentNamespace) {
      listener.exitCommentNamespace(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitCommentNamespace) {
      return visitor.visitCommentNamespace(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class CommentTableContext extends StatementContext {
  public _comment!: Token;
  public COMMENT(): TerminalNode {
    return this.getToken(SqlBaseParser.COMMENT, 0);
  }
  public ON(): TerminalNode {
    return this.getToken(SqlBaseParser.ON, 0);
  }
  public TABLE(): TerminalNode {
    return this.getToken(SqlBaseParser.TABLE, 0);
  }
  public multipartIdentifier(): MultipartIdentifierContext {
    return this.getRuleContext(0, MultipartIdentifierContext);
  }
  public IS(): TerminalNode {
    return this.getToken(SqlBaseParser.IS, 0);
  }
  public STRING(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.STRING, 0);
  }
  public NULL(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.NULL, 0);
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterCommentTable) {
      listener.enterCommentTable(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitCommentTable) {
      listener.exitCommentTable(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitCommentTable) {
      return visitor.visitCommentTable(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class RefreshTableContext extends StatementContext {
  public REFRESH(): TerminalNode {
    return this.getToken(SqlBaseParser.REFRESH, 0);
  }
  public TABLE(): TerminalNode {
    return this.getToken(SqlBaseParser.TABLE, 0);
  }
  public multipartIdentifier(): MultipartIdentifierContext {
    return this.getRuleContext(0, MultipartIdentifierContext);
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterRefreshTable) {
      listener.enterRefreshTable(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitRefreshTable) {
      listener.exitRefreshTable(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitRefreshTable) {
      return visitor.visitRefreshTable(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class RefreshFunctionContext extends StatementContext {
  public REFRESH(): TerminalNode {
    return this.getToken(SqlBaseParser.REFRESH, 0);
  }
  public FUNCTION(): TerminalNode {
    return this.getToken(SqlBaseParser.FUNCTION, 0);
  }
  public multipartIdentifier(): MultipartIdentifierContext {
    return this.getRuleContext(0, MultipartIdentifierContext);
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterRefreshFunction) {
      listener.enterRefreshFunction(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitRefreshFunction) {
      listener.exitRefreshFunction(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitRefreshFunction) {
      return visitor.visitRefreshFunction(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class RefreshResourceContext extends StatementContext {
  public REFRESH(): TerminalNode {
    return this.getToken(SqlBaseParser.REFRESH, 0);
  }
  public STRING(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.STRING, 0);
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterRefreshResource) {
      listener.enterRefreshResource(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitRefreshResource) {
      listener.exitRefreshResource(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitRefreshResource) {
      return visitor.visitRefreshResource(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class CacheTableContext extends StatementContext {
  public _options!: TablePropertyListContext;
  public CACHE(): TerminalNode {
    return this.getToken(SqlBaseParser.CACHE, 0);
  }
  public TABLE(): TerminalNode {
    return this.getToken(SqlBaseParser.TABLE, 0);
  }
  public multipartIdentifier(): MultipartIdentifierContext {
    return this.getRuleContext(0, MultipartIdentifierContext);
  }
  public LAZY(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.LAZY, 0);
  }
  public OPTIONS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.OPTIONS, 0);
  }
  public query(): QueryContext | undefined {
    return this.tryGetRuleContext(0, QueryContext);
  }
  public tablePropertyList(): TablePropertyListContext | undefined {
    return this.tryGetRuleContext(0, TablePropertyListContext);
  }
  public AS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.AS, 0);
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterCacheTable) {
      listener.enterCacheTable(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitCacheTable) {
      listener.exitCacheTable(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitCacheTable) {
      return visitor.visitCacheTable(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class UncacheTableContext extends StatementContext {
  public UNCACHE(): TerminalNode {
    return this.getToken(SqlBaseParser.UNCACHE, 0);
  }
  public TABLE(): TerminalNode {
    return this.getToken(SqlBaseParser.TABLE, 0);
  }
  public multipartIdentifier(): MultipartIdentifierContext {
    return this.getRuleContext(0, MultipartIdentifierContext);
  }
  public IF(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.IF, 0);
  }
  public EXISTS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.EXISTS, 0);
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterUncacheTable) {
      listener.enterUncacheTable(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitUncacheTable) {
      listener.exitUncacheTable(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitUncacheTable) {
      return visitor.visitUncacheTable(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class ClearCacheContext extends StatementContext {
  public CLEAR(): TerminalNode {
    return this.getToken(SqlBaseParser.CLEAR, 0);
  }
  public CACHE(): TerminalNode {
    return this.getToken(SqlBaseParser.CACHE, 0);
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterClearCache) {
      listener.enterClearCache(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitClearCache) {
      listener.exitClearCache(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitClearCache) {
      return visitor.visitClearCache(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class LoadDataContext extends StatementContext {
  public _path!: Token;
  public LOAD(): TerminalNode {
    return this.getToken(SqlBaseParser.LOAD, 0);
  }
  public DATA(): TerminalNode {
    return this.getToken(SqlBaseParser.DATA, 0);
  }
  public INPATH(): TerminalNode {
    return this.getToken(SqlBaseParser.INPATH, 0);
  }
  public INTO(): TerminalNode {
    return this.getToken(SqlBaseParser.INTO, 0);
  }
  public TABLE(): TerminalNode {
    return this.getToken(SqlBaseParser.TABLE, 0);
  }
  public multipartIdentifier(): MultipartIdentifierContext {
    return this.getRuleContext(0, MultipartIdentifierContext);
  }
  public STRING(): TerminalNode {
    return this.getToken(SqlBaseParser.STRING, 0);
  }
  public LOCAL(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.LOCAL, 0);
  }
  public OVERWRITE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.OVERWRITE, 0);
  }
  public partitionSpec(): PartitionSpecContext | undefined {
    return this.tryGetRuleContext(0, PartitionSpecContext);
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterLoadData) {
      listener.enterLoadData(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitLoadData) {
      listener.exitLoadData(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitLoadData) {
      return visitor.visitLoadData(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class TruncateTableContext extends StatementContext {
  public TRUNCATE(): TerminalNode {
    return this.getToken(SqlBaseParser.TRUNCATE, 0);
  }
  public TABLE(): TerminalNode {
    return this.getToken(SqlBaseParser.TABLE, 0);
  }
  public multipartIdentifier(): MultipartIdentifierContext {
    return this.getRuleContext(0, MultipartIdentifierContext);
  }
  public partitionSpec(): PartitionSpecContext | undefined {
    return this.tryGetRuleContext(0, PartitionSpecContext);
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterTruncateTable) {
      listener.enterTruncateTable(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitTruncateTable) {
      listener.exitTruncateTable(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitTruncateTable) {
      return visitor.visitTruncateTable(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class RepairTableContext extends StatementContext {
  public _option!: Token;
  public MSCK(): TerminalNode {
    return this.getToken(SqlBaseParser.MSCK, 0);
  }
  public REPAIR(): TerminalNode {
    return this.getToken(SqlBaseParser.REPAIR, 0);
  }
  public TABLE(): TerminalNode {
    return this.getToken(SqlBaseParser.TABLE, 0);
  }
  public multipartIdentifier(): MultipartIdentifierContext {
    return this.getRuleContext(0, MultipartIdentifierContext);
  }
  public PARTITIONS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.PARTITIONS, 0);
  }
  public ADD(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ADD, 0);
  }
  public DROP(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DROP, 0);
  }
  public SYNC(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.SYNC, 0);
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterRepairTable) {
      listener.enterRepairTable(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitRepairTable) {
      listener.exitRepairTable(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitRepairTable) {
      return visitor.visitRepairTable(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class ManageResourceContext extends StatementContext {
  public _op!: Token;
  public identifier(): IdentifierContext {
    return this.getRuleContext(0, IdentifierContext);
  }
  public ADD(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ADD, 0);
  }
  public LIST(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.LIST, 0);
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterManageResource) {
      listener.enterManageResource(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitManageResource) {
      listener.exitManageResource(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitManageResource) {
      return visitor.visitManageResource(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class FailNativeCommandContext extends StatementContext {
  public SET(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.SET, 0);
  }
  public ROLE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ROLE, 0);
  }
  public unsupportedHiveNativeCommands(): UnsupportedHiveNativeCommandsContext | undefined {
    return this.tryGetRuleContext(0, UnsupportedHiveNativeCommandsContext);
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterFailNativeCommand) {
      listener.enterFailNativeCommand(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitFailNativeCommand) {
      listener.exitFailNativeCommand(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitFailNativeCommand) {
      return visitor.visitFailNativeCommand(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class SetTimeZoneContext extends StatementContext {
  public _timezone!: Token;
  public SET(): TerminalNode {
    return this.getToken(SqlBaseParser.SET, 0);
  }
  public TIME(): TerminalNode {
    return this.getToken(SqlBaseParser.TIME, 0);
  }
  public ZONE(): TerminalNode {
    return this.getToken(SqlBaseParser.ZONE, 0);
  }
  public interval(): IntervalContext | undefined {
    return this.tryGetRuleContext(0, IntervalContext);
  }
  public STRING(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.STRING, 0);
  }
  public LOCAL(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.LOCAL, 0);
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterSetTimeZone) {
      listener.enterSetTimeZone(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitSetTimeZone) {
      listener.exitSetTimeZone(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitSetTimeZone) {
      return visitor.visitSetTimeZone(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class SetQuotedConfigurationContext extends StatementContext {
  public SET(): TerminalNode {
    return this.getToken(SqlBaseParser.SET, 0);
  }
  public configKey(): ConfigKeyContext | undefined {
    return this.tryGetRuleContext(0, ConfigKeyContext);
  }
  public EQ(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.EQ, 0);
  }
  public configValue(): ConfigValueContext | undefined {
    return this.tryGetRuleContext(0, ConfigValueContext);
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterSetQuotedConfiguration) {
      listener.enterSetQuotedConfiguration(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitSetQuotedConfiguration) {
      listener.exitSetQuotedConfiguration(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitSetQuotedConfiguration) {
      return visitor.visitSetQuotedConfiguration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class SetConfigurationContext extends StatementContext {
  public SET(): TerminalNode {
    return this.getToken(SqlBaseParser.SET, 0);
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterSetConfiguration) {
      listener.enterSetConfiguration(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitSetConfiguration) {
      listener.exitSetConfiguration(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitSetConfiguration) {
      return visitor.visitSetConfiguration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class ResetQuotedConfigurationContext extends StatementContext {
  public RESET(): TerminalNode {
    return this.getToken(SqlBaseParser.RESET, 0);
  }
  public configKey(): ConfigKeyContext {
    return this.getRuleContext(0, ConfigKeyContext);
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterResetQuotedConfiguration) {
      listener.enterResetQuotedConfiguration(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitResetQuotedConfiguration) {
      listener.exitResetQuotedConfiguration(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitResetQuotedConfiguration) {
      return visitor.visitResetQuotedConfiguration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class ResetConfigurationContext extends StatementContext {
  public RESET(): TerminalNode {
    return this.getToken(SqlBaseParser.RESET, 0);
  }
  constructor(ctx: StatementContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterResetConfiguration) {
      listener.enterResetConfiguration(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitResetConfiguration) {
      listener.exitResetConfiguration(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitResetConfiguration) {
      return visitor.visitResetConfiguration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class ConfigKeyContext extends ParserRuleContext {
  public quotedIdentifier(): QuotedIdentifierContext {
    return this.getRuleContext(0, QuotedIdentifierContext);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_configKey;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterConfigKey) {
      listener.enterConfigKey(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitConfigKey) {
      listener.exitConfigKey(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitConfigKey) {
      return visitor.visitConfigKey(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class ConfigValueContext extends ParserRuleContext {
  public quotedIdentifier(): QuotedIdentifierContext {
    return this.getRuleContext(0, QuotedIdentifierContext);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_configValue;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterConfigValue) {
      listener.enterConfigValue(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitConfigValue) {
      listener.exitConfigValue(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitConfigValue) {
      return visitor.visitConfigValue(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class UnsupportedHiveNativeCommandsContext extends ParserRuleContext {
  public _kw1!: Token;
  public _kw2!: Token;
  public _kw3!: Token;
  public _kw4!: Token;
  public _kw5!: Token;
  public _kw6!: Token;
  public CREATE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.CREATE, 0);
  }
  public ROLE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ROLE, 0);
  }
  public DROP(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DROP, 0);
  }
  public GRANT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.GRANT, 0);
  }
  public REVOKE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.REVOKE, 0);
  }
  public SHOW(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.SHOW, 0);
  }
  public PRINCIPALS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.PRINCIPALS, 0);
  }
  public ROLES(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ROLES, 0);
  }
  public CURRENT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.CURRENT, 0);
  }
  public EXPORT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.EXPORT, 0);
  }
  public TABLE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.TABLE, 0);
  }
  public IMPORT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.IMPORT, 0);
  }
  public COMPACTIONS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.COMPACTIONS, 0);
  }
  public TRANSACTIONS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.TRANSACTIONS, 0);
  }
  public INDEXES(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.INDEXES, 0);
  }
  public LOCKS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.LOCKS, 0);
  }
  public INDEX(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.INDEX, 0);
  }
  public ALTER(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ALTER, 0);
  }
  public LOCK(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.LOCK, 0);
  }
  public DATABASE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DATABASE, 0);
  }
  public UNLOCK(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.UNLOCK, 0);
  }
  public TEMPORARY(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.TEMPORARY, 0);
  }
  public MACRO(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.MACRO, 0);
  }
  public tableIdentifier(): TableIdentifierContext | undefined {
    return this.tryGetRuleContext(0, TableIdentifierContext);
  }
  public NOT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.NOT, 0);
  }
  public CLUSTERED(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.CLUSTERED, 0);
  }
  public BY(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.BY, 0);
  }
  public SORTED(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.SORTED, 0);
  }
  public SKEWED(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.SKEWED, 0);
  }
  public STORED(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.STORED, 0);
  }
  public AS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.AS, 0);
  }
  public DIRECTORIES(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DIRECTORIES, 0);
  }
  public SET(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.SET, 0);
  }
  public LOCATION(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.LOCATION, 0);
  }
  public EXCHANGE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.EXCHANGE, 0);
  }
  public PARTITION(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.PARTITION, 0);
  }
  public ARCHIVE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ARCHIVE, 0);
  }
  public UNARCHIVE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.UNARCHIVE, 0);
  }
  public TOUCH(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.TOUCH, 0);
  }
  public COMPACT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.COMPACT, 0);
  }
  public partitionSpec(): PartitionSpecContext | undefined {
    return this.tryGetRuleContext(0, PartitionSpecContext);
  }
  public CONCATENATE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.CONCATENATE, 0);
  }
  public FILEFORMAT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.FILEFORMAT, 0);
  }
  public REPLACE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.REPLACE, 0);
  }
  public COLUMNS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.COLUMNS, 0);
  }
  public START(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.START, 0);
  }
  public TRANSACTION(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.TRANSACTION, 0);
  }
  public COMMIT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.COMMIT, 0);
  }
  public ROLLBACK(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ROLLBACK, 0);
  }
  public DFS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DFS, 0);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_unsupportedHiveNativeCommands;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterUnsupportedHiveNativeCommands) {
      listener.enterUnsupportedHiveNativeCommands(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitUnsupportedHiveNativeCommands) {
      listener.exitUnsupportedHiveNativeCommands(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitUnsupportedHiveNativeCommands) {
      return visitor.visitUnsupportedHiveNativeCommands(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class CreateTableHeaderContext extends ParserRuleContext {
  public CREATE(): TerminalNode {
    return this.getToken(SqlBaseParser.CREATE, 0);
  }
  public TABLE(): TerminalNode {
    return this.getToken(SqlBaseParser.TABLE, 0);
  }
  public multipartIdentifier(): MultipartIdentifierContext {
    return this.getRuleContext(0, MultipartIdentifierContext);
  }
  public TEMPORARY(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.TEMPORARY, 0);
  }
  public EXTERNAL(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.EXTERNAL, 0);
  }
  public IF(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.IF, 0);
  }
  public NOT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.NOT, 0);
  }
  public EXISTS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.EXISTS, 0);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_createTableHeader;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterCreateTableHeader) {
      listener.enterCreateTableHeader(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitCreateTableHeader) {
      listener.exitCreateTableHeader(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitCreateTableHeader) {
      return visitor.visitCreateTableHeader(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class ReplaceTableHeaderContext extends ParserRuleContext {
  public REPLACE(): TerminalNode {
    return this.getToken(SqlBaseParser.REPLACE, 0);
  }
  public TABLE(): TerminalNode {
    return this.getToken(SqlBaseParser.TABLE, 0);
  }
  public multipartIdentifier(): MultipartIdentifierContext {
    return this.getRuleContext(0, MultipartIdentifierContext);
  }
  public CREATE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.CREATE, 0);
  }
  public OR(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.OR, 0);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_replaceTableHeader;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterReplaceTableHeader) {
      listener.enterReplaceTableHeader(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitReplaceTableHeader) {
      listener.exitReplaceTableHeader(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitReplaceTableHeader) {
      return visitor.visitReplaceTableHeader(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class BucketSpecContext extends ParserRuleContext {
  public CLUSTERED(): TerminalNode {
    return this.getToken(SqlBaseParser.CLUSTERED, 0);
  }
  public BY(): TerminalNode[];
  public BY(i: number): TerminalNode;
  public BY(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(SqlBaseParser.BY);
    } else {
      return this.getToken(SqlBaseParser.BY, i);
    }
  }
  public identifierList(): IdentifierListContext {
    return this.getRuleContext(0, IdentifierListContext);
  }
  public INTO(): TerminalNode {
    return this.getToken(SqlBaseParser.INTO, 0);
  }
  public INTEGER_VALUE(): TerminalNode {
    return this.getToken(SqlBaseParser.INTEGER_VALUE, 0);
  }
  public BUCKETS(): TerminalNode {
    return this.getToken(SqlBaseParser.BUCKETS, 0);
  }
  public SORTED(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.SORTED, 0);
  }
  public orderedIdentifierList(): OrderedIdentifierListContext | undefined {
    return this.tryGetRuleContext(0, OrderedIdentifierListContext);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_bucketSpec;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterBucketSpec) {
      listener.enterBucketSpec(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitBucketSpec) {
      listener.exitBucketSpec(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitBucketSpec) {
      return visitor.visitBucketSpec(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class SkewSpecContext extends ParserRuleContext {
  public SKEWED(): TerminalNode {
    return this.getToken(SqlBaseParser.SKEWED, 0);
  }
  public BY(): TerminalNode {
    return this.getToken(SqlBaseParser.BY, 0);
  }
  public identifierList(): IdentifierListContext {
    return this.getRuleContext(0, IdentifierListContext);
  }
  public ON(): TerminalNode {
    return this.getToken(SqlBaseParser.ON, 0);
  }
  public constantList(): ConstantListContext | undefined {
    return this.tryGetRuleContext(0, ConstantListContext);
  }
  public nestedConstantList(): NestedConstantListContext | undefined {
    return this.tryGetRuleContext(0, NestedConstantListContext);
  }
  public STORED(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.STORED, 0);
  }
  public AS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.AS, 0);
  }
  public DIRECTORIES(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DIRECTORIES, 0);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_skewSpec;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterSkewSpec) {
      listener.enterSkewSpec(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitSkewSpec) {
      listener.exitSkewSpec(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitSkewSpec) {
      return visitor.visitSkewSpec(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class LocationSpecContext extends ParserRuleContext {
  public LOCATION(): TerminalNode {
    return this.getToken(SqlBaseParser.LOCATION, 0);
  }
  public STRING(): TerminalNode {
    return this.getToken(SqlBaseParser.STRING, 0);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_locationSpec;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterLocationSpec) {
      listener.enterLocationSpec(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitLocationSpec) {
      listener.exitLocationSpec(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitLocationSpec) {
      return visitor.visitLocationSpec(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class CommentSpecContext extends ParserRuleContext {
  public COMMENT(): TerminalNode {
    return this.getToken(SqlBaseParser.COMMENT, 0);
  }
  public STRING(): TerminalNode {
    return this.getToken(SqlBaseParser.STRING, 0);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_commentSpec;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterCommentSpec) {
      listener.enterCommentSpec(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitCommentSpec) {
      listener.exitCommentSpec(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitCommentSpec) {
      return visitor.visitCommentSpec(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class QueryContext extends ParserRuleContext {
  public queryTerm(): QueryTermContext {
    return this.getRuleContext(0, QueryTermContext);
  }
  public queryOrganization(): QueryOrganizationContext {
    return this.getRuleContext(0, QueryOrganizationContext);
  }
  public ctes(): CtesContext | undefined {
    return this.tryGetRuleContext(0, CtesContext);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_query;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterQuery) {
      listener.enterQuery(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitQuery) {
      listener.exitQuery(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitQuery) {
      return visitor.visitQuery(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class InsertIntoContext extends ParserRuleContext {
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_insertInto;
  }
  public copyFrom(ctx: InsertIntoContext): void {
    super.copyFrom(ctx);
  }
}
export class InsertOverwriteTableContext extends InsertIntoContext {
  public INSERT(): TerminalNode {
    return this.getToken(SqlBaseParser.INSERT, 0);
  }
  public OVERWRITE(): TerminalNode {
    return this.getToken(SqlBaseParser.OVERWRITE, 0);
  }
  public multipartIdentifier(): MultipartIdentifierContext {
    return this.getRuleContext(0, MultipartIdentifierContext);
  }
  public TABLE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.TABLE, 0);
  }
  public partitionSpec(): PartitionSpecContext | undefined {
    return this.tryGetRuleContext(0, PartitionSpecContext);
  }
  public identifierList(): IdentifierListContext | undefined {
    return this.tryGetRuleContext(0, IdentifierListContext);
  }
  public IF(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.IF, 0);
  }
  public NOT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.NOT, 0);
  }
  public EXISTS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.EXISTS, 0);
  }
  constructor(ctx: InsertIntoContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterInsertOverwriteTable) {
      listener.enterInsertOverwriteTable(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitInsertOverwriteTable) {
      listener.exitInsertOverwriteTable(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitInsertOverwriteTable) {
      return visitor.visitInsertOverwriteTable(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class InsertIntoTableContext extends InsertIntoContext {
  public INSERT(): TerminalNode {
    return this.getToken(SqlBaseParser.INSERT, 0);
  }
  public INTO(): TerminalNode {
    return this.getToken(SqlBaseParser.INTO, 0);
  }
  public multipartIdentifier(): MultipartIdentifierContext {
    return this.getRuleContext(0, MultipartIdentifierContext);
  }
  public TABLE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.TABLE, 0);
  }
  public partitionSpec(): PartitionSpecContext | undefined {
    return this.tryGetRuleContext(0, PartitionSpecContext);
  }
  public IF(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.IF, 0);
  }
  public NOT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.NOT, 0);
  }
  public EXISTS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.EXISTS, 0);
  }
  public identifierList(): IdentifierListContext | undefined {
    return this.tryGetRuleContext(0, IdentifierListContext);
  }
  constructor(ctx: InsertIntoContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterInsertIntoTable) {
      listener.enterInsertIntoTable(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitInsertIntoTable) {
      listener.exitInsertIntoTable(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitInsertIntoTable) {
      return visitor.visitInsertIntoTable(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class InsertOverwriteHiveDirContext extends InsertIntoContext {
  public _path!: Token;
  public INSERT(): TerminalNode {
    return this.getToken(SqlBaseParser.INSERT, 0);
  }
  public OVERWRITE(): TerminalNode {
    return this.getToken(SqlBaseParser.OVERWRITE, 0);
  }
  public DIRECTORY(): TerminalNode {
    return this.getToken(SqlBaseParser.DIRECTORY, 0);
  }
  public STRING(): TerminalNode {
    return this.getToken(SqlBaseParser.STRING, 0);
  }
  public LOCAL(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.LOCAL, 0);
  }
  public rowFormat(): RowFormatContext | undefined {
    return this.tryGetRuleContext(0, RowFormatContext);
  }
  public createFileFormat(): CreateFileFormatContext | undefined {
    return this.tryGetRuleContext(0, CreateFileFormatContext);
  }
  constructor(ctx: InsertIntoContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterInsertOverwriteHiveDir) {
      listener.enterInsertOverwriteHiveDir(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitInsertOverwriteHiveDir) {
      listener.exitInsertOverwriteHiveDir(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitInsertOverwriteHiveDir) {
      return visitor.visitInsertOverwriteHiveDir(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class InsertOverwriteDirContext extends InsertIntoContext {
  public _path!: Token;
  public _options!: TablePropertyListContext;
  public INSERT(): TerminalNode {
    return this.getToken(SqlBaseParser.INSERT, 0);
  }
  public OVERWRITE(): TerminalNode {
    return this.getToken(SqlBaseParser.OVERWRITE, 0);
  }
  public DIRECTORY(): TerminalNode {
    return this.getToken(SqlBaseParser.DIRECTORY, 0);
  }
  public tableProvider(): TableProviderContext {
    return this.getRuleContext(0, TableProviderContext);
  }
  public LOCAL(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.LOCAL, 0);
  }
  public OPTIONS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.OPTIONS, 0);
  }
  public STRING(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.STRING, 0);
  }
  public tablePropertyList(): TablePropertyListContext | undefined {
    return this.tryGetRuleContext(0, TablePropertyListContext);
  }
  constructor(ctx: InsertIntoContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterInsertOverwriteDir) {
      listener.enterInsertOverwriteDir(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitInsertOverwriteDir) {
      listener.exitInsertOverwriteDir(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitInsertOverwriteDir) {
      return visitor.visitInsertOverwriteDir(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class PartitionSpecLocationContext extends ParserRuleContext {
  public partitionSpec(): PartitionSpecContext {
    return this.getRuleContext(0, PartitionSpecContext);
  }
  public locationSpec(): LocationSpecContext | undefined {
    return this.tryGetRuleContext(0, LocationSpecContext);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_partitionSpecLocation;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterPartitionSpecLocation) {
      listener.enterPartitionSpecLocation(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitPartitionSpecLocation) {
      listener.exitPartitionSpecLocation(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitPartitionSpecLocation) {
      return visitor.visitPartitionSpecLocation(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class PartitionSpecContext extends ParserRuleContext {
  public PARTITION(): TerminalNode {
    return this.getToken(SqlBaseParser.PARTITION, 0);
  }
  public partitionVal(): PartitionValContext[];
  public partitionVal(i: number): PartitionValContext;
  public partitionVal(i?: number): PartitionValContext | PartitionValContext[] {
    if (i === undefined) {
      return this.getRuleContexts(PartitionValContext);
    } else {
      return this.getRuleContext(i, PartitionValContext);
    }
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_partitionSpec;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterPartitionSpec) {
      listener.enterPartitionSpec(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitPartitionSpec) {
      listener.exitPartitionSpec(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitPartitionSpec) {
      return visitor.visitPartitionSpec(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class PartitionValContext extends ParserRuleContext {
  public identifier(): IdentifierContext {
    return this.getRuleContext(0, IdentifierContext);
  }
  public EQ(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.EQ, 0);
  }
  public constant(): ConstantContext | undefined {
    return this.tryGetRuleContext(0, ConstantContext);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_partitionVal;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterPartitionVal) {
      listener.enterPartitionVal(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitPartitionVal) {
      listener.exitPartitionVal(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitPartitionVal) {
      return visitor.visitPartitionVal(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class NamespaceContext extends ParserRuleContext {
  public NAMESPACE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.NAMESPACE, 0);
  }
  public DATABASE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DATABASE, 0);
  }
  public SCHEMA(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.SCHEMA, 0);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_namespace;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterNamespace) {
      listener.enterNamespace(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitNamespace) {
      listener.exitNamespace(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitNamespace) {
      return visitor.visitNamespace(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class DescribeFuncNameContext extends ParserRuleContext {
  public qualifiedName(): QualifiedNameContext | undefined {
    return this.tryGetRuleContext(0, QualifiedNameContext);
  }
  public STRING(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.STRING, 0);
  }
  public comparisonOperator(): ComparisonOperatorContext | undefined {
    return this.tryGetRuleContext(0, ComparisonOperatorContext);
  }
  public arithmeticOperator(): ArithmeticOperatorContext | undefined {
    return this.tryGetRuleContext(0, ArithmeticOperatorContext);
  }
  public predicateOperator(): PredicateOperatorContext | undefined {
    return this.tryGetRuleContext(0, PredicateOperatorContext);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_describeFuncName;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterDescribeFuncName) {
      listener.enterDescribeFuncName(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitDescribeFuncName) {
      listener.exitDescribeFuncName(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitDescribeFuncName) {
      return visitor.visitDescribeFuncName(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class DescribeColNameContext extends ParserRuleContext {
  public _identifier!: IdentifierContext;
  public _nameParts: IdentifierContext[] = [];
  public identifier(): IdentifierContext[];
  public identifier(i: number): IdentifierContext;
  public identifier(i?: number): IdentifierContext | IdentifierContext[] {
    if (i === undefined) {
      return this.getRuleContexts(IdentifierContext);
    } else {
      return this.getRuleContext(i, IdentifierContext);
    }
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_describeColName;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterDescribeColName) {
      listener.enterDescribeColName(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitDescribeColName) {
      listener.exitDescribeColName(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitDescribeColName) {
      return visitor.visitDescribeColName(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class CtesContext extends ParserRuleContext {
  public WITH(): TerminalNode {
    return this.getToken(SqlBaseParser.WITH, 0);
  }
  public namedQuery(): NamedQueryContext[];
  public namedQuery(i: number): NamedQueryContext;
  public namedQuery(i?: number): NamedQueryContext | NamedQueryContext[] {
    if (i === undefined) {
      return this.getRuleContexts(NamedQueryContext);
    } else {
      return this.getRuleContext(i, NamedQueryContext);
    }
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_ctes;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterCtes) {
      listener.enterCtes(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitCtes) {
      listener.exitCtes(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitCtes) {
      return visitor.visitCtes(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class NamedQueryContext extends ParserRuleContext {
  public _name!: ErrorCapturingIdentifierContext;
  public _columnAliases!: IdentifierListContext;
  public query(): QueryContext {
    return this.getRuleContext(0, QueryContext);
  }
  public errorCapturingIdentifier(): ErrorCapturingIdentifierContext {
    return this.getRuleContext(0, ErrorCapturingIdentifierContext);
  }
  public AS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.AS, 0);
  }
  public identifierList(): IdentifierListContext | undefined {
    return this.tryGetRuleContext(0, IdentifierListContext);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_namedQuery;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterNamedQuery) {
      listener.enterNamedQuery(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitNamedQuery) {
      listener.exitNamedQuery(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitNamedQuery) {
      return visitor.visitNamedQuery(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class TableProviderContext extends ParserRuleContext {
  public USING(): TerminalNode {
    return this.getToken(SqlBaseParser.USING, 0);
  }
  public multipartIdentifier(): MultipartIdentifierContext {
    return this.getRuleContext(0, MultipartIdentifierContext);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_tableProvider;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterTableProvider) {
      listener.enterTableProvider(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitTableProvider) {
      listener.exitTableProvider(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitTableProvider) {
      return visitor.visitTableProvider(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class CreateTableClausesContext extends ParserRuleContext {
  public _options!: TablePropertyListContext;
  public _partitioning!: PartitionFieldListContext;
  public _tableProps!: TablePropertyListContext;
  public skewSpec(): SkewSpecContext[];
  public skewSpec(i: number): SkewSpecContext;
  public skewSpec(i?: number): SkewSpecContext | SkewSpecContext[] {
    if (i === undefined) {
      return this.getRuleContexts(SkewSpecContext);
    } else {
      return this.getRuleContext(i, SkewSpecContext);
    }
  }
  public bucketSpec(): BucketSpecContext[];
  public bucketSpec(i: number): BucketSpecContext;
  public bucketSpec(i?: number): BucketSpecContext | BucketSpecContext[] {
    if (i === undefined) {
      return this.getRuleContexts(BucketSpecContext);
    } else {
      return this.getRuleContext(i, BucketSpecContext);
    }
  }
  public rowFormat(): RowFormatContext[];
  public rowFormat(i: number): RowFormatContext;
  public rowFormat(i?: number): RowFormatContext | RowFormatContext[] {
    if (i === undefined) {
      return this.getRuleContexts(RowFormatContext);
    } else {
      return this.getRuleContext(i, RowFormatContext);
    }
  }
  public createFileFormat(): CreateFileFormatContext[];
  public createFileFormat(i: number): CreateFileFormatContext;
  public createFileFormat(i?: number): CreateFileFormatContext | CreateFileFormatContext[] {
    if (i === undefined) {
      return this.getRuleContexts(CreateFileFormatContext);
    } else {
      return this.getRuleContext(i, CreateFileFormatContext);
    }
  }
  public locationSpec(): LocationSpecContext[];
  public locationSpec(i: number): LocationSpecContext;
  public locationSpec(i?: number): LocationSpecContext | LocationSpecContext[] {
    if (i === undefined) {
      return this.getRuleContexts(LocationSpecContext);
    } else {
      return this.getRuleContext(i, LocationSpecContext);
    }
  }
  public commentSpec(): CommentSpecContext[];
  public commentSpec(i: number): CommentSpecContext;
  public commentSpec(i?: number): CommentSpecContext | CommentSpecContext[] {
    if (i === undefined) {
      return this.getRuleContexts(CommentSpecContext);
    } else {
      return this.getRuleContext(i, CommentSpecContext);
    }
  }
  public OPTIONS(): TerminalNode[];
  public OPTIONS(i: number): TerminalNode;
  public OPTIONS(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(SqlBaseParser.OPTIONS);
    } else {
      return this.getToken(SqlBaseParser.OPTIONS, i);
    }
  }
  public PARTITIONED(): TerminalNode[];
  public PARTITIONED(i: number): TerminalNode;
  public PARTITIONED(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(SqlBaseParser.PARTITIONED);
    } else {
      return this.getToken(SqlBaseParser.PARTITIONED, i);
    }
  }
  public BY(): TerminalNode[];
  public BY(i: number): TerminalNode;
  public BY(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(SqlBaseParser.BY);
    } else {
      return this.getToken(SqlBaseParser.BY, i);
    }
  }
  public TBLPROPERTIES(): TerminalNode[];
  public TBLPROPERTIES(i: number): TerminalNode;
  public TBLPROPERTIES(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(SqlBaseParser.TBLPROPERTIES);
    } else {
      return this.getToken(SqlBaseParser.TBLPROPERTIES, i);
    }
  }
  public tablePropertyList(): TablePropertyListContext[];
  public tablePropertyList(i: number): TablePropertyListContext;
  public tablePropertyList(i?: number): TablePropertyListContext | TablePropertyListContext[] {
    if (i === undefined) {
      return this.getRuleContexts(TablePropertyListContext);
    } else {
      return this.getRuleContext(i, TablePropertyListContext);
    }
  }
  public partitionFieldList(): PartitionFieldListContext[];
  public partitionFieldList(i: number): PartitionFieldListContext;
  public partitionFieldList(i?: number): PartitionFieldListContext | PartitionFieldListContext[] {
    if (i === undefined) {
      return this.getRuleContexts(PartitionFieldListContext);
    } else {
      return this.getRuleContext(i, PartitionFieldListContext);
    }
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_createTableClauses;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterCreateTableClauses) {
      listener.enterCreateTableClauses(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitCreateTableClauses) {
      listener.exitCreateTableClauses(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitCreateTableClauses) {
      return visitor.visitCreateTableClauses(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class TablePropertyListContext extends ParserRuleContext {
  public tableProperty(): TablePropertyContext[];
  public tableProperty(i: number): TablePropertyContext;
  public tableProperty(i?: number): TablePropertyContext | TablePropertyContext[] {
    if (i === undefined) {
      return this.getRuleContexts(TablePropertyContext);
    } else {
      return this.getRuleContext(i, TablePropertyContext);
    }
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_tablePropertyList;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterTablePropertyList) {
      listener.enterTablePropertyList(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitTablePropertyList) {
      listener.exitTablePropertyList(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitTablePropertyList) {
      return visitor.visitTablePropertyList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class TablePropertyContext extends ParserRuleContext {
  public _key!: TablePropertyKeyContext;
  public _value!: TablePropertyValueContext;
  public tablePropertyKey(): TablePropertyKeyContext {
    return this.getRuleContext(0, TablePropertyKeyContext);
  }
  public tablePropertyValue(): TablePropertyValueContext | undefined {
    return this.tryGetRuleContext(0, TablePropertyValueContext);
  }
  public EQ(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.EQ, 0);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_tableProperty;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterTableProperty) {
      listener.enterTableProperty(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitTableProperty) {
      listener.exitTableProperty(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitTableProperty) {
      return visitor.visitTableProperty(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class TablePropertyKeyContext extends ParserRuleContext {
  public identifier(): IdentifierContext[];
  public identifier(i: number): IdentifierContext;
  public identifier(i?: number): IdentifierContext | IdentifierContext[] {
    if (i === undefined) {
      return this.getRuleContexts(IdentifierContext);
    } else {
      return this.getRuleContext(i, IdentifierContext);
    }
  }
  public STRING(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.STRING, 0);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_tablePropertyKey;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterTablePropertyKey) {
      listener.enterTablePropertyKey(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitTablePropertyKey) {
      listener.exitTablePropertyKey(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitTablePropertyKey) {
      return visitor.visitTablePropertyKey(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class TablePropertyValueContext extends ParserRuleContext {
  public INTEGER_VALUE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.INTEGER_VALUE, 0);
  }
  public DECIMAL_VALUE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DECIMAL_VALUE, 0);
  }
  public booleanValue(): BooleanValueContext | undefined {
    return this.tryGetRuleContext(0, BooleanValueContext);
  }
  public STRING(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.STRING, 0);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_tablePropertyValue;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterTablePropertyValue) {
      listener.enterTablePropertyValue(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitTablePropertyValue) {
      listener.exitTablePropertyValue(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitTablePropertyValue) {
      return visitor.visitTablePropertyValue(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class ConstantListContext extends ParserRuleContext {
  public constant(): ConstantContext[];
  public constant(i: number): ConstantContext;
  public constant(i?: number): ConstantContext | ConstantContext[] {
    if (i === undefined) {
      return this.getRuleContexts(ConstantContext);
    } else {
      return this.getRuleContext(i, ConstantContext);
    }
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_constantList;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterConstantList) {
      listener.enterConstantList(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitConstantList) {
      listener.exitConstantList(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitConstantList) {
      return visitor.visitConstantList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class NestedConstantListContext extends ParserRuleContext {
  public constantList(): ConstantListContext[];
  public constantList(i: number): ConstantListContext;
  public constantList(i?: number): ConstantListContext | ConstantListContext[] {
    if (i === undefined) {
      return this.getRuleContexts(ConstantListContext);
    } else {
      return this.getRuleContext(i, ConstantListContext);
    }
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_nestedConstantList;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterNestedConstantList) {
      listener.enterNestedConstantList(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitNestedConstantList) {
      listener.exitNestedConstantList(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitNestedConstantList) {
      return visitor.visitNestedConstantList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class CreateFileFormatContext extends ParserRuleContext {
  public STORED(): TerminalNode {
    return this.getToken(SqlBaseParser.STORED, 0);
  }
  public AS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.AS, 0);
  }
  public fileFormat(): FileFormatContext | undefined {
    return this.tryGetRuleContext(0, FileFormatContext);
  }
  public BY(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.BY, 0);
  }
  public storageHandler(): StorageHandlerContext | undefined {
    return this.tryGetRuleContext(0, StorageHandlerContext);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_createFileFormat;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterCreateFileFormat) {
      listener.enterCreateFileFormat(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitCreateFileFormat) {
      listener.exitCreateFileFormat(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitCreateFileFormat) {
      return visitor.visitCreateFileFormat(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class FileFormatContext extends ParserRuleContext {
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_fileFormat;
  }
  public copyFrom(ctx: FileFormatContext): void {
    super.copyFrom(ctx);
  }
}
export class TableFileFormatContext extends FileFormatContext {
  public _inFmt!: Token;
  public _outFmt!: Token;
  public INPUTFORMAT(): TerminalNode {
    return this.getToken(SqlBaseParser.INPUTFORMAT, 0);
  }
  public OUTPUTFORMAT(): TerminalNode {
    return this.getToken(SqlBaseParser.OUTPUTFORMAT, 0);
  }
  public STRING(): TerminalNode[];
  public STRING(i: number): TerminalNode;
  public STRING(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(SqlBaseParser.STRING);
    } else {
      return this.getToken(SqlBaseParser.STRING, i);
    }
  }
  constructor(ctx: FileFormatContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterTableFileFormat) {
      listener.enterTableFileFormat(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitTableFileFormat) {
      listener.exitTableFileFormat(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitTableFileFormat) {
      return visitor.visitTableFileFormat(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class GenericFileFormatContext extends FileFormatContext {
  public identifier(): IdentifierContext {
    return this.getRuleContext(0, IdentifierContext);
  }
  constructor(ctx: FileFormatContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterGenericFileFormat) {
      listener.enterGenericFileFormat(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitGenericFileFormat) {
      listener.exitGenericFileFormat(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitGenericFileFormat) {
      return visitor.visitGenericFileFormat(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class StorageHandlerContext extends ParserRuleContext {
  public STRING(): TerminalNode {
    return this.getToken(SqlBaseParser.STRING, 0);
  }
  public WITH(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.WITH, 0);
  }
  public SERDEPROPERTIES(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.SERDEPROPERTIES, 0);
  }
  public tablePropertyList(): TablePropertyListContext | undefined {
    return this.tryGetRuleContext(0, TablePropertyListContext);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_storageHandler;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterStorageHandler) {
      listener.enterStorageHandler(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitStorageHandler) {
      listener.exitStorageHandler(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitStorageHandler) {
      return visitor.visitStorageHandler(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class ResourceContext extends ParserRuleContext {
  public identifier(): IdentifierContext {
    return this.getRuleContext(0, IdentifierContext);
  }
  public STRING(): TerminalNode {
    return this.getToken(SqlBaseParser.STRING, 0);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_resource;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterResource) {
      listener.enterResource(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitResource) {
      listener.exitResource(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitResource) {
      return visitor.visitResource(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class DmlStatementNoWithContext extends ParserRuleContext {
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_dmlStatementNoWith;
  }
  public copyFrom(ctx: DmlStatementNoWithContext): void {
    super.copyFrom(ctx);
  }
}
export class SingleInsertQueryContext extends DmlStatementNoWithContext {
  public insertInto(): InsertIntoContext {
    return this.getRuleContext(0, InsertIntoContext);
  }
  public queryTerm(): QueryTermContext {
    return this.getRuleContext(0, QueryTermContext);
  }
  public queryOrganization(): QueryOrganizationContext {
    return this.getRuleContext(0, QueryOrganizationContext);
  }
  constructor(ctx: DmlStatementNoWithContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterSingleInsertQuery) {
      listener.enterSingleInsertQuery(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitSingleInsertQuery) {
      listener.exitSingleInsertQuery(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitSingleInsertQuery) {
      return visitor.visitSingleInsertQuery(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class MultiInsertQueryContext extends DmlStatementNoWithContext {
  public fromClause(): FromClauseContext {
    return this.getRuleContext(0, FromClauseContext);
  }
  public multiInsertQueryBody(): MultiInsertQueryBodyContext[];
  public multiInsertQueryBody(i: number): MultiInsertQueryBodyContext;
  public multiInsertQueryBody(i?: number): MultiInsertQueryBodyContext | MultiInsertQueryBodyContext[] {
    if (i === undefined) {
      return this.getRuleContexts(MultiInsertQueryBodyContext);
    } else {
      return this.getRuleContext(i, MultiInsertQueryBodyContext);
    }
  }
  constructor(ctx: DmlStatementNoWithContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterMultiInsertQuery) {
      listener.enterMultiInsertQuery(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitMultiInsertQuery) {
      listener.exitMultiInsertQuery(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitMultiInsertQuery) {
      return visitor.visitMultiInsertQuery(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class DeleteFromTableContext extends DmlStatementNoWithContext {
  public DELETE(): TerminalNode {
    return this.getToken(SqlBaseParser.DELETE, 0);
  }
  public FROM(): TerminalNode {
    return this.getToken(SqlBaseParser.FROM, 0);
  }
  public multipartIdentifier(): MultipartIdentifierContext {
    return this.getRuleContext(0, MultipartIdentifierContext);
  }
  public tableAlias(): TableAliasContext {
    return this.getRuleContext(0, TableAliasContext);
  }
  public whereClause(): WhereClauseContext | undefined {
    return this.tryGetRuleContext(0, WhereClauseContext);
  }
  constructor(ctx: DmlStatementNoWithContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterDeleteFromTable) {
      listener.enterDeleteFromTable(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitDeleteFromTable) {
      listener.exitDeleteFromTable(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitDeleteFromTable) {
      return visitor.visitDeleteFromTable(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class UpdateTableContext extends DmlStatementNoWithContext {
  public UPDATE(): TerminalNode {
    return this.getToken(SqlBaseParser.UPDATE, 0);
  }
  public multipartIdentifier(): MultipartIdentifierContext {
    return this.getRuleContext(0, MultipartIdentifierContext);
  }
  public tableAlias(): TableAliasContext {
    return this.getRuleContext(0, TableAliasContext);
  }
  public setClause(): SetClauseContext {
    return this.getRuleContext(0, SetClauseContext);
  }
  public whereClause(): WhereClauseContext | undefined {
    return this.tryGetRuleContext(0, WhereClauseContext);
  }
  constructor(ctx: DmlStatementNoWithContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterUpdateTable) {
      listener.enterUpdateTable(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitUpdateTable) {
      listener.exitUpdateTable(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitUpdateTable) {
      return visitor.visitUpdateTable(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class MergeIntoTableContext extends DmlStatementNoWithContext {
  public _target!: MultipartIdentifierContext;
  public _targetAlias!: TableAliasContext;
  public _source!: MultipartIdentifierContext;
  public _sourceQuery!: QueryContext;
  public _sourceAlias!: TableAliasContext;
  public _mergeCondition!: BooleanExpressionContext;
  public MERGE(): TerminalNode {
    return this.getToken(SqlBaseParser.MERGE, 0);
  }
  public INTO(): TerminalNode {
    return this.getToken(SqlBaseParser.INTO, 0);
  }
  public USING(): TerminalNode {
    return this.getToken(SqlBaseParser.USING, 0);
  }
  public ON(): TerminalNode {
    return this.getToken(SqlBaseParser.ON, 0);
  }
  public multipartIdentifier(): MultipartIdentifierContext[];
  public multipartIdentifier(i: number): MultipartIdentifierContext;
  public multipartIdentifier(i?: number): MultipartIdentifierContext | MultipartIdentifierContext[] {
    if (i === undefined) {
      return this.getRuleContexts(MultipartIdentifierContext);
    } else {
      return this.getRuleContext(i, MultipartIdentifierContext);
    }
  }
  public tableAlias(): TableAliasContext[];
  public tableAlias(i: number): TableAliasContext;
  public tableAlias(i?: number): TableAliasContext | TableAliasContext[] {
    if (i === undefined) {
      return this.getRuleContexts(TableAliasContext);
    } else {
      return this.getRuleContext(i, TableAliasContext);
    }
  }
  public booleanExpression(): BooleanExpressionContext {
    return this.getRuleContext(0, BooleanExpressionContext);
  }
  public query(): QueryContext | undefined {
    return this.tryGetRuleContext(0, QueryContext);
  }
  public matchedClause(): MatchedClauseContext[];
  public matchedClause(i: number): MatchedClauseContext;
  public matchedClause(i?: number): MatchedClauseContext | MatchedClauseContext[] {
    if (i === undefined) {
      return this.getRuleContexts(MatchedClauseContext);
    } else {
      return this.getRuleContext(i, MatchedClauseContext);
    }
  }
  public notMatchedClause(): NotMatchedClauseContext[];
  public notMatchedClause(i: number): NotMatchedClauseContext;
  public notMatchedClause(i?: number): NotMatchedClauseContext | NotMatchedClauseContext[] {
    if (i === undefined) {
      return this.getRuleContexts(NotMatchedClauseContext);
    } else {
      return this.getRuleContext(i, NotMatchedClauseContext);
    }
  }
  constructor(ctx: DmlStatementNoWithContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterMergeIntoTable) {
      listener.enterMergeIntoTable(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitMergeIntoTable) {
      listener.exitMergeIntoTable(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitMergeIntoTable) {
      return visitor.visitMergeIntoTable(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class QueryOrganizationContext extends ParserRuleContext {
  public _sortItem!: SortItemContext;
  public _order: SortItemContext[] = [];
  public _expression!: ExpressionContext;
  public _clusterBy: ExpressionContext[] = [];
  public _distributeBy: ExpressionContext[] = [];
  public _sort: SortItemContext[] = [];
  public _limit!: ExpressionContext;
  public ORDER(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ORDER, 0);
  }
  public BY(): TerminalNode[];
  public BY(i: number): TerminalNode;
  public BY(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(SqlBaseParser.BY);
    } else {
      return this.getToken(SqlBaseParser.BY, i);
    }
  }
  public CLUSTER(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.CLUSTER, 0);
  }
  public DISTRIBUTE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DISTRIBUTE, 0);
  }
  public SORT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.SORT, 0);
  }
  public windowClause(): WindowClauseContext | undefined {
    return this.tryGetRuleContext(0, WindowClauseContext);
  }
  public LIMIT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.LIMIT, 0);
  }
  public sortItem(): SortItemContext[];
  public sortItem(i: number): SortItemContext;
  public sortItem(i?: number): SortItemContext | SortItemContext[] {
    if (i === undefined) {
      return this.getRuleContexts(SortItemContext);
    } else {
      return this.getRuleContext(i, SortItemContext);
    }
  }
  public expression(): ExpressionContext[];
  public expression(i: number): ExpressionContext;
  public expression(i?: number): ExpressionContext | ExpressionContext[] {
    if (i === undefined) {
      return this.getRuleContexts(ExpressionContext);
    } else {
      return this.getRuleContext(i, ExpressionContext);
    }
  }
  public ALL(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ALL, 0);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_queryOrganization;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterQueryOrganization) {
      listener.enterQueryOrganization(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitQueryOrganization) {
      listener.exitQueryOrganization(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitQueryOrganization) {
      return visitor.visitQueryOrganization(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class MultiInsertQueryBodyContext extends ParserRuleContext {
  public insertInto(): InsertIntoContext {
    return this.getRuleContext(0, InsertIntoContext);
  }
  public fromStatementBody(): FromStatementBodyContext {
    return this.getRuleContext(0, FromStatementBodyContext);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_multiInsertQueryBody;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterMultiInsertQueryBody) {
      listener.enterMultiInsertQueryBody(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitMultiInsertQueryBody) {
      listener.exitMultiInsertQueryBody(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitMultiInsertQueryBody) {
      return visitor.visitMultiInsertQueryBody(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class QueryTermContext extends ParserRuleContext {
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_queryTerm;
  }
  public copyFrom(ctx: QueryTermContext): void {
    super.copyFrom(ctx);
  }
}
export class QueryTermDefaultContext extends QueryTermContext {
  public queryPrimary(): QueryPrimaryContext {
    return this.getRuleContext(0, QueryPrimaryContext);
  }
  constructor(ctx: QueryTermContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterQueryTermDefault) {
      listener.enterQueryTermDefault(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitQueryTermDefault) {
      listener.exitQueryTermDefault(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitQueryTermDefault) {
      return visitor.visitQueryTermDefault(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class SetOperationContext extends QueryTermContext {
  public _left!: QueryTermContext;
  public _operator!: Token;
  public _right!: QueryTermContext;
  public queryTerm(): QueryTermContext[];
  public queryTerm(i: number): QueryTermContext;
  public queryTerm(i?: number): QueryTermContext | QueryTermContext[] {
    if (i === undefined) {
      return this.getRuleContexts(QueryTermContext);
    } else {
      return this.getRuleContext(i, QueryTermContext);
    }
  }
  public INTERSECT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.INTERSECT, 0);
  }
  public UNION(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.UNION, 0);
  }
  public EXCEPT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.EXCEPT, 0);
  }
  public SETMINUS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.SETMINUS, 0);
  }
  public setQuantifier(): SetQuantifierContext | undefined {
    return this.tryGetRuleContext(0, SetQuantifierContext);
  }
  constructor(ctx: QueryTermContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterSetOperation) {
      listener.enterSetOperation(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitSetOperation) {
      listener.exitSetOperation(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitSetOperation) {
      return visitor.visitSetOperation(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class QueryPrimaryContext extends ParserRuleContext {
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_queryPrimary;
  }
  public copyFrom(ctx: QueryPrimaryContext): void {
    super.copyFrom(ctx);
  }
}
export class QueryPrimaryDefaultContext extends QueryPrimaryContext {
  public querySpecification(): QuerySpecificationContext {
    return this.getRuleContext(0, QuerySpecificationContext);
  }
  constructor(ctx: QueryPrimaryContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterQueryPrimaryDefault) {
      listener.enterQueryPrimaryDefault(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitQueryPrimaryDefault) {
      listener.exitQueryPrimaryDefault(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitQueryPrimaryDefault) {
      return visitor.visitQueryPrimaryDefault(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class FromStmtContext extends QueryPrimaryContext {
  public fromStatement(): FromStatementContext {
    return this.getRuleContext(0, FromStatementContext);
  }
  constructor(ctx: QueryPrimaryContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterFromStmt) {
      listener.enterFromStmt(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitFromStmt) {
      listener.exitFromStmt(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitFromStmt) {
      return visitor.visitFromStmt(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class TableContext extends QueryPrimaryContext {
  public TABLE(): TerminalNode {
    return this.getToken(SqlBaseParser.TABLE, 0);
  }
  public multipartIdentifier(): MultipartIdentifierContext {
    return this.getRuleContext(0, MultipartIdentifierContext);
  }
  constructor(ctx: QueryPrimaryContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterTable) {
      listener.enterTable(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitTable) {
      listener.exitTable(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitTable) {
      return visitor.visitTable(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class InlineTableDefault1Context extends QueryPrimaryContext {
  public inlineTable(): InlineTableContext {
    return this.getRuleContext(0, InlineTableContext);
  }
  constructor(ctx: QueryPrimaryContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterInlineTableDefault1) {
      listener.enterInlineTableDefault1(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitInlineTableDefault1) {
      listener.exitInlineTableDefault1(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitInlineTableDefault1) {
      return visitor.visitInlineTableDefault1(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class SubqueryContext extends QueryPrimaryContext {
  public query(): QueryContext {
    return this.getRuleContext(0, QueryContext);
  }
  constructor(ctx: QueryPrimaryContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterSubquery) {
      listener.enterSubquery(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitSubquery) {
      listener.exitSubquery(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitSubquery) {
      return visitor.visitSubquery(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class SortItemContext extends ParserRuleContext {
  public _ordering!: Token;
  public _nullOrder!: Token;
  public expression(): ExpressionContext {
    return this.getRuleContext(0, ExpressionContext);
  }
  public NULLS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.NULLS, 0);
  }
  public ASC(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ASC, 0);
  }
  public DESC(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DESC, 0);
  }
  public LAST(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.LAST, 0);
  }
  public FIRST(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.FIRST, 0);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_sortItem;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterSortItem) {
      listener.enterSortItem(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitSortItem) {
      listener.exitSortItem(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitSortItem) {
      return visitor.visitSortItem(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class FromStatementContext extends ParserRuleContext {
  public fromClause(): FromClauseContext {
    return this.getRuleContext(0, FromClauseContext);
  }
  public fromStatementBody(): FromStatementBodyContext[];
  public fromStatementBody(i: number): FromStatementBodyContext;
  public fromStatementBody(i?: number): FromStatementBodyContext | FromStatementBodyContext[] {
    if (i === undefined) {
      return this.getRuleContexts(FromStatementBodyContext);
    } else {
      return this.getRuleContext(i, FromStatementBodyContext);
    }
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_fromStatement;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterFromStatement) {
      listener.enterFromStatement(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitFromStatement) {
      listener.exitFromStatement(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitFromStatement) {
      return visitor.visitFromStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class FromStatementBodyContext extends ParserRuleContext {
  public transformClause(): TransformClauseContext | undefined {
    return this.tryGetRuleContext(0, TransformClauseContext);
  }
  public queryOrganization(): QueryOrganizationContext {
    return this.getRuleContext(0, QueryOrganizationContext);
  }
  public whereClause(): WhereClauseContext | undefined {
    return this.tryGetRuleContext(0, WhereClauseContext);
  }
  public selectClause(): SelectClauseContext | undefined {
    return this.tryGetRuleContext(0, SelectClauseContext);
  }
  public lateralView(): LateralViewContext[];
  public lateralView(i: number): LateralViewContext;
  public lateralView(i?: number): LateralViewContext | LateralViewContext[] {
    if (i === undefined) {
      return this.getRuleContexts(LateralViewContext);
    } else {
      return this.getRuleContext(i, LateralViewContext);
    }
  }
  public aggregationClause(): AggregationClauseContext | undefined {
    return this.tryGetRuleContext(0, AggregationClauseContext);
  }
  public havingClause(): HavingClauseContext | undefined {
    return this.tryGetRuleContext(0, HavingClauseContext);
  }
  public windowClause(): WindowClauseContext | undefined {
    return this.tryGetRuleContext(0, WindowClauseContext);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_fromStatementBody;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterFromStatementBody) {
      listener.enterFromStatementBody(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitFromStatementBody) {
      listener.exitFromStatementBody(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitFromStatementBody) {
      return visitor.visitFromStatementBody(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class QuerySpecificationContext extends ParserRuleContext {
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_querySpecification;
  }
  public copyFrom(ctx: QuerySpecificationContext): void {
    super.copyFrom(ctx);
  }
}
export class TransformQuerySpecificationContext extends QuerySpecificationContext {
  public transformClause(): TransformClauseContext {
    return this.getRuleContext(0, TransformClauseContext);
  }
  public fromClause(): FromClauseContext | undefined {
    return this.tryGetRuleContext(0, FromClauseContext);
  }
  public lateralView(): LateralViewContext[];
  public lateralView(i: number): LateralViewContext;
  public lateralView(i?: number): LateralViewContext | LateralViewContext[] {
    if (i === undefined) {
      return this.getRuleContexts(LateralViewContext);
    } else {
      return this.getRuleContext(i, LateralViewContext);
    }
  }
  public whereClause(): WhereClauseContext | undefined {
    return this.tryGetRuleContext(0, WhereClauseContext);
  }
  public aggregationClause(): AggregationClauseContext | undefined {
    return this.tryGetRuleContext(0, AggregationClauseContext);
  }
  public havingClause(): HavingClauseContext | undefined {
    return this.tryGetRuleContext(0, HavingClauseContext);
  }
  public windowClause(): WindowClauseContext | undefined {
    return this.tryGetRuleContext(0, WindowClauseContext);
  }
  constructor(ctx: QuerySpecificationContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterTransformQuerySpecification) {
      listener.enterTransformQuerySpecification(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitTransformQuerySpecification) {
      listener.exitTransformQuerySpecification(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitTransformQuerySpecification) {
      return visitor.visitTransformQuerySpecification(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class RegularQuerySpecificationContext extends QuerySpecificationContext {
  public selectClause(): SelectClauseContext {
    return this.getRuleContext(0, SelectClauseContext);
  }
  public fromClause(): FromClauseContext | undefined {
    return this.tryGetRuleContext(0, FromClauseContext);
  }
  public lateralView(): LateralViewContext[];
  public lateralView(i: number): LateralViewContext;
  public lateralView(i?: number): LateralViewContext | LateralViewContext[] {
    if (i === undefined) {
      return this.getRuleContexts(LateralViewContext);
    } else {
      return this.getRuleContext(i, LateralViewContext);
    }
  }
  public whereClause(): WhereClauseContext | undefined {
    return this.tryGetRuleContext(0, WhereClauseContext);
  }
  public aggregationClause(): AggregationClauseContext | undefined {
    return this.tryGetRuleContext(0, AggregationClauseContext);
  }
  public havingClause(): HavingClauseContext | undefined {
    return this.tryGetRuleContext(0, HavingClauseContext);
  }
  public windowClause(): WindowClauseContext | undefined {
    return this.tryGetRuleContext(0, WindowClauseContext);
  }
  constructor(ctx: QuerySpecificationContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterRegularQuerySpecification) {
      listener.enterRegularQuerySpecification(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitRegularQuerySpecification) {
      listener.exitRegularQuerySpecification(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitRegularQuerySpecification) {
      return visitor.visitRegularQuerySpecification(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class TransformClauseContext extends ParserRuleContext {
  public _kind!: Token;
  public _inRowFormat!: RowFormatContext;
  public _recordWriter!: Token;
  public _script!: Token;
  public _outRowFormat!: RowFormatContext;
  public _recordReader!: Token;
  public USING(): TerminalNode {
    return this.getToken(SqlBaseParser.USING, 0);
  }
  public STRING(): TerminalNode[];
  public STRING(i: number): TerminalNode;
  public STRING(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(SqlBaseParser.STRING);
    } else {
      return this.getToken(SqlBaseParser.STRING, i);
    }
  }
  public SELECT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.SELECT, 0);
  }
  public expressionSeq(): ExpressionSeqContext | undefined {
    return this.tryGetRuleContext(0, ExpressionSeqContext);
  }
  public TRANSFORM(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.TRANSFORM, 0);
  }
  public MAP(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.MAP, 0);
  }
  public REDUCE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.REDUCE, 0);
  }
  public RECORDWRITER(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.RECORDWRITER, 0);
  }
  public AS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.AS, 0);
  }
  public RECORDREADER(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.RECORDREADER, 0);
  }
  public rowFormat(): RowFormatContext[];
  public rowFormat(i: number): RowFormatContext;
  public rowFormat(i?: number): RowFormatContext | RowFormatContext[] {
    if (i === undefined) {
      return this.getRuleContexts(RowFormatContext);
    } else {
      return this.getRuleContext(i, RowFormatContext);
    }
  }
  public setQuantifier(): SetQuantifierContext | undefined {
    return this.tryGetRuleContext(0, SetQuantifierContext);
  }
  public identifierSeq(): IdentifierSeqContext | undefined {
    return this.tryGetRuleContext(0, IdentifierSeqContext);
  }
  public colTypeList(): ColTypeListContext | undefined {
    return this.tryGetRuleContext(0, ColTypeListContext);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_transformClause;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterTransformClause) {
      listener.enterTransformClause(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitTransformClause) {
      listener.exitTransformClause(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitTransformClause) {
      return visitor.visitTransformClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class SelectClauseContext extends ParserRuleContext {
  public _hint!: HintContext;
  public _hints: HintContext[] = [];
  public SELECT(): TerminalNode {
    return this.getToken(SqlBaseParser.SELECT, 0);
  }
  public namedExpressionSeq(): NamedExpressionSeqContext {
    return this.getRuleContext(0, NamedExpressionSeqContext);
  }
  public setQuantifier(): SetQuantifierContext | undefined {
    return this.tryGetRuleContext(0, SetQuantifierContext);
  }
  public hint(): HintContext[];
  public hint(i: number): HintContext;
  public hint(i?: number): HintContext | HintContext[] {
    if (i === undefined) {
      return this.getRuleContexts(HintContext);
    } else {
      return this.getRuleContext(i, HintContext);
    }
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_selectClause;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterSelectClause) {
      listener.enterSelectClause(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitSelectClause) {
      listener.exitSelectClause(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitSelectClause) {
      return visitor.visitSelectClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class SetClauseContext extends ParserRuleContext {
  public SET(): TerminalNode {
    return this.getToken(SqlBaseParser.SET, 0);
  }
  public assignmentList(): AssignmentListContext {
    return this.getRuleContext(0, AssignmentListContext);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_setClause;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterSetClause) {
      listener.enterSetClause(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitSetClause) {
      listener.exitSetClause(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitSetClause) {
      return visitor.visitSetClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class MatchedClauseContext extends ParserRuleContext {
  public _matchedCond!: BooleanExpressionContext;
  public WHEN(): TerminalNode {
    return this.getToken(SqlBaseParser.WHEN, 0);
  }
  public MATCHED(): TerminalNode {
    return this.getToken(SqlBaseParser.MATCHED, 0);
  }
  public THEN(): TerminalNode {
    return this.getToken(SqlBaseParser.THEN, 0);
  }
  public matchedAction(): MatchedActionContext {
    return this.getRuleContext(0, MatchedActionContext);
  }
  public AND(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.AND, 0);
  }
  public booleanExpression(): BooleanExpressionContext | undefined {
    return this.tryGetRuleContext(0, BooleanExpressionContext);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_matchedClause;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterMatchedClause) {
      listener.enterMatchedClause(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitMatchedClause) {
      listener.exitMatchedClause(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitMatchedClause) {
      return visitor.visitMatchedClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class NotMatchedClauseContext extends ParserRuleContext {
  public _notMatchedCond!: BooleanExpressionContext;
  public WHEN(): TerminalNode {
    return this.getToken(SqlBaseParser.WHEN, 0);
  }
  public NOT(): TerminalNode {
    return this.getToken(SqlBaseParser.NOT, 0);
  }
  public MATCHED(): TerminalNode {
    return this.getToken(SqlBaseParser.MATCHED, 0);
  }
  public THEN(): TerminalNode {
    return this.getToken(SqlBaseParser.THEN, 0);
  }
  public notMatchedAction(): NotMatchedActionContext {
    return this.getRuleContext(0, NotMatchedActionContext);
  }
  public AND(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.AND, 0);
  }
  public booleanExpression(): BooleanExpressionContext | undefined {
    return this.tryGetRuleContext(0, BooleanExpressionContext);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_notMatchedClause;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterNotMatchedClause) {
      listener.enterNotMatchedClause(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitNotMatchedClause) {
      listener.exitNotMatchedClause(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitNotMatchedClause) {
      return visitor.visitNotMatchedClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class MatchedActionContext extends ParserRuleContext {
  public DELETE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DELETE, 0);
  }
  public UPDATE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.UPDATE, 0);
  }
  public SET(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.SET, 0);
  }
  public ASTERISK(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ASTERISK, 0);
  }
  public assignmentList(): AssignmentListContext | undefined {
    return this.tryGetRuleContext(0, AssignmentListContext);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_matchedAction;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterMatchedAction) {
      listener.enterMatchedAction(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitMatchedAction) {
      listener.exitMatchedAction(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitMatchedAction) {
      return visitor.visitMatchedAction(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class NotMatchedActionContext extends ParserRuleContext {
  public _columns!: MultipartIdentifierListContext;
  public INSERT(): TerminalNode {
    return this.getToken(SqlBaseParser.INSERT, 0);
  }
  public ASTERISK(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ASTERISK, 0);
  }
  public VALUES(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.VALUES, 0);
  }
  public expression(): ExpressionContext[];
  public expression(i: number): ExpressionContext;
  public expression(i?: number): ExpressionContext | ExpressionContext[] {
    if (i === undefined) {
      return this.getRuleContexts(ExpressionContext);
    } else {
      return this.getRuleContext(i, ExpressionContext);
    }
  }
  public multipartIdentifierList(): MultipartIdentifierListContext | undefined {
    return this.tryGetRuleContext(0, MultipartIdentifierListContext);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_notMatchedAction;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterNotMatchedAction) {
      listener.enterNotMatchedAction(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitNotMatchedAction) {
      listener.exitNotMatchedAction(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitNotMatchedAction) {
      return visitor.visitNotMatchedAction(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class AssignmentListContext extends ParserRuleContext {
  public assignment(): AssignmentContext[];
  public assignment(i: number): AssignmentContext;
  public assignment(i?: number): AssignmentContext | AssignmentContext[] {
    if (i === undefined) {
      return this.getRuleContexts(AssignmentContext);
    } else {
      return this.getRuleContext(i, AssignmentContext);
    }
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_assignmentList;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterAssignmentList) {
      listener.enterAssignmentList(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitAssignmentList) {
      listener.exitAssignmentList(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitAssignmentList) {
      return visitor.visitAssignmentList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class AssignmentContext extends ParserRuleContext {
  public _key!: MultipartIdentifierContext;
  public _value!: ExpressionContext;
  public EQ(): TerminalNode {
    return this.getToken(SqlBaseParser.EQ, 0);
  }
  public multipartIdentifier(): MultipartIdentifierContext {
    return this.getRuleContext(0, MultipartIdentifierContext);
  }
  public expression(): ExpressionContext {
    return this.getRuleContext(0, ExpressionContext);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_assignment;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterAssignment) {
      listener.enterAssignment(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitAssignment) {
      listener.exitAssignment(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitAssignment) {
      return visitor.visitAssignment(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class WhereClauseContext extends ParserRuleContext {
  public WHERE(): TerminalNode {
    return this.getToken(SqlBaseParser.WHERE, 0);
  }
  public booleanExpression(): BooleanExpressionContext {
    return this.getRuleContext(0, BooleanExpressionContext);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_whereClause;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterWhereClause) {
      listener.enterWhereClause(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitWhereClause) {
      listener.exitWhereClause(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitWhereClause) {
      return visitor.visitWhereClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class HavingClauseContext extends ParserRuleContext {
  public HAVING(): TerminalNode {
    return this.getToken(SqlBaseParser.HAVING, 0);
  }
  public booleanExpression(): BooleanExpressionContext {
    return this.getRuleContext(0, BooleanExpressionContext);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_havingClause;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterHavingClause) {
      listener.enterHavingClause(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitHavingClause) {
      listener.exitHavingClause(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitHavingClause) {
      return visitor.visitHavingClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class HintContext extends ParserRuleContext {
  public _hintStatement!: HintStatementContext;
  public _hintStatements: HintStatementContext[] = [];
  public hintStatement(): HintStatementContext[];
  public hintStatement(i: number): HintStatementContext;
  public hintStatement(i?: number): HintStatementContext | HintStatementContext[] {
    if (i === undefined) {
      return this.getRuleContexts(HintStatementContext);
    } else {
      return this.getRuleContext(i, HintStatementContext);
    }
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_hint;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterHint) {
      listener.enterHint(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitHint) {
      listener.exitHint(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitHint) {
      return visitor.visitHint(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class HintStatementContext extends ParserRuleContext {
  public _hintName!: IdentifierContext;
  public _primaryExpression!: PrimaryExpressionContext;
  public _parameters: PrimaryExpressionContext[] = [];
  public identifier(): IdentifierContext {
    return this.getRuleContext(0, IdentifierContext);
  }
  public primaryExpression(): PrimaryExpressionContext[];
  public primaryExpression(i: number): PrimaryExpressionContext;
  public primaryExpression(i?: number): PrimaryExpressionContext | PrimaryExpressionContext[] {
    if (i === undefined) {
      return this.getRuleContexts(PrimaryExpressionContext);
    } else {
      return this.getRuleContext(i, PrimaryExpressionContext);
    }
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_hintStatement;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterHintStatement) {
      listener.enterHintStatement(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitHintStatement) {
      listener.exitHintStatement(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitHintStatement) {
      return visitor.visitHintStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class FromClauseContext extends ParserRuleContext {
  public FROM(): TerminalNode {
    return this.getToken(SqlBaseParser.FROM, 0);
  }
  public relation(): RelationContext[];
  public relation(i: number): RelationContext;
  public relation(i?: number): RelationContext | RelationContext[] {
    if (i === undefined) {
      return this.getRuleContexts(RelationContext);
    } else {
      return this.getRuleContext(i, RelationContext);
    }
  }
  public lateralView(): LateralViewContext[];
  public lateralView(i: number): LateralViewContext;
  public lateralView(i?: number): LateralViewContext | LateralViewContext[] {
    if (i === undefined) {
      return this.getRuleContexts(LateralViewContext);
    } else {
      return this.getRuleContext(i, LateralViewContext);
    }
  }
  public pivotClause(): PivotClauseContext | undefined {
    return this.tryGetRuleContext(0, PivotClauseContext);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_fromClause;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterFromClause) {
      listener.enterFromClause(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitFromClause) {
      listener.exitFromClause(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitFromClause) {
      return visitor.visitFromClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class AggregationClauseContext extends ParserRuleContext {
  public _groupByClause!: GroupByClauseContext;
  public _groupingExpressionsWithGroupingAnalytics: GroupByClauseContext[] = [];
  public _expression!: ExpressionContext;
  public _groupingExpressions: ExpressionContext[] = [];
  public _kind!: Token;
  public GROUP(): TerminalNode {
    return this.getToken(SqlBaseParser.GROUP, 0);
  }
  public BY(): TerminalNode {
    return this.getToken(SqlBaseParser.BY, 0);
  }
  public groupByClause(): GroupByClauseContext[];
  public groupByClause(i: number): GroupByClauseContext;
  public groupByClause(i?: number): GroupByClauseContext | GroupByClauseContext[] {
    if (i === undefined) {
      return this.getRuleContexts(GroupByClauseContext);
    } else {
      return this.getRuleContext(i, GroupByClauseContext);
    }
  }
  public expression(): ExpressionContext[];
  public expression(i: number): ExpressionContext;
  public expression(i?: number): ExpressionContext | ExpressionContext[] {
    if (i === undefined) {
      return this.getRuleContexts(ExpressionContext);
    } else {
      return this.getRuleContext(i, ExpressionContext);
    }
  }
  public WITH(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.WITH, 0);
  }
  public SETS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.SETS, 0);
  }
  public groupingSet(): GroupingSetContext[];
  public groupingSet(i: number): GroupingSetContext;
  public groupingSet(i?: number): GroupingSetContext | GroupingSetContext[] {
    if (i === undefined) {
      return this.getRuleContexts(GroupingSetContext);
    } else {
      return this.getRuleContext(i, GroupingSetContext);
    }
  }
  public ROLLUP(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ROLLUP, 0);
  }
  public CUBE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.CUBE, 0);
  }
  public GROUPING(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.GROUPING, 0);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_aggregationClause;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterAggregationClause) {
      listener.enterAggregationClause(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitAggregationClause) {
      listener.exitAggregationClause(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitAggregationClause) {
      return visitor.visitAggregationClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class GroupByClauseContext extends ParserRuleContext {
  public groupingAnalytics(): GroupingAnalyticsContext | undefined {
    return this.tryGetRuleContext(0, GroupingAnalyticsContext);
  }
  public expression(): ExpressionContext | undefined {
    return this.tryGetRuleContext(0, ExpressionContext);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_groupByClause;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterGroupByClause) {
      listener.enterGroupByClause(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitGroupByClause) {
      listener.exitGroupByClause(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitGroupByClause) {
      return visitor.visitGroupByClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class GroupingAnalyticsContext extends ParserRuleContext {
  public groupingSet(): GroupingSetContext[];
  public groupingSet(i: number): GroupingSetContext;
  public groupingSet(i?: number): GroupingSetContext | GroupingSetContext[] {
    if (i === undefined) {
      return this.getRuleContexts(GroupingSetContext);
    } else {
      return this.getRuleContext(i, GroupingSetContext);
    }
  }
  public ROLLUP(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ROLLUP, 0);
  }
  public CUBE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.CUBE, 0);
  }
  public GROUPING(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.GROUPING, 0);
  }
  public SETS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.SETS, 0);
  }
  public groupingElement(): GroupingElementContext[];
  public groupingElement(i: number): GroupingElementContext;
  public groupingElement(i?: number): GroupingElementContext | GroupingElementContext[] {
    if (i === undefined) {
      return this.getRuleContexts(GroupingElementContext);
    } else {
      return this.getRuleContext(i, GroupingElementContext);
    }
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_groupingAnalytics;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterGroupingAnalytics) {
      listener.enterGroupingAnalytics(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitGroupingAnalytics) {
      listener.exitGroupingAnalytics(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitGroupingAnalytics) {
      return visitor.visitGroupingAnalytics(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class GroupingElementContext extends ParserRuleContext {
  public groupingAnalytics(): GroupingAnalyticsContext | undefined {
    return this.tryGetRuleContext(0, GroupingAnalyticsContext);
  }
  public groupingSet(): GroupingSetContext | undefined {
    return this.tryGetRuleContext(0, GroupingSetContext);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_groupingElement;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterGroupingElement) {
      listener.enterGroupingElement(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitGroupingElement) {
      listener.exitGroupingElement(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitGroupingElement) {
      return visitor.visitGroupingElement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class GroupingSetContext extends ParserRuleContext {
  public expression(): ExpressionContext[];
  public expression(i: number): ExpressionContext;
  public expression(i?: number): ExpressionContext | ExpressionContext[] {
    if (i === undefined) {
      return this.getRuleContexts(ExpressionContext);
    } else {
      return this.getRuleContext(i, ExpressionContext);
    }
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_groupingSet;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterGroupingSet) {
      listener.enterGroupingSet(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitGroupingSet) {
      listener.exitGroupingSet(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitGroupingSet) {
      return visitor.visitGroupingSet(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class PivotClauseContext extends ParserRuleContext {
  public _aggregates!: NamedExpressionSeqContext;
  public _pivotValue!: PivotValueContext;
  public _pivotValues: PivotValueContext[] = [];
  public PIVOT(): TerminalNode {
    return this.getToken(SqlBaseParser.PIVOT, 0);
  }
  public FOR(): TerminalNode {
    return this.getToken(SqlBaseParser.FOR, 0);
  }
  public pivotColumn(): PivotColumnContext {
    return this.getRuleContext(0, PivotColumnContext);
  }
  public IN(): TerminalNode {
    return this.getToken(SqlBaseParser.IN, 0);
  }
  public namedExpressionSeq(): NamedExpressionSeqContext {
    return this.getRuleContext(0, NamedExpressionSeqContext);
  }
  public pivotValue(): PivotValueContext[];
  public pivotValue(i: number): PivotValueContext;
  public pivotValue(i?: number): PivotValueContext | PivotValueContext[] {
    if (i === undefined) {
      return this.getRuleContexts(PivotValueContext);
    } else {
      return this.getRuleContext(i, PivotValueContext);
    }
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_pivotClause;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterPivotClause) {
      listener.enterPivotClause(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitPivotClause) {
      listener.exitPivotClause(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitPivotClause) {
      return visitor.visitPivotClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class PivotColumnContext extends ParserRuleContext {
  public _identifier!: IdentifierContext;
  public _identifiers: IdentifierContext[] = [];
  public identifier(): IdentifierContext[];
  public identifier(i: number): IdentifierContext;
  public identifier(i?: number): IdentifierContext | IdentifierContext[] {
    if (i === undefined) {
      return this.getRuleContexts(IdentifierContext);
    } else {
      return this.getRuleContext(i, IdentifierContext);
    }
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_pivotColumn;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterPivotColumn) {
      listener.enterPivotColumn(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitPivotColumn) {
      listener.exitPivotColumn(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitPivotColumn) {
      return visitor.visitPivotColumn(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class PivotValueContext extends ParserRuleContext {
  public expression(): ExpressionContext {
    return this.getRuleContext(0, ExpressionContext);
  }
  public identifier(): IdentifierContext | undefined {
    return this.tryGetRuleContext(0, IdentifierContext);
  }
  public AS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.AS, 0);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_pivotValue;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterPivotValue) {
      listener.enterPivotValue(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitPivotValue) {
      listener.exitPivotValue(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitPivotValue) {
      return visitor.visitPivotValue(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class LateralViewContext extends ParserRuleContext {
  public _tblName!: IdentifierContext;
  public _identifier!: IdentifierContext;
  public _colName: IdentifierContext[] = [];
  public LATERAL(): TerminalNode {
    return this.getToken(SqlBaseParser.LATERAL, 0);
  }
  public VIEW(): TerminalNode {
    return this.getToken(SqlBaseParser.VIEW, 0);
  }
  public qualifiedName(): QualifiedNameContext {
    return this.getRuleContext(0, QualifiedNameContext);
  }
  public identifier(): IdentifierContext[];
  public identifier(i: number): IdentifierContext;
  public identifier(i?: number): IdentifierContext | IdentifierContext[] {
    if (i === undefined) {
      return this.getRuleContexts(IdentifierContext);
    } else {
      return this.getRuleContext(i, IdentifierContext);
    }
  }
  public OUTER(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.OUTER, 0);
  }
  public expression(): ExpressionContext[];
  public expression(i: number): ExpressionContext;
  public expression(i?: number): ExpressionContext | ExpressionContext[] {
    if (i === undefined) {
      return this.getRuleContexts(ExpressionContext);
    } else {
      return this.getRuleContext(i, ExpressionContext);
    }
  }
  public AS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.AS, 0);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_lateralView;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterLateralView) {
      listener.enterLateralView(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitLateralView) {
      listener.exitLateralView(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitLateralView) {
      return visitor.visitLateralView(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class SetQuantifierContext extends ParserRuleContext {
  public DISTINCT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DISTINCT, 0);
  }
  public ALL(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ALL, 0);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_setQuantifier;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterSetQuantifier) {
      listener.enterSetQuantifier(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitSetQuantifier) {
      listener.exitSetQuantifier(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitSetQuantifier) {
      return visitor.visitSetQuantifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class RelationContext extends ParserRuleContext {
  public relationPrimary(): RelationPrimaryContext {
    return this.getRuleContext(0, RelationPrimaryContext);
  }
  public LATERAL(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.LATERAL, 0);
  }
  public joinRelation(): JoinRelationContext[];
  public joinRelation(i: number): JoinRelationContext;
  public joinRelation(i?: number): JoinRelationContext | JoinRelationContext[] {
    if (i === undefined) {
      return this.getRuleContexts(JoinRelationContext);
    } else {
      return this.getRuleContext(i, JoinRelationContext);
    }
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_relation;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterRelation) {
      listener.enterRelation(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitRelation) {
      listener.exitRelation(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitRelation) {
      return visitor.visitRelation(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class JoinRelationContext extends ParserRuleContext {
  public _right!: RelationPrimaryContext;
  public JOIN(): TerminalNode {
    return this.getToken(SqlBaseParser.JOIN, 0);
  }
  public relationPrimary(): RelationPrimaryContext {
    return this.getRuleContext(0, RelationPrimaryContext);
  }
  public joinType(): JoinTypeContext | undefined {
    return this.tryGetRuleContext(0, JoinTypeContext);
  }
  public LATERAL(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.LATERAL, 0);
  }
  public joinCriteria(): JoinCriteriaContext | undefined {
    return this.tryGetRuleContext(0, JoinCriteriaContext);
  }
  public NATURAL(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.NATURAL, 0);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_joinRelation;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterJoinRelation) {
      listener.enterJoinRelation(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitJoinRelation) {
      listener.exitJoinRelation(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitJoinRelation) {
      return visitor.visitJoinRelation(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class JoinTypeContext extends ParserRuleContext {
  public INNER(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.INNER, 0);
  }
  public CROSS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.CROSS, 0);
  }
  public LEFT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.LEFT, 0);
  }
  public OUTER(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.OUTER, 0);
  }
  public SEMI(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.SEMI, 0);
  }
  public RIGHT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.RIGHT, 0);
  }
  public FULL(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.FULL, 0);
  }
  public ANTI(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ANTI, 0);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_joinType;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterJoinType) {
      listener.enterJoinType(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitJoinType) {
      listener.exitJoinType(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitJoinType) {
      return visitor.visitJoinType(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class JoinCriteriaContext extends ParserRuleContext {
  public ON(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ON, 0);
  }
  public booleanExpression(): BooleanExpressionContext | undefined {
    return this.tryGetRuleContext(0, BooleanExpressionContext);
  }
  public USING(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.USING, 0);
  }
  public identifierList(): IdentifierListContext | undefined {
    return this.tryGetRuleContext(0, IdentifierListContext);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_joinCriteria;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterJoinCriteria) {
      listener.enterJoinCriteria(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitJoinCriteria) {
      listener.exitJoinCriteria(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitJoinCriteria) {
      return visitor.visitJoinCriteria(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class SampleContext extends ParserRuleContext {
  public TABLESAMPLE(): TerminalNode {
    return this.getToken(SqlBaseParser.TABLESAMPLE, 0);
  }
  public sampleMethod(): SampleMethodContext | undefined {
    return this.tryGetRuleContext(0, SampleMethodContext);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_sample;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterSample) {
      listener.enterSample(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitSample) {
      listener.exitSample(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitSample) {
      return visitor.visitSample(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class SampleMethodContext extends ParserRuleContext {
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_sampleMethod;
  }
  public copyFrom(ctx: SampleMethodContext): void {
    super.copyFrom(ctx);
  }
}
export class SampleByPercentileContext extends SampleMethodContext {
  public _negativeSign!: Token;
  public _percentage!: Token;
  public PERCENTLIT(): TerminalNode {
    return this.getToken(SqlBaseParser.PERCENTLIT, 0);
  }
  public INTEGER_VALUE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.INTEGER_VALUE, 0);
  }
  public DECIMAL_VALUE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DECIMAL_VALUE, 0);
  }
  public MINUS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.MINUS, 0);
  }
  constructor(ctx: SampleMethodContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterSampleByPercentile) {
      listener.enterSampleByPercentile(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitSampleByPercentile) {
      listener.exitSampleByPercentile(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitSampleByPercentile) {
      return visitor.visitSampleByPercentile(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class SampleByRowsContext extends SampleMethodContext {
  public expression(): ExpressionContext {
    return this.getRuleContext(0, ExpressionContext);
  }
  public ROWS(): TerminalNode {
    return this.getToken(SqlBaseParser.ROWS, 0);
  }
  constructor(ctx: SampleMethodContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterSampleByRows) {
      listener.enterSampleByRows(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitSampleByRows) {
      listener.exitSampleByRows(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitSampleByRows) {
      return visitor.visitSampleByRows(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class SampleByBucketContext extends SampleMethodContext {
  public _sampleType!: Token;
  public _numerator!: Token;
  public _denominator!: Token;
  public OUT(): TerminalNode {
    return this.getToken(SqlBaseParser.OUT, 0);
  }
  public OF(): TerminalNode {
    return this.getToken(SqlBaseParser.OF, 0);
  }
  public BUCKET(): TerminalNode {
    return this.getToken(SqlBaseParser.BUCKET, 0);
  }
  public INTEGER_VALUE(): TerminalNode[];
  public INTEGER_VALUE(i: number): TerminalNode;
  public INTEGER_VALUE(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(SqlBaseParser.INTEGER_VALUE);
    } else {
      return this.getToken(SqlBaseParser.INTEGER_VALUE, i);
    }
  }
  public ON(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ON, 0);
  }
  public identifier(): IdentifierContext | undefined {
    return this.tryGetRuleContext(0, IdentifierContext);
  }
  public qualifiedName(): QualifiedNameContext | undefined {
    return this.tryGetRuleContext(0, QualifiedNameContext);
  }
  constructor(ctx: SampleMethodContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterSampleByBucket) {
      listener.enterSampleByBucket(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitSampleByBucket) {
      listener.exitSampleByBucket(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitSampleByBucket) {
      return visitor.visitSampleByBucket(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class SampleByBytesContext extends SampleMethodContext {
  public _bytes!: ExpressionContext;
  public expression(): ExpressionContext {
    return this.getRuleContext(0, ExpressionContext);
  }
  constructor(ctx: SampleMethodContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterSampleByBytes) {
      listener.enterSampleByBytes(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitSampleByBytes) {
      listener.exitSampleByBytes(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitSampleByBytes) {
      return visitor.visitSampleByBytes(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class IdentifierListContext extends ParserRuleContext {
  public identifierSeq(): IdentifierSeqContext {
    return this.getRuleContext(0, IdentifierSeqContext);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_identifierList;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterIdentifierList) {
      listener.enterIdentifierList(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitIdentifierList) {
      listener.exitIdentifierList(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitIdentifierList) {
      return visitor.visitIdentifierList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class IdentifierSeqContext extends ParserRuleContext {
  public _errorCapturingIdentifier!: ErrorCapturingIdentifierContext;
  public _ident: ErrorCapturingIdentifierContext[] = [];
  public errorCapturingIdentifier(): ErrorCapturingIdentifierContext[];
  public errorCapturingIdentifier(i: number): ErrorCapturingIdentifierContext;
  public errorCapturingIdentifier(i?: number): ErrorCapturingIdentifierContext | ErrorCapturingIdentifierContext[] {
    if (i === undefined) {
      return this.getRuleContexts(ErrorCapturingIdentifierContext);
    } else {
      return this.getRuleContext(i, ErrorCapturingIdentifierContext);
    }
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_identifierSeq;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterIdentifierSeq) {
      listener.enterIdentifierSeq(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitIdentifierSeq) {
      listener.exitIdentifierSeq(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitIdentifierSeq) {
      return visitor.visitIdentifierSeq(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class OrderedIdentifierListContext extends ParserRuleContext {
  public orderedIdentifier(): OrderedIdentifierContext[];
  public orderedIdentifier(i: number): OrderedIdentifierContext;
  public orderedIdentifier(i?: number): OrderedIdentifierContext | OrderedIdentifierContext[] {
    if (i === undefined) {
      return this.getRuleContexts(OrderedIdentifierContext);
    } else {
      return this.getRuleContext(i, OrderedIdentifierContext);
    }
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_orderedIdentifierList;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterOrderedIdentifierList) {
      listener.enterOrderedIdentifierList(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitOrderedIdentifierList) {
      listener.exitOrderedIdentifierList(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitOrderedIdentifierList) {
      return visitor.visitOrderedIdentifierList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class OrderedIdentifierContext extends ParserRuleContext {
  public _ident!: ErrorCapturingIdentifierContext;
  public _ordering!: Token;
  public errorCapturingIdentifier(): ErrorCapturingIdentifierContext {
    return this.getRuleContext(0, ErrorCapturingIdentifierContext);
  }
  public ASC(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ASC, 0);
  }
  public DESC(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DESC, 0);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_orderedIdentifier;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterOrderedIdentifier) {
      listener.enterOrderedIdentifier(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitOrderedIdentifier) {
      listener.exitOrderedIdentifier(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitOrderedIdentifier) {
      return visitor.visitOrderedIdentifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class IdentifierCommentListContext extends ParserRuleContext {
  public identifierComment(): IdentifierCommentContext[];
  public identifierComment(i: number): IdentifierCommentContext;
  public identifierComment(i?: number): IdentifierCommentContext | IdentifierCommentContext[] {
    if (i === undefined) {
      return this.getRuleContexts(IdentifierCommentContext);
    } else {
      return this.getRuleContext(i, IdentifierCommentContext);
    }
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_identifierCommentList;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterIdentifierCommentList) {
      listener.enterIdentifierCommentList(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitIdentifierCommentList) {
      listener.exitIdentifierCommentList(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitIdentifierCommentList) {
      return visitor.visitIdentifierCommentList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class IdentifierCommentContext extends ParserRuleContext {
  public identifier(): IdentifierContext {
    return this.getRuleContext(0, IdentifierContext);
  }
  public commentSpec(): CommentSpecContext | undefined {
    return this.tryGetRuleContext(0, CommentSpecContext);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_identifierComment;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterIdentifierComment) {
      listener.enterIdentifierComment(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitIdentifierComment) {
      listener.exitIdentifierComment(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitIdentifierComment) {
      return visitor.visitIdentifierComment(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class RelationPrimaryContext extends ParserRuleContext {
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_relationPrimary;
  }
  public copyFrom(ctx: RelationPrimaryContext): void {
    super.copyFrom(ctx);
  }
}
export class TableNameContext extends RelationPrimaryContext {
  public multipartIdentifier(): MultipartIdentifierContext {
    return this.getRuleContext(0, MultipartIdentifierContext);
  }
  public tableAlias(): TableAliasContext {
    return this.getRuleContext(0, TableAliasContext);
  }
  public sample(): SampleContext | undefined {
    return this.tryGetRuleContext(0, SampleContext);
  }
  constructor(ctx: RelationPrimaryContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterTableName) {
      listener.enterTableName(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitTableName) {
      listener.exitTableName(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitTableName) {
      return visitor.visitTableName(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class AliasedQueryContext extends RelationPrimaryContext {
  public query(): QueryContext {
    return this.getRuleContext(0, QueryContext);
  }
  public tableAlias(): TableAliasContext {
    return this.getRuleContext(0, TableAliasContext);
  }
  public sample(): SampleContext | undefined {
    return this.tryGetRuleContext(0, SampleContext);
  }
  constructor(ctx: RelationPrimaryContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterAliasedQuery) {
      listener.enterAliasedQuery(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitAliasedQuery) {
      listener.exitAliasedQuery(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitAliasedQuery) {
      return visitor.visitAliasedQuery(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class AliasedRelationContext extends RelationPrimaryContext {
  public relation(): RelationContext {
    return this.getRuleContext(0, RelationContext);
  }
  public tableAlias(): TableAliasContext {
    return this.getRuleContext(0, TableAliasContext);
  }
  public sample(): SampleContext | undefined {
    return this.tryGetRuleContext(0, SampleContext);
  }
  constructor(ctx: RelationPrimaryContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterAliasedRelation) {
      listener.enterAliasedRelation(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitAliasedRelation) {
      listener.exitAliasedRelation(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitAliasedRelation) {
      return visitor.visitAliasedRelation(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class InlineTableDefault2Context extends RelationPrimaryContext {
  public inlineTable(): InlineTableContext {
    return this.getRuleContext(0, InlineTableContext);
  }
  constructor(ctx: RelationPrimaryContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterInlineTableDefault2) {
      listener.enterInlineTableDefault2(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitInlineTableDefault2) {
      listener.exitInlineTableDefault2(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitInlineTableDefault2) {
      return visitor.visitInlineTableDefault2(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class TableValuedFunctionContext extends RelationPrimaryContext {
  public functionTable(): FunctionTableContext {
    return this.getRuleContext(0, FunctionTableContext);
  }
  constructor(ctx: RelationPrimaryContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterTableValuedFunction) {
      listener.enterTableValuedFunction(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitTableValuedFunction) {
      listener.exitTableValuedFunction(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitTableValuedFunction) {
      return visitor.visitTableValuedFunction(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class InlineTableContext extends ParserRuleContext {
  public VALUES(): TerminalNode {
    return this.getToken(SqlBaseParser.VALUES, 0);
  }
  public expression(): ExpressionContext[];
  public expression(i: number): ExpressionContext;
  public expression(i?: number): ExpressionContext | ExpressionContext[] {
    if (i === undefined) {
      return this.getRuleContexts(ExpressionContext);
    } else {
      return this.getRuleContext(i, ExpressionContext);
    }
  }
  public tableAlias(): TableAliasContext {
    return this.getRuleContext(0, TableAliasContext);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_inlineTable;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterInlineTable) {
      listener.enterInlineTable(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitInlineTable) {
      listener.exitInlineTable(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitInlineTable) {
      return visitor.visitInlineTable(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class FunctionTableContext extends ParserRuleContext {
  public _funcName!: FunctionNameContext;
  public tableAlias(): TableAliasContext {
    return this.getRuleContext(0, TableAliasContext);
  }
  public functionName(): FunctionNameContext {
    return this.getRuleContext(0, FunctionNameContext);
  }
  public expression(): ExpressionContext[];
  public expression(i: number): ExpressionContext;
  public expression(i?: number): ExpressionContext | ExpressionContext[] {
    if (i === undefined) {
      return this.getRuleContexts(ExpressionContext);
    } else {
      return this.getRuleContext(i, ExpressionContext);
    }
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_functionTable;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterFunctionTable) {
      listener.enterFunctionTable(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitFunctionTable) {
      listener.exitFunctionTable(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitFunctionTable) {
      return visitor.visitFunctionTable(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class TableAliasContext extends ParserRuleContext {
  public strictIdentifier(): StrictIdentifierContext | undefined {
    return this.tryGetRuleContext(0, StrictIdentifierContext);
  }
  public AS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.AS, 0);
  }
  public identifierList(): IdentifierListContext | undefined {
    return this.tryGetRuleContext(0, IdentifierListContext);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_tableAlias;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterTableAlias) {
      listener.enterTableAlias(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitTableAlias) {
      listener.exitTableAlias(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitTableAlias) {
      return visitor.visitTableAlias(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class RowFormatContext extends ParserRuleContext {
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_rowFormat;
  }
  public copyFrom(ctx: RowFormatContext): void {
    super.copyFrom(ctx);
  }
}
export class RowFormatSerdeContext extends RowFormatContext {
  public _name!: Token;
  public _props!: TablePropertyListContext;
  public ROW(): TerminalNode {
    return this.getToken(SqlBaseParser.ROW, 0);
  }
  public FORMAT(): TerminalNode {
    return this.getToken(SqlBaseParser.FORMAT, 0);
  }
  public SERDE(): TerminalNode {
    return this.getToken(SqlBaseParser.SERDE, 0);
  }
  public STRING(): TerminalNode {
    return this.getToken(SqlBaseParser.STRING, 0);
  }
  public WITH(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.WITH, 0);
  }
  public SERDEPROPERTIES(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.SERDEPROPERTIES, 0);
  }
  public tablePropertyList(): TablePropertyListContext | undefined {
    return this.tryGetRuleContext(0, TablePropertyListContext);
  }
  constructor(ctx: RowFormatContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterRowFormatSerde) {
      listener.enterRowFormatSerde(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitRowFormatSerde) {
      listener.exitRowFormatSerde(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitRowFormatSerde) {
      return visitor.visitRowFormatSerde(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class RowFormatDelimitedContext extends RowFormatContext {
  public _fieldsTerminatedBy!: Token;
  public _escapedBy!: Token;
  public _collectionItemsTerminatedBy!: Token;
  public _keysTerminatedBy!: Token;
  public _linesSeparatedBy!: Token;
  public _nullDefinedAs!: Token;
  public ROW(): TerminalNode {
    return this.getToken(SqlBaseParser.ROW, 0);
  }
  public FORMAT(): TerminalNode {
    return this.getToken(SqlBaseParser.FORMAT, 0);
  }
  public DELIMITED(): TerminalNode {
    return this.getToken(SqlBaseParser.DELIMITED, 0);
  }
  public FIELDS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.FIELDS, 0);
  }
  public TERMINATED(): TerminalNode[];
  public TERMINATED(i: number): TerminalNode;
  public TERMINATED(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(SqlBaseParser.TERMINATED);
    } else {
      return this.getToken(SqlBaseParser.TERMINATED, i);
    }
  }
  public BY(): TerminalNode[];
  public BY(i: number): TerminalNode;
  public BY(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(SqlBaseParser.BY);
    } else {
      return this.getToken(SqlBaseParser.BY, i);
    }
  }
  public COLLECTION(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.COLLECTION, 0);
  }
  public ITEMS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ITEMS, 0);
  }
  public MAP(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.MAP, 0);
  }
  public KEYS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.KEYS, 0);
  }
  public LINES(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.LINES, 0);
  }
  public NULL(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.NULL, 0);
  }
  public DEFINED(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DEFINED, 0);
  }
  public AS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.AS, 0);
  }
  public STRING(): TerminalNode[];
  public STRING(i: number): TerminalNode;
  public STRING(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(SqlBaseParser.STRING);
    } else {
      return this.getToken(SqlBaseParser.STRING, i);
    }
  }
  public ESCAPED(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ESCAPED, 0);
  }
  constructor(ctx: RowFormatContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterRowFormatDelimited) {
      listener.enterRowFormatDelimited(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitRowFormatDelimited) {
      listener.exitRowFormatDelimited(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitRowFormatDelimited) {
      return visitor.visitRowFormatDelimited(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class MultipartIdentifierListContext extends ParserRuleContext {
  public multipartIdentifier(): MultipartIdentifierContext[];
  public multipartIdentifier(i: number): MultipartIdentifierContext;
  public multipartIdentifier(i?: number): MultipartIdentifierContext | MultipartIdentifierContext[] {
    if (i === undefined) {
      return this.getRuleContexts(MultipartIdentifierContext);
    } else {
      return this.getRuleContext(i, MultipartIdentifierContext);
    }
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_multipartIdentifierList;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterMultipartIdentifierList) {
      listener.enterMultipartIdentifierList(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitMultipartIdentifierList) {
      listener.exitMultipartIdentifierList(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitMultipartIdentifierList) {
      return visitor.visitMultipartIdentifierList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class MultipartIdentifierContext extends ParserRuleContext {
  public _errorCapturingIdentifier!: ErrorCapturingIdentifierContext;
  public _parts: ErrorCapturingIdentifierContext[] = [];
  public errorCapturingIdentifier(): ErrorCapturingIdentifierContext[];
  public errorCapturingIdentifier(i: number): ErrorCapturingIdentifierContext;
  public errorCapturingIdentifier(i?: number): ErrorCapturingIdentifierContext | ErrorCapturingIdentifierContext[] {
    if (i === undefined) {
      return this.getRuleContexts(ErrorCapturingIdentifierContext);
    } else {
      return this.getRuleContext(i, ErrorCapturingIdentifierContext);
    }
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_multipartIdentifier;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterMultipartIdentifier) {
      listener.enterMultipartIdentifier(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitMultipartIdentifier) {
      listener.exitMultipartIdentifier(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitMultipartIdentifier) {
      return visitor.visitMultipartIdentifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class TableIdentifierContext extends ParserRuleContext {
  public _db!: ErrorCapturingIdentifierContext;
  public _table!: ErrorCapturingIdentifierContext;
  public errorCapturingIdentifier(): ErrorCapturingIdentifierContext[];
  public errorCapturingIdentifier(i: number): ErrorCapturingIdentifierContext;
  public errorCapturingIdentifier(i?: number): ErrorCapturingIdentifierContext | ErrorCapturingIdentifierContext[] {
    if (i === undefined) {
      return this.getRuleContexts(ErrorCapturingIdentifierContext);
    } else {
      return this.getRuleContext(i, ErrorCapturingIdentifierContext);
    }
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_tableIdentifier;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterTableIdentifier) {
      listener.enterTableIdentifier(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitTableIdentifier) {
      listener.exitTableIdentifier(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitTableIdentifier) {
      return visitor.visitTableIdentifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class FunctionIdentifierContext extends ParserRuleContext {
  public _db!: ErrorCapturingIdentifierContext;
  public _funcName!: ErrorCapturingIdentifierContext;
  public errorCapturingIdentifier(): ErrorCapturingIdentifierContext[];
  public errorCapturingIdentifier(i: number): ErrorCapturingIdentifierContext;
  public errorCapturingIdentifier(i?: number): ErrorCapturingIdentifierContext | ErrorCapturingIdentifierContext[] {
    if (i === undefined) {
      return this.getRuleContexts(ErrorCapturingIdentifierContext);
    } else {
      return this.getRuleContext(i, ErrorCapturingIdentifierContext);
    }
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_functionIdentifier;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterFunctionIdentifier) {
      listener.enterFunctionIdentifier(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitFunctionIdentifier) {
      listener.exitFunctionIdentifier(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitFunctionIdentifier) {
      return visitor.visitFunctionIdentifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class NamedExpressionContext extends ParserRuleContext {
  public _name!: ErrorCapturingIdentifierContext;
  public expression(): ExpressionContext {
    return this.getRuleContext(0, ExpressionContext);
  }
  public identifierList(): IdentifierListContext | undefined {
    return this.tryGetRuleContext(0, IdentifierListContext);
  }
  public AS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.AS, 0);
  }
  public errorCapturingIdentifier(): ErrorCapturingIdentifierContext | undefined {
    return this.tryGetRuleContext(0, ErrorCapturingIdentifierContext);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_namedExpression;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterNamedExpression) {
      listener.enterNamedExpression(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitNamedExpression) {
      listener.exitNamedExpression(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitNamedExpression) {
      return visitor.visitNamedExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class NamedExpressionSeqContext extends ParserRuleContext {
  public namedExpression(): NamedExpressionContext[];
  public namedExpression(i: number): NamedExpressionContext;
  public namedExpression(i?: number): NamedExpressionContext | NamedExpressionContext[] {
    if (i === undefined) {
      return this.getRuleContexts(NamedExpressionContext);
    } else {
      return this.getRuleContext(i, NamedExpressionContext);
    }
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_namedExpressionSeq;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterNamedExpressionSeq) {
      listener.enterNamedExpressionSeq(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitNamedExpressionSeq) {
      listener.exitNamedExpressionSeq(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitNamedExpressionSeq) {
      return visitor.visitNamedExpressionSeq(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class PartitionFieldListContext extends ParserRuleContext {
  public _partitionField!: PartitionFieldContext;
  public _fields: PartitionFieldContext[] = [];
  public partitionField(): PartitionFieldContext[];
  public partitionField(i: number): PartitionFieldContext;
  public partitionField(i?: number): PartitionFieldContext | PartitionFieldContext[] {
    if (i === undefined) {
      return this.getRuleContexts(PartitionFieldContext);
    } else {
      return this.getRuleContext(i, PartitionFieldContext);
    }
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_partitionFieldList;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterPartitionFieldList) {
      listener.enterPartitionFieldList(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitPartitionFieldList) {
      listener.exitPartitionFieldList(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitPartitionFieldList) {
      return visitor.visitPartitionFieldList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class PartitionFieldContext extends ParserRuleContext {
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_partitionField;
  }
  public copyFrom(ctx: PartitionFieldContext): void {
    super.copyFrom(ctx);
  }
}
export class PartitionTransformContext extends PartitionFieldContext {
  public transform(): TransformContext {
    return this.getRuleContext(0, TransformContext);
  }
  constructor(ctx: PartitionFieldContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterPartitionTransform) {
      listener.enterPartitionTransform(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitPartitionTransform) {
      listener.exitPartitionTransform(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitPartitionTransform) {
      return visitor.visitPartitionTransform(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class PartitionColumnContext extends PartitionFieldContext {
  public colType(): ColTypeContext {
    return this.getRuleContext(0, ColTypeContext);
  }
  constructor(ctx: PartitionFieldContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterPartitionColumn) {
      listener.enterPartitionColumn(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitPartitionColumn) {
      listener.exitPartitionColumn(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitPartitionColumn) {
      return visitor.visitPartitionColumn(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class TransformContext extends ParserRuleContext {
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_transform;
  }
  public copyFrom(ctx: TransformContext): void {
    super.copyFrom(ctx);
  }
}
export class IdentityTransformContext extends TransformContext {
  public qualifiedName(): QualifiedNameContext {
    return this.getRuleContext(0, QualifiedNameContext);
  }
  constructor(ctx: TransformContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterIdentityTransform) {
      listener.enterIdentityTransform(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitIdentityTransform) {
      listener.exitIdentityTransform(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitIdentityTransform) {
      return visitor.visitIdentityTransform(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class ApplyTransformContext extends TransformContext {
  public _transformName!: IdentifierContext;
  public _transformArgument!: TransformArgumentContext;
  public _argument: TransformArgumentContext[] = [];
  public identifier(): IdentifierContext {
    return this.getRuleContext(0, IdentifierContext);
  }
  public transformArgument(): TransformArgumentContext[];
  public transformArgument(i: number): TransformArgumentContext;
  public transformArgument(i?: number): TransformArgumentContext | TransformArgumentContext[] {
    if (i === undefined) {
      return this.getRuleContexts(TransformArgumentContext);
    } else {
      return this.getRuleContext(i, TransformArgumentContext);
    }
  }
  constructor(ctx: TransformContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterApplyTransform) {
      listener.enterApplyTransform(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitApplyTransform) {
      listener.exitApplyTransform(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitApplyTransform) {
      return visitor.visitApplyTransform(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class TransformArgumentContext extends ParserRuleContext {
  public qualifiedName(): QualifiedNameContext | undefined {
    return this.tryGetRuleContext(0, QualifiedNameContext);
  }
  public constant(): ConstantContext | undefined {
    return this.tryGetRuleContext(0, ConstantContext);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_transformArgument;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterTransformArgument) {
      listener.enterTransformArgument(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitTransformArgument) {
      listener.exitTransformArgument(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitTransformArgument) {
      return visitor.visitTransformArgument(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class ExpressionContext extends ParserRuleContext {
  public booleanExpression(): BooleanExpressionContext {
    return this.getRuleContext(0, BooleanExpressionContext);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_expression;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterExpression) {
      listener.enterExpression(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitExpression) {
      listener.exitExpression(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitExpression) {
      return visitor.visitExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class ExpressionSeqContext extends ParserRuleContext {
  public expression(): ExpressionContext[];
  public expression(i: number): ExpressionContext;
  public expression(i?: number): ExpressionContext | ExpressionContext[] {
    if (i === undefined) {
      return this.getRuleContexts(ExpressionContext);
    } else {
      return this.getRuleContext(i, ExpressionContext);
    }
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_expressionSeq;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterExpressionSeq) {
      listener.enterExpressionSeq(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitExpressionSeq) {
      listener.exitExpressionSeq(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitExpressionSeq) {
      return visitor.visitExpressionSeq(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class BooleanExpressionContext extends ParserRuleContext {
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_booleanExpression;
  }
  public copyFrom(ctx: BooleanExpressionContext): void {
    super.copyFrom(ctx);
  }
}
export class LogicalNotContext extends BooleanExpressionContext {
  public NOT(): TerminalNode {
    return this.getToken(SqlBaseParser.NOT, 0);
  }
  public booleanExpression(): BooleanExpressionContext {
    return this.getRuleContext(0, BooleanExpressionContext);
  }
  constructor(ctx: BooleanExpressionContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterLogicalNot) {
      listener.enterLogicalNot(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitLogicalNot) {
      listener.exitLogicalNot(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitLogicalNot) {
      return visitor.visitLogicalNot(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class ExistsContext extends BooleanExpressionContext {
  public EXISTS(): TerminalNode {
    return this.getToken(SqlBaseParser.EXISTS, 0);
  }
  public query(): QueryContext {
    return this.getRuleContext(0, QueryContext);
  }
  constructor(ctx: BooleanExpressionContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterExists) {
      listener.enterExists(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitExists) {
      listener.exitExists(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitExists) {
      return visitor.visitExists(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class PredicatedContext extends BooleanExpressionContext {
  public valueExpression(): ValueExpressionContext {
    return this.getRuleContext(0, ValueExpressionContext);
  }
  public predicate(): PredicateContext | undefined {
    return this.tryGetRuleContext(0, PredicateContext);
  }
  constructor(ctx: BooleanExpressionContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterPredicated) {
      listener.enterPredicated(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitPredicated) {
      listener.exitPredicated(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitPredicated) {
      return visitor.visitPredicated(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class LogicalBinaryContext extends BooleanExpressionContext {
  public _left!: BooleanExpressionContext;
  public _operator!: Token;
  public _right!: BooleanExpressionContext;
  public booleanExpression(): BooleanExpressionContext[];
  public booleanExpression(i: number): BooleanExpressionContext;
  public booleanExpression(i?: number): BooleanExpressionContext | BooleanExpressionContext[] {
    if (i === undefined) {
      return this.getRuleContexts(BooleanExpressionContext);
    } else {
      return this.getRuleContext(i, BooleanExpressionContext);
    }
  }
  public AND(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.AND, 0);
  }
  public OR(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.OR, 0);
  }
  constructor(ctx: BooleanExpressionContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterLogicalBinary) {
      listener.enterLogicalBinary(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitLogicalBinary) {
      listener.exitLogicalBinary(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitLogicalBinary) {
      return visitor.visitLogicalBinary(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class PredicateContext extends ParserRuleContext {
  public _kind!: Token;
  public _lower!: ValueExpressionContext;
  public _upper!: ValueExpressionContext;
  public _pattern!: ValueExpressionContext;
  public _quantifier!: Token;
  public _escapeChar!: Token;
  public _right!: ValueExpressionContext;
  public AND(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.AND, 0);
  }
  public BETWEEN(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.BETWEEN, 0);
  }
  public valueExpression(): ValueExpressionContext[];
  public valueExpression(i: number): ValueExpressionContext;
  public valueExpression(i?: number): ValueExpressionContext | ValueExpressionContext[] {
    if (i === undefined) {
      return this.getRuleContexts(ValueExpressionContext);
    } else {
      return this.getRuleContext(i, ValueExpressionContext);
    }
  }
  public NOT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.NOT, 0);
  }
  public expression(): ExpressionContext[];
  public expression(i: number): ExpressionContext;
  public expression(i?: number): ExpressionContext | ExpressionContext[] {
    if (i === undefined) {
      return this.getRuleContexts(ExpressionContext);
    } else {
      return this.getRuleContext(i, ExpressionContext);
    }
  }
  public IN(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.IN, 0);
  }
  public query(): QueryContext | undefined {
    return this.tryGetRuleContext(0, QueryContext);
  }
  public RLIKE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.RLIKE, 0);
  }
  public LIKE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.LIKE, 0);
  }
  public ANY(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ANY, 0);
  }
  public SOME(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.SOME, 0);
  }
  public ALL(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ALL, 0);
  }
  public ESCAPE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ESCAPE, 0);
  }
  public STRING(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.STRING, 0);
  }
  public IS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.IS, 0);
  }
  public NULL(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.NULL, 0);
  }
  public TRUE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.TRUE, 0);
  }
  public FALSE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.FALSE, 0);
  }
  public UNKNOWN(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.UNKNOWN, 0);
  }
  public FROM(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.FROM, 0);
  }
  public DISTINCT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DISTINCT, 0);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_predicate;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterPredicate) {
      listener.enterPredicate(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitPredicate) {
      listener.exitPredicate(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitPredicate) {
      return visitor.visitPredicate(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class ValueExpressionContext extends ParserRuleContext {
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_valueExpression;
  }
  public copyFrom(ctx: ValueExpressionContext): void {
    super.copyFrom(ctx);
  }
}
export class ValueExpressionDefaultContext extends ValueExpressionContext {
  public primaryExpression(): PrimaryExpressionContext {
    return this.getRuleContext(0, PrimaryExpressionContext);
  }
  constructor(ctx: ValueExpressionContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterValueExpressionDefault) {
      listener.enterValueExpressionDefault(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitValueExpressionDefault) {
      listener.exitValueExpressionDefault(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitValueExpressionDefault) {
      return visitor.visitValueExpressionDefault(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class ArithmeticUnaryContext extends ValueExpressionContext {
  public _operator!: Token;
  public valueExpression(): ValueExpressionContext {
    return this.getRuleContext(0, ValueExpressionContext);
  }
  public MINUS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.MINUS, 0);
  }
  public PLUS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.PLUS, 0);
  }
  public TILDE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.TILDE, 0);
  }
  constructor(ctx: ValueExpressionContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterArithmeticUnary) {
      listener.enterArithmeticUnary(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitArithmeticUnary) {
      listener.exitArithmeticUnary(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitArithmeticUnary) {
      return visitor.visitArithmeticUnary(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class ArithmeticBinaryContext extends ValueExpressionContext {
  public _left!: ValueExpressionContext;
  public _operator!: Token;
  public _right!: ValueExpressionContext;
  public valueExpression(): ValueExpressionContext[];
  public valueExpression(i: number): ValueExpressionContext;
  public valueExpression(i?: number): ValueExpressionContext | ValueExpressionContext[] {
    if (i === undefined) {
      return this.getRuleContexts(ValueExpressionContext);
    } else {
      return this.getRuleContext(i, ValueExpressionContext);
    }
  }
  public ASTERISK(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ASTERISK, 0);
  }
  public SLASH(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.SLASH, 0);
  }
  public PERCENT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.PERCENT, 0);
  }
  public DIV(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DIV, 0);
  }
  public PLUS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.PLUS, 0);
  }
  public MINUS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.MINUS, 0);
  }
  public CONCAT_PIPE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.CONCAT_PIPE, 0);
  }
  public AMPERSAND(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.AMPERSAND, 0);
  }
  public HAT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.HAT, 0);
  }
  public PIPE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.PIPE, 0);
  }
  constructor(ctx: ValueExpressionContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterArithmeticBinary) {
      listener.enterArithmeticBinary(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitArithmeticBinary) {
      listener.exitArithmeticBinary(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitArithmeticBinary) {
      return visitor.visitArithmeticBinary(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class ComparisonContext extends ValueExpressionContext {
  public _left!: ValueExpressionContext;
  public _right!: ValueExpressionContext;
  public comparisonOperator(): ComparisonOperatorContext {
    return this.getRuleContext(0, ComparisonOperatorContext);
  }
  public valueExpression(): ValueExpressionContext[];
  public valueExpression(i: number): ValueExpressionContext;
  public valueExpression(i?: number): ValueExpressionContext | ValueExpressionContext[] {
    if (i === undefined) {
      return this.getRuleContexts(ValueExpressionContext);
    } else {
      return this.getRuleContext(i, ValueExpressionContext);
    }
  }
  constructor(ctx: ValueExpressionContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterComparison) {
      listener.enterComparison(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitComparison) {
      listener.exitComparison(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitComparison) {
      return visitor.visitComparison(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class PrimaryExpressionContext extends ParserRuleContext {
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_primaryExpression;
  }
  public copyFrom(ctx: PrimaryExpressionContext): void {
    super.copyFrom(ctx);
  }
}
export class CurrentLikeContext extends PrimaryExpressionContext {
  public _name!: Token;
  public CURRENT_DATE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.CURRENT_DATE, 0);
  }
  public CURRENT_TIMESTAMP(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.CURRENT_TIMESTAMP, 0);
  }
  public CURRENT_USER(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.CURRENT_USER, 0);
  }
  constructor(ctx: PrimaryExpressionContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterCurrentLike) {
      listener.enterCurrentLike(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitCurrentLike) {
      listener.exitCurrentLike(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitCurrentLike) {
      return visitor.visitCurrentLike(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class SearchedCaseContext extends PrimaryExpressionContext {
  public _elseExpression!: ExpressionContext;
  public CASE(): TerminalNode {
    return this.getToken(SqlBaseParser.CASE, 0);
  }
  public END(): TerminalNode {
    return this.getToken(SqlBaseParser.END, 0);
  }
  public whenClause(): WhenClauseContext[];
  public whenClause(i: number): WhenClauseContext;
  public whenClause(i?: number): WhenClauseContext | WhenClauseContext[] {
    if (i === undefined) {
      return this.getRuleContexts(WhenClauseContext);
    } else {
      return this.getRuleContext(i, WhenClauseContext);
    }
  }
  public ELSE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ELSE, 0);
  }
  public expression(): ExpressionContext | undefined {
    return this.tryGetRuleContext(0, ExpressionContext);
  }
  constructor(ctx: PrimaryExpressionContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterSearchedCase) {
      listener.enterSearchedCase(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitSearchedCase) {
      listener.exitSearchedCase(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitSearchedCase) {
      return visitor.visitSearchedCase(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class SimpleCaseContext extends PrimaryExpressionContext {
  public _value!: ExpressionContext;
  public _elseExpression!: ExpressionContext;
  public CASE(): TerminalNode {
    return this.getToken(SqlBaseParser.CASE, 0);
  }
  public END(): TerminalNode {
    return this.getToken(SqlBaseParser.END, 0);
  }
  public expression(): ExpressionContext[];
  public expression(i: number): ExpressionContext;
  public expression(i?: number): ExpressionContext | ExpressionContext[] {
    if (i === undefined) {
      return this.getRuleContexts(ExpressionContext);
    } else {
      return this.getRuleContext(i, ExpressionContext);
    }
  }
  public whenClause(): WhenClauseContext[];
  public whenClause(i: number): WhenClauseContext;
  public whenClause(i?: number): WhenClauseContext | WhenClauseContext[] {
    if (i === undefined) {
      return this.getRuleContexts(WhenClauseContext);
    } else {
      return this.getRuleContext(i, WhenClauseContext);
    }
  }
  public ELSE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ELSE, 0);
  }
  constructor(ctx: PrimaryExpressionContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterSimpleCase) {
      listener.enterSimpleCase(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitSimpleCase) {
      listener.exitSimpleCase(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitSimpleCase) {
      return visitor.visitSimpleCase(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class CastContext extends PrimaryExpressionContext {
  public _name!: Token;
  public expression(): ExpressionContext {
    return this.getRuleContext(0, ExpressionContext);
  }
  public AS(): TerminalNode {
    return this.getToken(SqlBaseParser.AS, 0);
  }
  public dataType(): DataTypeContext {
    return this.getRuleContext(0, DataTypeContext);
  }
  public CAST(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.CAST, 0);
  }
  public TRY_CAST(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.TRY_CAST, 0);
  }
  constructor(ctx: PrimaryExpressionContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterCast) {
      listener.enterCast(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitCast) {
      listener.exitCast(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitCast) {
      return visitor.visitCast(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class StructContext extends PrimaryExpressionContext {
  public _namedExpression!: NamedExpressionContext;
  public _argument: NamedExpressionContext[] = [];
  public STRUCT(): TerminalNode {
    return this.getToken(SqlBaseParser.STRUCT, 0);
  }
  public namedExpression(): NamedExpressionContext[];
  public namedExpression(i: number): NamedExpressionContext;
  public namedExpression(i?: number): NamedExpressionContext | NamedExpressionContext[] {
    if (i === undefined) {
      return this.getRuleContexts(NamedExpressionContext);
    } else {
      return this.getRuleContext(i, NamedExpressionContext);
    }
  }
  constructor(ctx: PrimaryExpressionContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterStruct) {
      listener.enterStruct(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitStruct) {
      listener.exitStruct(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitStruct) {
      return visitor.visitStruct(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class FirstContext extends PrimaryExpressionContext {
  public FIRST(): TerminalNode {
    return this.getToken(SqlBaseParser.FIRST, 0);
  }
  public expression(): ExpressionContext {
    return this.getRuleContext(0, ExpressionContext);
  }
  public IGNORE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.IGNORE, 0);
  }
  public NULLS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.NULLS, 0);
  }
  constructor(ctx: PrimaryExpressionContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterFirst) {
      listener.enterFirst(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitFirst) {
      listener.exitFirst(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitFirst) {
      return visitor.visitFirst(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class LastContext extends PrimaryExpressionContext {
  public LAST(): TerminalNode {
    return this.getToken(SqlBaseParser.LAST, 0);
  }
  public expression(): ExpressionContext {
    return this.getRuleContext(0, ExpressionContext);
  }
  public IGNORE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.IGNORE, 0);
  }
  public NULLS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.NULLS, 0);
  }
  constructor(ctx: PrimaryExpressionContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterLast) {
      listener.enterLast(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitLast) {
      listener.exitLast(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitLast) {
      return visitor.visitLast(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class PositionContext extends PrimaryExpressionContext {
  public _substr!: ValueExpressionContext;
  public _str!: ValueExpressionContext;
  public POSITION(): TerminalNode {
    return this.getToken(SqlBaseParser.POSITION, 0);
  }
  public IN(): TerminalNode {
    return this.getToken(SqlBaseParser.IN, 0);
  }
  public valueExpression(): ValueExpressionContext[];
  public valueExpression(i: number): ValueExpressionContext;
  public valueExpression(i?: number): ValueExpressionContext | ValueExpressionContext[] {
    if (i === undefined) {
      return this.getRuleContexts(ValueExpressionContext);
    } else {
      return this.getRuleContext(i, ValueExpressionContext);
    }
  }
  constructor(ctx: PrimaryExpressionContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterPosition) {
      listener.enterPosition(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitPosition) {
      listener.exitPosition(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitPosition) {
      return visitor.visitPosition(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class ConstantDefaultContext extends PrimaryExpressionContext {
  public constant(): ConstantContext {
    return this.getRuleContext(0, ConstantContext);
  }
  constructor(ctx: PrimaryExpressionContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterConstantDefault) {
      listener.enterConstantDefault(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitConstantDefault) {
      listener.exitConstantDefault(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitConstantDefault) {
      return visitor.visitConstantDefault(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class StarContext extends PrimaryExpressionContext {
  public ASTERISK(): TerminalNode {
    return this.getToken(SqlBaseParser.ASTERISK, 0);
  }
  public qualifiedName(): QualifiedNameContext | undefined {
    return this.tryGetRuleContext(0, QualifiedNameContext);
  }
  constructor(ctx: PrimaryExpressionContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterStar) {
      listener.enterStar(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitStar) {
      listener.exitStar(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitStar) {
      return visitor.visitStar(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class RowConstructorContext extends PrimaryExpressionContext {
  public namedExpression(): NamedExpressionContext[];
  public namedExpression(i: number): NamedExpressionContext;
  public namedExpression(i?: number): NamedExpressionContext | NamedExpressionContext[] {
    if (i === undefined) {
      return this.getRuleContexts(NamedExpressionContext);
    } else {
      return this.getRuleContext(i, NamedExpressionContext);
    }
  }
  constructor(ctx: PrimaryExpressionContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterRowConstructor) {
      listener.enterRowConstructor(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitRowConstructor) {
      listener.exitRowConstructor(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitRowConstructor) {
      return visitor.visitRowConstructor(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class SubqueryExpressionContext extends PrimaryExpressionContext {
  public query(): QueryContext {
    return this.getRuleContext(0, QueryContext);
  }
  constructor(ctx: PrimaryExpressionContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterSubqueryExpression) {
      listener.enterSubqueryExpression(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitSubqueryExpression) {
      listener.exitSubqueryExpression(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitSubqueryExpression) {
      return visitor.visitSubqueryExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class FunctionCallContext extends PrimaryExpressionContext {
  public _expression!: ExpressionContext;
  public _argument: ExpressionContext[] = [];
  public _where!: BooleanExpressionContext;
  public _nullsOption!: Token;
  public functionName(): FunctionNameContext {
    return this.getRuleContext(0, FunctionNameContext);
  }
  public FILTER(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.FILTER, 0);
  }
  public WHERE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.WHERE, 0);
  }
  public NULLS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.NULLS, 0);
  }
  public OVER(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.OVER, 0);
  }
  public windowSpec(): WindowSpecContext | undefined {
    return this.tryGetRuleContext(0, WindowSpecContext);
  }
  public expression(): ExpressionContext[];
  public expression(i: number): ExpressionContext;
  public expression(i?: number): ExpressionContext | ExpressionContext[] {
    if (i === undefined) {
      return this.getRuleContexts(ExpressionContext);
    } else {
      return this.getRuleContext(i, ExpressionContext);
    }
  }
  public booleanExpression(): BooleanExpressionContext | undefined {
    return this.tryGetRuleContext(0, BooleanExpressionContext);
  }
  public IGNORE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.IGNORE, 0);
  }
  public RESPECT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.RESPECT, 0);
  }
  public setQuantifier(): SetQuantifierContext | undefined {
    return this.tryGetRuleContext(0, SetQuantifierContext);
  }
  constructor(ctx: PrimaryExpressionContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterFunctionCall) {
      listener.enterFunctionCall(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitFunctionCall) {
      listener.exitFunctionCall(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitFunctionCall) {
      return visitor.visitFunctionCall(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class LambdaContext extends PrimaryExpressionContext {
  public identifier(): IdentifierContext[];
  public identifier(i: number): IdentifierContext;
  public identifier(i?: number): IdentifierContext | IdentifierContext[] {
    if (i === undefined) {
      return this.getRuleContexts(IdentifierContext);
    } else {
      return this.getRuleContext(i, IdentifierContext);
    }
  }
  public expression(): ExpressionContext {
    return this.getRuleContext(0, ExpressionContext);
  }
  constructor(ctx: PrimaryExpressionContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterLambda) {
      listener.enterLambda(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitLambda) {
      listener.exitLambda(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitLambda) {
      return visitor.visitLambda(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class SubscriptContext extends PrimaryExpressionContext {
  public _value!: PrimaryExpressionContext;
  public _index!: ValueExpressionContext;
  public primaryExpression(): PrimaryExpressionContext {
    return this.getRuleContext(0, PrimaryExpressionContext);
  }
  public valueExpression(): ValueExpressionContext {
    return this.getRuleContext(0, ValueExpressionContext);
  }
  constructor(ctx: PrimaryExpressionContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterSubscript) {
      listener.enterSubscript(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitSubscript) {
      listener.exitSubscript(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitSubscript) {
      return visitor.visitSubscript(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class ColumnReferenceContext extends PrimaryExpressionContext {
  public identifier(): IdentifierContext {
    return this.getRuleContext(0, IdentifierContext);
  }
  constructor(ctx: PrimaryExpressionContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterColumnReference) {
      listener.enterColumnReference(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitColumnReference) {
      listener.exitColumnReference(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitColumnReference) {
      return visitor.visitColumnReference(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class DereferenceContext extends PrimaryExpressionContext {
  public _base!: PrimaryExpressionContext;
  public _fieldName!: IdentifierContext;
  public primaryExpression(): PrimaryExpressionContext {
    return this.getRuleContext(0, PrimaryExpressionContext);
  }
  public identifier(): IdentifierContext {
    return this.getRuleContext(0, IdentifierContext);
  }
  constructor(ctx: PrimaryExpressionContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterDereference) {
      listener.enterDereference(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitDereference) {
      listener.exitDereference(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitDereference) {
      return visitor.visitDereference(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class PostgresCastContext extends PrimaryExpressionContext {
  public _value!: PrimaryExpressionContext;
  public DOUBLE_COLON(): TerminalNode {
    return this.getToken(SqlBaseParser.DOUBLE_COLON, 0);
  }
  public dataType(): DataTypeContext {
    return this.getRuleContext(0, DataTypeContext);
  }
  public primaryExpression(): PrimaryExpressionContext {
    return this.getRuleContext(0, PrimaryExpressionContext);
  }
  constructor(ctx: PrimaryExpressionContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterPostgresCast) {
      listener.enterPostgresCast(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitPostgresCast) {
      listener.exitPostgresCast(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitPostgresCast) {
      return visitor.visitPostgresCast(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class ParenthesizedExpressionContext extends PrimaryExpressionContext {
  public expression(): ExpressionContext {
    return this.getRuleContext(0, ExpressionContext);
  }
  constructor(ctx: PrimaryExpressionContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterParenthesizedExpression) {
      listener.enterParenthesizedExpression(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitParenthesizedExpression) {
      listener.exitParenthesizedExpression(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitParenthesizedExpression) {
      return visitor.visitParenthesizedExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class ExtractContext extends PrimaryExpressionContext {
  public _field!: IdentifierContext;
  public _source!: ValueExpressionContext;
  public EXTRACT(): TerminalNode {
    return this.getToken(SqlBaseParser.EXTRACT, 0);
  }
  public FROM(): TerminalNode {
    return this.getToken(SqlBaseParser.FROM, 0);
  }
  public identifier(): IdentifierContext {
    return this.getRuleContext(0, IdentifierContext);
  }
  public valueExpression(): ValueExpressionContext {
    return this.getRuleContext(0, ValueExpressionContext);
  }
  constructor(ctx: PrimaryExpressionContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterExtract) {
      listener.enterExtract(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitExtract) {
      listener.exitExtract(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitExtract) {
      return visitor.visitExtract(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class SubstringContext extends PrimaryExpressionContext {
  public _str!: ValueExpressionContext;
  public _pos!: ValueExpressionContext;
  public _len!: ValueExpressionContext;
  public SUBSTR(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.SUBSTR, 0);
  }
  public SUBSTRING(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.SUBSTRING, 0);
  }
  public valueExpression(): ValueExpressionContext[];
  public valueExpression(i: number): ValueExpressionContext;
  public valueExpression(i?: number): ValueExpressionContext | ValueExpressionContext[] {
    if (i === undefined) {
      return this.getRuleContexts(ValueExpressionContext);
    } else {
      return this.getRuleContext(i, ValueExpressionContext);
    }
  }
  public FROM(): TerminalNode {
    return this.getToken(SqlBaseParser.FROM, 0);
  }
  public FOR(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.FOR, 0);
  }
  constructor(ctx: PrimaryExpressionContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterSubstring) {
      listener.enterSubstring(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitSubstring) {
      listener.exitSubstring(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitSubstring) {
      return visitor.visitSubstring(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class TrimContext extends PrimaryExpressionContext {
  public _trimOption!: Token;
  public _trimStr!: ValueExpressionContext;
  public _srcStr!: ValueExpressionContext;
  public TRIM(): TerminalNode {
    return this.getToken(SqlBaseParser.TRIM, 0);
  }
  public FROM(): TerminalNode {
    return this.getToken(SqlBaseParser.FROM, 0);
  }
  public valueExpression(): ValueExpressionContext[];
  public valueExpression(i: number): ValueExpressionContext;
  public valueExpression(i?: number): ValueExpressionContext | ValueExpressionContext[] {
    if (i === undefined) {
      return this.getRuleContexts(ValueExpressionContext);
    } else {
      return this.getRuleContext(i, ValueExpressionContext);
    }
  }
  public BOTH(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.BOTH, 0);
  }
  public LEADING(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.LEADING, 0);
  }
  public TRAILING(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.TRAILING, 0);
  }
  constructor(ctx: PrimaryExpressionContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterTrim) {
      listener.enterTrim(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitTrim) {
      listener.exitTrim(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitTrim) {
      return visitor.visitTrim(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class OverlayContext extends PrimaryExpressionContext {
  public _input!: ValueExpressionContext;
  public _replace!: ValueExpressionContext;
  public _position!: ValueExpressionContext;
  public _length!: ValueExpressionContext;
  public OVERLAY(): TerminalNode {
    return this.getToken(SqlBaseParser.OVERLAY, 0);
  }
  public PLACING(): TerminalNode {
    return this.getToken(SqlBaseParser.PLACING, 0);
  }
  public FROM(): TerminalNode {
    return this.getToken(SqlBaseParser.FROM, 0);
  }
  public valueExpression(): ValueExpressionContext[];
  public valueExpression(i: number): ValueExpressionContext;
  public valueExpression(i?: number): ValueExpressionContext | ValueExpressionContext[] {
    if (i === undefined) {
      return this.getRuleContexts(ValueExpressionContext);
    } else {
      return this.getRuleContext(i, ValueExpressionContext);
    }
  }
  public FOR(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.FOR, 0);
  }
  constructor(ctx: PrimaryExpressionContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterOverlay) {
      listener.enterOverlay(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitOverlay) {
      listener.exitOverlay(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitOverlay) {
      return visitor.visitOverlay(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class ConstantContext extends ParserRuleContext {
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_constant;
  }
  public copyFrom(ctx: ConstantContext): void {
    super.copyFrom(ctx);
  }
}
export class NullLiteralContext extends ConstantContext {
  public NULL(): TerminalNode {
    return this.getToken(SqlBaseParser.NULL, 0);
  }
  constructor(ctx: ConstantContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterNullLiteral) {
      listener.enterNullLiteral(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitNullLiteral) {
      listener.exitNullLiteral(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitNullLiteral) {
      return visitor.visitNullLiteral(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class IntervalLiteralContext extends ConstantContext {
  public interval(): IntervalContext {
    return this.getRuleContext(0, IntervalContext);
  }
  constructor(ctx: ConstantContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterIntervalLiteral) {
      listener.enterIntervalLiteral(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitIntervalLiteral) {
      listener.exitIntervalLiteral(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitIntervalLiteral) {
      return visitor.visitIntervalLiteral(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class TypeConstructorContext extends ConstantContext {
  public identifier(): IdentifierContext {
    return this.getRuleContext(0, IdentifierContext);
  }
  public STRING(): TerminalNode {
    return this.getToken(SqlBaseParser.STRING, 0);
  }
  constructor(ctx: ConstantContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterTypeConstructor) {
      listener.enterTypeConstructor(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitTypeConstructor) {
      listener.exitTypeConstructor(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitTypeConstructor) {
      return visitor.visitTypeConstructor(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class NumericLiteralContext extends ConstantContext {
  public number(): NumberContext {
    return this.getRuleContext(0, NumberContext);
  }
  constructor(ctx: ConstantContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterNumericLiteral) {
      listener.enterNumericLiteral(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitNumericLiteral) {
      listener.exitNumericLiteral(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitNumericLiteral) {
      return visitor.visitNumericLiteral(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class BooleanLiteralContext extends ConstantContext {
  public booleanValue(): BooleanValueContext {
    return this.getRuleContext(0, BooleanValueContext);
  }
  constructor(ctx: ConstantContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterBooleanLiteral) {
      listener.enterBooleanLiteral(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitBooleanLiteral) {
      listener.exitBooleanLiteral(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitBooleanLiteral) {
      return visitor.visitBooleanLiteral(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class StringLiteralContext extends ConstantContext {
  public STRING(): TerminalNode[];
  public STRING(i: number): TerminalNode;
  public STRING(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(SqlBaseParser.STRING);
    } else {
      return this.getToken(SqlBaseParser.STRING, i);
    }
  }
  constructor(ctx: ConstantContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterStringLiteral) {
      listener.enterStringLiteral(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitStringLiteral) {
      listener.exitStringLiteral(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitStringLiteral) {
      return visitor.visitStringLiteral(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class ComparisonOperatorContext extends ParserRuleContext {
  public EQ(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.EQ, 0);
  }
  public NEQ(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.NEQ, 0);
  }
  public NEQJ(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.NEQJ, 0);
  }
  public LT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.LT, 0);
  }
  public LTE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.LTE, 0);
  }
  public GT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.GT, 0);
  }
  public GTE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.GTE, 0);
  }
  public NSEQ(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.NSEQ, 0);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_comparisonOperator;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterComparisonOperator) {
      listener.enterComparisonOperator(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitComparisonOperator) {
      listener.exitComparisonOperator(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitComparisonOperator) {
      return visitor.visitComparisonOperator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class ArithmeticOperatorContext extends ParserRuleContext {
  public PLUS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.PLUS, 0);
  }
  public MINUS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.MINUS, 0);
  }
  public ASTERISK(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ASTERISK, 0);
  }
  public SLASH(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.SLASH, 0);
  }
  public PERCENT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.PERCENT, 0);
  }
  public DIV(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DIV, 0);
  }
  public TILDE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.TILDE, 0);
  }
  public AMPERSAND(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.AMPERSAND, 0);
  }
  public PIPE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.PIPE, 0);
  }
  public CONCAT_PIPE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.CONCAT_PIPE, 0);
  }
  public HAT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.HAT, 0);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_arithmeticOperator;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterArithmeticOperator) {
      listener.enterArithmeticOperator(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitArithmeticOperator) {
      listener.exitArithmeticOperator(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitArithmeticOperator) {
      return visitor.visitArithmeticOperator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class PredicateOperatorContext extends ParserRuleContext {
  public OR(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.OR, 0);
  }
  public AND(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.AND, 0);
  }
  public IN(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.IN, 0);
  }
  public NOT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.NOT, 0);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_predicateOperator;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterPredicateOperator) {
      listener.enterPredicateOperator(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitPredicateOperator) {
      listener.exitPredicateOperator(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitPredicateOperator) {
      return visitor.visitPredicateOperator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class BooleanValueContext extends ParserRuleContext {
  public TRUE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.TRUE, 0);
  }
  public FALSE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.FALSE, 0);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_booleanValue;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterBooleanValue) {
      listener.enterBooleanValue(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitBooleanValue) {
      listener.exitBooleanValue(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitBooleanValue) {
      return visitor.visitBooleanValue(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class IntervalContext extends ParserRuleContext {
  public INTERVAL(): TerminalNode {
    return this.getToken(SqlBaseParser.INTERVAL, 0);
  }
  public errorCapturingMultiUnitsInterval(): ErrorCapturingMultiUnitsIntervalContext | undefined {
    return this.tryGetRuleContext(0, ErrorCapturingMultiUnitsIntervalContext);
  }
  public errorCapturingUnitToUnitInterval(): ErrorCapturingUnitToUnitIntervalContext | undefined {
    return this.tryGetRuleContext(0, ErrorCapturingUnitToUnitIntervalContext);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_interval;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterInterval) {
      listener.enterInterval(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitInterval) {
      listener.exitInterval(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitInterval) {
      return visitor.visitInterval(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class ErrorCapturingMultiUnitsIntervalContext extends ParserRuleContext {
  public multiUnitsInterval(): MultiUnitsIntervalContext {
    return this.getRuleContext(0, MultiUnitsIntervalContext);
  }
  public unitToUnitInterval(): UnitToUnitIntervalContext | undefined {
    return this.tryGetRuleContext(0, UnitToUnitIntervalContext);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_errorCapturingMultiUnitsInterval;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterErrorCapturingMultiUnitsInterval) {
      listener.enterErrorCapturingMultiUnitsInterval(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitErrorCapturingMultiUnitsInterval) {
      listener.exitErrorCapturingMultiUnitsInterval(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitErrorCapturingMultiUnitsInterval) {
      return visitor.visitErrorCapturingMultiUnitsInterval(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class MultiUnitsIntervalContext extends ParserRuleContext {
  public _identifier!: IdentifierContext;
  public _unit: IdentifierContext[] = [];
  public intervalValue(): IntervalValueContext[];
  public intervalValue(i: number): IntervalValueContext;
  public intervalValue(i?: number): IntervalValueContext | IntervalValueContext[] {
    if (i === undefined) {
      return this.getRuleContexts(IntervalValueContext);
    } else {
      return this.getRuleContext(i, IntervalValueContext);
    }
  }
  public identifier(): IdentifierContext[];
  public identifier(i: number): IdentifierContext;
  public identifier(i?: number): IdentifierContext | IdentifierContext[] {
    if (i === undefined) {
      return this.getRuleContexts(IdentifierContext);
    } else {
      return this.getRuleContext(i, IdentifierContext);
    }
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_multiUnitsInterval;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterMultiUnitsInterval) {
      listener.enterMultiUnitsInterval(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitMultiUnitsInterval) {
      listener.exitMultiUnitsInterval(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitMultiUnitsInterval) {
      return visitor.visitMultiUnitsInterval(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class ErrorCapturingUnitToUnitIntervalContext extends ParserRuleContext {
  public _body!: UnitToUnitIntervalContext;
  public _error1!: MultiUnitsIntervalContext;
  public _error2!: UnitToUnitIntervalContext;
  public unitToUnitInterval(): UnitToUnitIntervalContext[];
  public unitToUnitInterval(i: number): UnitToUnitIntervalContext;
  public unitToUnitInterval(i?: number): UnitToUnitIntervalContext | UnitToUnitIntervalContext[] {
    if (i === undefined) {
      return this.getRuleContexts(UnitToUnitIntervalContext);
    } else {
      return this.getRuleContext(i, UnitToUnitIntervalContext);
    }
  }
  public multiUnitsInterval(): MultiUnitsIntervalContext | undefined {
    return this.tryGetRuleContext(0, MultiUnitsIntervalContext);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_errorCapturingUnitToUnitInterval;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterErrorCapturingUnitToUnitInterval) {
      listener.enterErrorCapturingUnitToUnitInterval(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitErrorCapturingUnitToUnitInterval) {
      listener.exitErrorCapturingUnitToUnitInterval(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitErrorCapturingUnitToUnitInterval) {
      return visitor.visitErrorCapturingUnitToUnitInterval(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class UnitToUnitIntervalContext extends ParserRuleContext {
  public _value!: IntervalValueContext;
  public _from!: IdentifierContext;
  public _to!: IdentifierContext;
  public TO(): TerminalNode {
    return this.getToken(SqlBaseParser.TO, 0);
  }
  public intervalValue(): IntervalValueContext {
    return this.getRuleContext(0, IntervalValueContext);
  }
  public identifier(): IdentifierContext[];
  public identifier(i: number): IdentifierContext;
  public identifier(i?: number): IdentifierContext | IdentifierContext[] {
    if (i === undefined) {
      return this.getRuleContexts(IdentifierContext);
    } else {
      return this.getRuleContext(i, IdentifierContext);
    }
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_unitToUnitInterval;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterUnitToUnitInterval) {
      listener.enterUnitToUnitInterval(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitUnitToUnitInterval) {
      listener.exitUnitToUnitInterval(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitUnitToUnitInterval) {
      return visitor.visitUnitToUnitInterval(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class IntervalValueContext extends ParserRuleContext {
  public INTEGER_VALUE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.INTEGER_VALUE, 0);
  }
  public DECIMAL_VALUE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DECIMAL_VALUE, 0);
  }
  public STRING(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.STRING, 0);
  }
  public PLUS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.PLUS, 0);
  }
  public MINUS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.MINUS, 0);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_intervalValue;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterIntervalValue) {
      listener.enterIntervalValue(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitIntervalValue) {
      listener.exitIntervalValue(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitIntervalValue) {
      return visitor.visitIntervalValue(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class ColPositionContext extends ParserRuleContext {
  public _position!: Token;
  public _afterCol!: ErrorCapturingIdentifierContext;
  public FIRST(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.FIRST, 0);
  }
  public AFTER(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.AFTER, 0);
  }
  public errorCapturingIdentifier(): ErrorCapturingIdentifierContext | undefined {
    return this.tryGetRuleContext(0, ErrorCapturingIdentifierContext);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_colPosition;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterColPosition) {
      listener.enterColPosition(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitColPosition) {
      listener.exitColPosition(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitColPosition) {
      return visitor.visitColPosition(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class DataTypeContext extends ParserRuleContext {
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_dataType;
  }
  public copyFrom(ctx: DataTypeContext): void {
    super.copyFrom(ctx);
  }
}
export class ComplexDataTypeContext extends DataTypeContext {
  public _complex!: Token;
  public LT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.LT, 0);
  }
  public dataType(): DataTypeContext[];
  public dataType(i: number): DataTypeContext;
  public dataType(i?: number): DataTypeContext | DataTypeContext[] {
    if (i === undefined) {
      return this.getRuleContexts(DataTypeContext);
    } else {
      return this.getRuleContext(i, DataTypeContext);
    }
  }
  public GT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.GT, 0);
  }
  public ARRAY(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ARRAY, 0);
  }
  public MAP(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.MAP, 0);
  }
  public STRUCT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.STRUCT, 0);
  }
  public NEQ(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.NEQ, 0);
  }
  public complexColTypeList(): ComplexColTypeListContext | undefined {
    return this.tryGetRuleContext(0, ComplexColTypeListContext);
  }
  constructor(ctx: DataTypeContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterComplexDataType) {
      listener.enterComplexDataType(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitComplexDataType) {
      listener.exitComplexDataType(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitComplexDataType) {
      return visitor.visitComplexDataType(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class YearMonthIntervalDataTypeContext extends DataTypeContext {
  public _from!: Token;
  public _to!: Token;
  public INTERVAL(): TerminalNode {
    return this.getToken(SqlBaseParser.INTERVAL, 0);
  }
  public YEAR(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.YEAR, 0);
  }
  public MONTH(): TerminalNode[];
  public MONTH(i: number): TerminalNode;
  public MONTH(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(SqlBaseParser.MONTH);
    } else {
      return this.getToken(SqlBaseParser.MONTH, i);
    }
  }
  public TO(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.TO, 0);
  }
  constructor(ctx: DataTypeContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterYearMonthIntervalDataType) {
      listener.enterYearMonthIntervalDataType(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitYearMonthIntervalDataType) {
      listener.exitYearMonthIntervalDataType(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitYearMonthIntervalDataType) {
      return visitor.visitYearMonthIntervalDataType(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class DayTimeIntervalDataTypeContext extends DataTypeContext {
  public _from!: Token;
  public _to!: Token;
  public INTERVAL(): TerminalNode {
    return this.getToken(SqlBaseParser.INTERVAL, 0);
  }
  public DAY(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DAY, 0);
  }
  public HOUR(): TerminalNode[];
  public HOUR(i: number): TerminalNode;
  public HOUR(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(SqlBaseParser.HOUR);
    } else {
      return this.getToken(SqlBaseParser.HOUR, i);
    }
  }
  public MINUTE(): TerminalNode[];
  public MINUTE(i: number): TerminalNode;
  public MINUTE(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(SqlBaseParser.MINUTE);
    } else {
      return this.getToken(SqlBaseParser.MINUTE, i);
    }
  }
  public SECOND(): TerminalNode[];
  public SECOND(i: number): TerminalNode;
  public SECOND(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(SqlBaseParser.SECOND);
    } else {
      return this.getToken(SqlBaseParser.SECOND, i);
    }
  }
  public TO(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.TO, 0);
  }
  constructor(ctx: DataTypeContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterDayTimeIntervalDataType) {
      listener.enterDayTimeIntervalDataType(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitDayTimeIntervalDataType) {
      listener.exitDayTimeIntervalDataType(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitDayTimeIntervalDataType) {
      return visitor.visitDayTimeIntervalDataType(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class PrimitiveDataTypeContext extends DataTypeContext {
  public identifier(): IdentifierContext {
    return this.getRuleContext(0, IdentifierContext);
  }
  public INTEGER_VALUE(): TerminalNode[];
  public INTEGER_VALUE(i: number): TerminalNode;
  public INTEGER_VALUE(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(SqlBaseParser.INTEGER_VALUE);
    } else {
      return this.getToken(SqlBaseParser.INTEGER_VALUE, i);
    }
  }
  constructor(ctx: DataTypeContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterPrimitiveDataType) {
      listener.enterPrimitiveDataType(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitPrimitiveDataType) {
      listener.exitPrimitiveDataType(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitPrimitiveDataType) {
      return visitor.visitPrimitiveDataType(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class QualifiedColTypeWithPositionListContext extends ParserRuleContext {
  public qualifiedColTypeWithPosition(): QualifiedColTypeWithPositionContext[];
  public qualifiedColTypeWithPosition(i: number): QualifiedColTypeWithPositionContext;
  public qualifiedColTypeWithPosition(
    i?: number
  ): QualifiedColTypeWithPositionContext | QualifiedColTypeWithPositionContext[] {
    if (i === undefined) {
      return this.getRuleContexts(QualifiedColTypeWithPositionContext);
    } else {
      return this.getRuleContext(i, QualifiedColTypeWithPositionContext);
    }
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_qualifiedColTypeWithPositionList;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterQualifiedColTypeWithPositionList) {
      listener.enterQualifiedColTypeWithPositionList(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitQualifiedColTypeWithPositionList) {
      listener.exitQualifiedColTypeWithPositionList(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitQualifiedColTypeWithPositionList) {
      return visitor.visitQualifiedColTypeWithPositionList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class QualifiedColTypeWithPositionContext extends ParserRuleContext {
  public _name!: MultipartIdentifierContext;
  public dataType(): DataTypeContext {
    return this.getRuleContext(0, DataTypeContext);
  }
  public multipartIdentifier(): MultipartIdentifierContext {
    return this.getRuleContext(0, MultipartIdentifierContext);
  }
  public NOT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.NOT, 0);
  }
  public NULL(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.NULL, 0);
  }
  public commentSpec(): CommentSpecContext | undefined {
    return this.tryGetRuleContext(0, CommentSpecContext);
  }
  public colPosition(): ColPositionContext | undefined {
    return this.tryGetRuleContext(0, ColPositionContext);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_qualifiedColTypeWithPosition;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterQualifiedColTypeWithPosition) {
      listener.enterQualifiedColTypeWithPosition(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitQualifiedColTypeWithPosition) {
      listener.exitQualifiedColTypeWithPosition(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitQualifiedColTypeWithPosition) {
      return visitor.visitQualifiedColTypeWithPosition(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class ColTypeListContext extends ParserRuleContext {
  public colType(): ColTypeContext[];
  public colType(i: number): ColTypeContext;
  public colType(i?: number): ColTypeContext | ColTypeContext[] {
    if (i === undefined) {
      return this.getRuleContexts(ColTypeContext);
    } else {
      return this.getRuleContext(i, ColTypeContext);
    }
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_colTypeList;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterColTypeList) {
      listener.enterColTypeList(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitColTypeList) {
      listener.exitColTypeList(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitColTypeList) {
      return visitor.visitColTypeList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class ColTypeContext extends ParserRuleContext {
  public _colName!: ErrorCapturingIdentifierContext;
  public dataType(): DataTypeContext {
    return this.getRuleContext(0, DataTypeContext);
  }
  public errorCapturingIdentifier(): ErrorCapturingIdentifierContext {
    return this.getRuleContext(0, ErrorCapturingIdentifierContext);
  }
  public NOT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.NOT, 0);
  }
  public NULL(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.NULL, 0);
  }
  public commentSpec(): CommentSpecContext | undefined {
    return this.tryGetRuleContext(0, CommentSpecContext);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_colType;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterColType) {
      listener.enterColType(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitColType) {
      listener.exitColType(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitColType) {
      return visitor.visitColType(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class ComplexColTypeListContext extends ParserRuleContext {
  public complexColType(): ComplexColTypeContext[];
  public complexColType(i: number): ComplexColTypeContext;
  public complexColType(i?: number): ComplexColTypeContext | ComplexColTypeContext[] {
    if (i === undefined) {
      return this.getRuleContexts(ComplexColTypeContext);
    } else {
      return this.getRuleContext(i, ComplexColTypeContext);
    }
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_complexColTypeList;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterComplexColTypeList) {
      listener.enterComplexColTypeList(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitComplexColTypeList) {
      listener.exitComplexColTypeList(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitComplexColTypeList) {
      return visitor.visitComplexColTypeList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class ComplexColTypeContext extends ParserRuleContext {
  public identifier(): IdentifierContext {
    return this.getRuleContext(0, IdentifierContext);
  }
  public dataType(): DataTypeContext {
    return this.getRuleContext(0, DataTypeContext);
  }
  public NOT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.NOT, 0);
  }
  public NULL(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.NULL, 0);
  }
  public commentSpec(): CommentSpecContext | undefined {
    return this.tryGetRuleContext(0, CommentSpecContext);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_complexColType;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterComplexColType) {
      listener.enterComplexColType(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitComplexColType) {
      listener.exitComplexColType(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitComplexColType) {
      return visitor.visitComplexColType(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class WhenClauseContext extends ParserRuleContext {
  public _condition!: ExpressionContext;
  public _result!: ExpressionContext;
  public WHEN(): TerminalNode {
    return this.getToken(SqlBaseParser.WHEN, 0);
  }
  public THEN(): TerminalNode {
    return this.getToken(SqlBaseParser.THEN, 0);
  }
  public expression(): ExpressionContext[];
  public expression(i: number): ExpressionContext;
  public expression(i?: number): ExpressionContext | ExpressionContext[] {
    if (i === undefined) {
      return this.getRuleContexts(ExpressionContext);
    } else {
      return this.getRuleContext(i, ExpressionContext);
    }
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_whenClause;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterWhenClause) {
      listener.enterWhenClause(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitWhenClause) {
      listener.exitWhenClause(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitWhenClause) {
      return visitor.visitWhenClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class WindowClauseContext extends ParserRuleContext {
  public WINDOW(): TerminalNode {
    return this.getToken(SqlBaseParser.WINDOW, 0);
  }
  public namedWindow(): NamedWindowContext[];
  public namedWindow(i: number): NamedWindowContext;
  public namedWindow(i?: number): NamedWindowContext | NamedWindowContext[] {
    if (i === undefined) {
      return this.getRuleContexts(NamedWindowContext);
    } else {
      return this.getRuleContext(i, NamedWindowContext);
    }
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_windowClause;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterWindowClause) {
      listener.enterWindowClause(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitWindowClause) {
      listener.exitWindowClause(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitWindowClause) {
      return visitor.visitWindowClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class NamedWindowContext extends ParserRuleContext {
  public _name!: ErrorCapturingIdentifierContext;
  public AS(): TerminalNode {
    return this.getToken(SqlBaseParser.AS, 0);
  }
  public windowSpec(): WindowSpecContext {
    return this.getRuleContext(0, WindowSpecContext);
  }
  public errorCapturingIdentifier(): ErrorCapturingIdentifierContext {
    return this.getRuleContext(0, ErrorCapturingIdentifierContext);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_namedWindow;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterNamedWindow) {
      listener.enterNamedWindow(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitNamedWindow) {
      listener.exitNamedWindow(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitNamedWindow) {
      return visitor.visitNamedWindow(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class WindowSpecContext extends ParserRuleContext {
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_windowSpec;
  }
  public copyFrom(ctx: WindowSpecContext): void {
    super.copyFrom(ctx);
  }
}
export class WindowRefContext extends WindowSpecContext {
  public _name!: ErrorCapturingIdentifierContext;
  public errorCapturingIdentifier(): ErrorCapturingIdentifierContext {
    return this.getRuleContext(0, ErrorCapturingIdentifierContext);
  }
  constructor(ctx: WindowSpecContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterWindowRef) {
      listener.enterWindowRef(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitWindowRef) {
      listener.exitWindowRef(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitWindowRef) {
      return visitor.visitWindowRef(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class WindowDefContext extends WindowSpecContext {
  public _expression!: ExpressionContext;
  public _partition: ExpressionContext[] = [];
  public CLUSTER(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.CLUSTER, 0);
  }
  public BY(): TerminalNode[];
  public BY(i: number): TerminalNode;
  public BY(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(SqlBaseParser.BY);
    } else {
      return this.getToken(SqlBaseParser.BY, i);
    }
  }
  public expression(): ExpressionContext[];
  public expression(i: number): ExpressionContext;
  public expression(i?: number): ExpressionContext | ExpressionContext[] {
    if (i === undefined) {
      return this.getRuleContexts(ExpressionContext);
    } else {
      return this.getRuleContext(i, ExpressionContext);
    }
  }
  public windowFrame(): WindowFrameContext | undefined {
    return this.tryGetRuleContext(0, WindowFrameContext);
  }
  public sortItem(): SortItemContext[];
  public sortItem(i: number): SortItemContext;
  public sortItem(i?: number): SortItemContext | SortItemContext[] {
    if (i === undefined) {
      return this.getRuleContexts(SortItemContext);
    } else {
      return this.getRuleContext(i, SortItemContext);
    }
  }
  public PARTITION(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.PARTITION, 0);
  }
  public DISTRIBUTE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DISTRIBUTE, 0);
  }
  public ORDER(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ORDER, 0);
  }
  public SORT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.SORT, 0);
  }
  constructor(ctx: WindowSpecContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterWindowDef) {
      listener.enterWindowDef(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitWindowDef) {
      listener.exitWindowDef(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitWindowDef) {
      return visitor.visitWindowDef(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class WindowFrameContext extends ParserRuleContext {
  public _frameType!: Token;
  public _startBound!: FrameBoundContext;
  public _endBound!: FrameBoundContext;
  public RANGE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.RANGE, 0);
  }
  public frameBound(): FrameBoundContext[];
  public frameBound(i: number): FrameBoundContext;
  public frameBound(i?: number): FrameBoundContext | FrameBoundContext[] {
    if (i === undefined) {
      return this.getRuleContexts(FrameBoundContext);
    } else {
      return this.getRuleContext(i, FrameBoundContext);
    }
  }
  public ROWS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ROWS, 0);
  }
  public BETWEEN(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.BETWEEN, 0);
  }
  public AND(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.AND, 0);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_windowFrame;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterWindowFrame) {
      listener.enterWindowFrame(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitWindowFrame) {
      listener.exitWindowFrame(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitWindowFrame) {
      return visitor.visitWindowFrame(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class FrameBoundContext extends ParserRuleContext {
  public _boundType!: Token;
  public UNBOUNDED(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.UNBOUNDED, 0);
  }
  public PRECEDING(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.PRECEDING, 0);
  }
  public FOLLOWING(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.FOLLOWING, 0);
  }
  public ROW(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ROW, 0);
  }
  public CURRENT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.CURRENT, 0);
  }
  public expression(): ExpressionContext | undefined {
    return this.tryGetRuleContext(0, ExpressionContext);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_frameBound;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterFrameBound) {
      listener.enterFrameBound(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitFrameBound) {
      listener.exitFrameBound(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitFrameBound) {
      return visitor.visitFrameBound(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class QualifiedNameListContext extends ParserRuleContext {
  public qualifiedName(): QualifiedNameContext[];
  public qualifiedName(i: number): QualifiedNameContext;
  public qualifiedName(i?: number): QualifiedNameContext | QualifiedNameContext[] {
    if (i === undefined) {
      return this.getRuleContexts(QualifiedNameContext);
    } else {
      return this.getRuleContext(i, QualifiedNameContext);
    }
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_qualifiedNameList;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterQualifiedNameList) {
      listener.enterQualifiedNameList(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitQualifiedNameList) {
      listener.exitQualifiedNameList(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitQualifiedNameList) {
      return visitor.visitQualifiedNameList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class FunctionNameContext extends ParserRuleContext {
  public qualifiedName(): QualifiedNameContext | undefined {
    return this.tryGetRuleContext(0, QualifiedNameContext);
  }
  public FILTER(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.FILTER, 0);
  }
  public LEFT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.LEFT, 0);
  }
  public RIGHT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.RIGHT, 0);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_functionName;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterFunctionName) {
      listener.enterFunctionName(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitFunctionName) {
      listener.exitFunctionName(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitFunctionName) {
      return visitor.visitFunctionName(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class QualifiedNameContext extends ParserRuleContext {
  public identifier(): IdentifierContext[];
  public identifier(i: number): IdentifierContext;
  public identifier(i?: number): IdentifierContext | IdentifierContext[] {
    if (i === undefined) {
      return this.getRuleContexts(IdentifierContext);
    } else {
      return this.getRuleContext(i, IdentifierContext);
    }
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_qualifiedName;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterQualifiedName) {
      listener.enterQualifiedName(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitQualifiedName) {
      listener.exitQualifiedName(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitQualifiedName) {
      return visitor.visitQualifiedName(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class ErrorCapturingIdentifierContext extends ParserRuleContext {
  public identifier(): IdentifierContext {
    return this.getRuleContext(0, IdentifierContext);
  }
  public errorCapturingIdentifierExtra(): ErrorCapturingIdentifierExtraContext {
    return this.getRuleContext(0, ErrorCapturingIdentifierExtraContext);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_errorCapturingIdentifier;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterErrorCapturingIdentifier) {
      listener.enterErrorCapturingIdentifier(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitErrorCapturingIdentifier) {
      listener.exitErrorCapturingIdentifier(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitErrorCapturingIdentifier) {
      return visitor.visitErrorCapturingIdentifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class ErrorCapturingIdentifierExtraContext extends ParserRuleContext {
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_errorCapturingIdentifierExtra;
  }
  public copyFrom(ctx: ErrorCapturingIdentifierExtraContext): void {
    super.copyFrom(ctx);
  }
}
export class ErrorIdentContext extends ErrorCapturingIdentifierExtraContext {
  public MINUS(): TerminalNode[];
  public MINUS(i: number): TerminalNode;
  public MINUS(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(SqlBaseParser.MINUS);
    } else {
      return this.getToken(SqlBaseParser.MINUS, i);
    }
  }
  public identifier(): IdentifierContext[];
  public identifier(i: number): IdentifierContext;
  public identifier(i?: number): IdentifierContext | IdentifierContext[] {
    if (i === undefined) {
      return this.getRuleContexts(IdentifierContext);
    } else {
      return this.getRuleContext(i, IdentifierContext);
    }
  }
  constructor(ctx: ErrorCapturingIdentifierExtraContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterErrorIdent) {
      listener.enterErrorIdent(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitErrorIdent) {
      listener.exitErrorIdent(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitErrorIdent) {
      return visitor.visitErrorIdent(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class RealIdentContext extends ErrorCapturingIdentifierExtraContext {
  constructor(ctx: ErrorCapturingIdentifierExtraContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterRealIdent) {
      listener.enterRealIdent(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitRealIdent) {
      listener.exitRealIdent(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitRealIdent) {
      return visitor.visitRealIdent(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class IdentifierContext extends ParserRuleContext {
  public strictIdentifier(): StrictIdentifierContext | undefined {
    return this.tryGetRuleContext(0, StrictIdentifierContext);
  }
  public strictNonReserved(): StrictNonReservedContext | undefined {
    return this.tryGetRuleContext(0, StrictNonReservedContext);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_identifier;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterIdentifier) {
      listener.enterIdentifier(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitIdentifier) {
      listener.exitIdentifier(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitIdentifier) {
      return visitor.visitIdentifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class StrictIdentifierContext extends ParserRuleContext {
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_strictIdentifier;
  }
  public copyFrom(ctx: StrictIdentifierContext): void {
    super.copyFrom(ctx);
  }
}
export class UnquotedIdentifierContext extends StrictIdentifierContext {
  public IDENTIFIER(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.IDENTIFIER, 0);
  }
  public ansiNonReserved(): AnsiNonReservedContext | undefined {
    return this.tryGetRuleContext(0, AnsiNonReservedContext);
  }
  public nonReserved(): NonReservedContext | undefined {
    return this.tryGetRuleContext(0, NonReservedContext);
  }
  constructor(ctx: StrictIdentifierContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterUnquotedIdentifier) {
      listener.enterUnquotedIdentifier(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitUnquotedIdentifier) {
      listener.exitUnquotedIdentifier(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitUnquotedIdentifier) {
      return visitor.visitUnquotedIdentifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class QuotedIdentifierAlternativeContext extends StrictIdentifierContext {
  public quotedIdentifier(): QuotedIdentifierContext {
    return this.getRuleContext(0, QuotedIdentifierContext);
  }
  constructor(ctx: StrictIdentifierContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterQuotedIdentifierAlternative) {
      listener.enterQuotedIdentifierAlternative(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitQuotedIdentifierAlternative) {
      listener.exitQuotedIdentifierAlternative(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitQuotedIdentifierAlternative) {
      return visitor.visitQuotedIdentifierAlternative(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class QuotedIdentifierContext extends ParserRuleContext {
  public BACKQUOTED_IDENTIFIER(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.BACKQUOTED_IDENTIFIER, 0);
  }
  public DOUBLEQUOTED_IDENTIFIER(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DOUBLEQUOTED_IDENTIFIER, 0);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_quotedIdentifier;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterQuotedIdentifier) {
      listener.enterQuotedIdentifier(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitQuotedIdentifier) {
      listener.exitQuotedIdentifier(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitQuotedIdentifier) {
      return visitor.visitQuotedIdentifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class NumberContext extends ParserRuleContext {
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_number;
  }
  public copyFrom(ctx: NumberContext): void {
    super.copyFrom(ctx);
  }
}
export class ExponentLiteralContext extends NumberContext {
  public EXPONENT_VALUE(): TerminalNode {
    return this.getToken(SqlBaseParser.EXPONENT_VALUE, 0);
  }
  public MINUS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.MINUS, 0);
  }
  constructor(ctx: NumberContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterExponentLiteral) {
      listener.enterExponentLiteral(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitExponentLiteral) {
      listener.exitExponentLiteral(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitExponentLiteral) {
      return visitor.visitExponentLiteral(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class DecimalLiteralContext extends NumberContext {
  public DECIMAL_VALUE(): TerminalNode {
    return this.getToken(SqlBaseParser.DECIMAL_VALUE, 0);
  }
  public MINUS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.MINUS, 0);
  }
  constructor(ctx: NumberContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterDecimalLiteral) {
      listener.enterDecimalLiteral(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitDecimalLiteral) {
      listener.exitDecimalLiteral(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitDecimalLiteral) {
      return visitor.visitDecimalLiteral(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class LegacyDecimalLiteralContext extends NumberContext {
  public EXPONENT_VALUE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.EXPONENT_VALUE, 0);
  }
  public DECIMAL_VALUE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DECIMAL_VALUE, 0);
  }
  public MINUS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.MINUS, 0);
  }
  constructor(ctx: NumberContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterLegacyDecimalLiteral) {
      listener.enterLegacyDecimalLiteral(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitLegacyDecimalLiteral) {
      listener.exitLegacyDecimalLiteral(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitLegacyDecimalLiteral) {
      return visitor.visitLegacyDecimalLiteral(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class IntegerLiteralContext extends NumberContext {
  public INTEGER_VALUE(): TerminalNode {
    return this.getToken(SqlBaseParser.INTEGER_VALUE, 0);
  }
  public MINUS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.MINUS, 0);
  }
  constructor(ctx: NumberContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterIntegerLiteral) {
      listener.enterIntegerLiteral(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitIntegerLiteral) {
      listener.exitIntegerLiteral(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitIntegerLiteral) {
      return visitor.visitIntegerLiteral(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class BigIntLiteralContext extends NumberContext {
  public BIGINT_LITERAL(): TerminalNode {
    return this.getToken(SqlBaseParser.BIGINT_LITERAL, 0);
  }
  public MINUS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.MINUS, 0);
  }
  constructor(ctx: NumberContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterBigIntLiteral) {
      listener.enterBigIntLiteral(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitBigIntLiteral) {
      listener.exitBigIntLiteral(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitBigIntLiteral) {
      return visitor.visitBigIntLiteral(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class SmallIntLiteralContext extends NumberContext {
  public SMALLINT_LITERAL(): TerminalNode {
    return this.getToken(SqlBaseParser.SMALLINT_LITERAL, 0);
  }
  public MINUS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.MINUS, 0);
  }
  constructor(ctx: NumberContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterSmallIntLiteral) {
      listener.enterSmallIntLiteral(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitSmallIntLiteral) {
      listener.exitSmallIntLiteral(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitSmallIntLiteral) {
      return visitor.visitSmallIntLiteral(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class TinyIntLiteralContext extends NumberContext {
  public TINYINT_LITERAL(): TerminalNode {
    return this.getToken(SqlBaseParser.TINYINT_LITERAL, 0);
  }
  public MINUS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.MINUS, 0);
  }
  constructor(ctx: NumberContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterTinyIntLiteral) {
      listener.enterTinyIntLiteral(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitTinyIntLiteral) {
      listener.exitTinyIntLiteral(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitTinyIntLiteral) {
      return visitor.visitTinyIntLiteral(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class DoubleLiteralContext extends NumberContext {
  public DOUBLE_LITERAL(): TerminalNode {
    return this.getToken(SqlBaseParser.DOUBLE_LITERAL, 0);
  }
  public MINUS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.MINUS, 0);
  }
  constructor(ctx: NumberContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterDoubleLiteral) {
      listener.enterDoubleLiteral(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitDoubleLiteral) {
      listener.exitDoubleLiteral(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitDoubleLiteral) {
      return visitor.visitDoubleLiteral(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class FloatLiteralContext extends NumberContext {
  public FLOAT_LITERAL(): TerminalNode {
    return this.getToken(SqlBaseParser.FLOAT_LITERAL, 0);
  }
  public MINUS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.MINUS, 0);
  }
  constructor(ctx: NumberContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterFloatLiteral) {
      listener.enterFloatLiteral(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitFloatLiteral) {
      listener.exitFloatLiteral(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitFloatLiteral) {
      return visitor.visitFloatLiteral(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class BigDecimalLiteralContext extends NumberContext {
  public BIGDECIMAL_LITERAL(): TerminalNode {
    return this.getToken(SqlBaseParser.BIGDECIMAL_LITERAL, 0);
  }
  public MINUS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.MINUS, 0);
  }
  constructor(ctx: NumberContext) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterBigDecimalLiteral) {
      listener.enterBigDecimalLiteral(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitBigDecimalLiteral) {
      listener.exitBigDecimalLiteral(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitBigDecimalLiteral) {
      return visitor.visitBigDecimalLiteral(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class AlterColumnActionContext extends ParserRuleContext {
  public _setOrDrop!: Token;
  public TYPE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.TYPE, 0);
  }
  public dataType(): DataTypeContext | undefined {
    return this.tryGetRuleContext(0, DataTypeContext);
  }
  public commentSpec(): CommentSpecContext | undefined {
    return this.tryGetRuleContext(0, CommentSpecContext);
  }
  public colPosition(): ColPositionContext | undefined {
    return this.tryGetRuleContext(0, ColPositionContext);
  }
  public NOT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.NOT, 0);
  }
  public NULL(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.NULL, 0);
  }
  public SET(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.SET, 0);
  }
  public DROP(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DROP, 0);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_alterColumnAction;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterAlterColumnAction) {
      listener.enterAlterColumnAction(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitAlterColumnAction) {
      listener.exitAlterColumnAction(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitAlterColumnAction) {
      return visitor.visitAlterColumnAction(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class AnsiNonReservedContext extends ParserRuleContext {
  public ADD(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ADD, 0);
  }
  public AFTER(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.AFTER, 0);
  }
  public ALTER(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ALTER, 0);
  }
  public ANALYZE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ANALYZE, 0);
  }
  public ANTI(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ANTI, 0);
  }
  public ARCHIVE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ARCHIVE, 0);
  }
  public ARRAY(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ARRAY, 0);
  }
  public ASC(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ASC, 0);
  }
  public AT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.AT, 0);
  }
  public BETWEEN(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.BETWEEN, 0);
  }
  public BUCKET(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.BUCKET, 0);
  }
  public BUCKETS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.BUCKETS, 0);
  }
  public BY(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.BY, 0);
  }
  public CACHE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.CACHE, 0);
  }
  public CASCADE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.CASCADE, 0);
  }
  public CHANGE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.CHANGE, 0);
  }
  public CLEAR(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.CLEAR, 0);
  }
  public CLUSTER(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.CLUSTER, 0);
  }
  public CLUSTERED(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.CLUSTERED, 0);
  }
  public CODEGEN(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.CODEGEN, 0);
  }
  public COLLECTION(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.COLLECTION, 0);
  }
  public COLUMNS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.COLUMNS, 0);
  }
  public COMMENT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.COMMENT, 0);
  }
  public COMMIT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.COMMIT, 0);
  }
  public COMPACT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.COMPACT, 0);
  }
  public COMPACTIONS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.COMPACTIONS, 0);
  }
  public COMPUTE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.COMPUTE, 0);
  }
  public CONCATENATE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.CONCATENATE, 0);
  }
  public COST(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.COST, 0);
  }
  public CUBE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.CUBE, 0);
  }
  public CURRENT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.CURRENT, 0);
  }
  public DATA(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DATA, 0);
  }
  public DATABASE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DATABASE, 0);
  }
  public DATABASES(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DATABASES, 0);
  }
  public DAY(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DAY, 0);
  }
  public DBPROPERTIES(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DBPROPERTIES, 0);
  }
  public DEFINED(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DEFINED, 0);
  }
  public DELETE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DELETE, 0);
  }
  public DELIMITED(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DELIMITED, 0);
  }
  public DESC(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DESC, 0);
  }
  public DESCRIBE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DESCRIBE, 0);
  }
  public DFS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DFS, 0);
  }
  public DIRECTORIES(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DIRECTORIES, 0);
  }
  public DIRECTORY(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DIRECTORY, 0);
  }
  public DISTRIBUTE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DISTRIBUTE, 0);
  }
  public DIV(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DIV, 0);
  }
  public DROP(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DROP, 0);
  }
  public ESCAPED(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ESCAPED, 0);
  }
  public EXCHANGE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.EXCHANGE, 0);
  }
  public EXISTS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.EXISTS, 0);
  }
  public EXPLAIN(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.EXPLAIN, 0);
  }
  public EXPORT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.EXPORT, 0);
  }
  public EXTENDED(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.EXTENDED, 0);
  }
  public EXTERNAL(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.EXTERNAL, 0);
  }
  public EXTRACT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.EXTRACT, 0);
  }
  public FIELDS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.FIELDS, 0);
  }
  public FILEFORMAT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.FILEFORMAT, 0);
  }
  public FIRST(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.FIRST, 0);
  }
  public FOLLOWING(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.FOLLOWING, 0);
  }
  public FORMAT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.FORMAT, 0);
  }
  public FORMATTED(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.FORMATTED, 0);
  }
  public FUNCTION(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.FUNCTION, 0);
  }
  public FUNCTIONS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.FUNCTIONS, 0);
  }
  public GLOBAL(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.GLOBAL, 0);
  }
  public GROUPING(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.GROUPING, 0);
  }
  public HOUR(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.HOUR, 0);
  }
  public IF(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.IF, 0);
  }
  public IGNORE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.IGNORE, 0);
  }
  public IMPORT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.IMPORT, 0);
  }
  public INDEX(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.INDEX, 0);
  }
  public INDEXES(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.INDEXES, 0);
  }
  public INPATH(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.INPATH, 0);
  }
  public INPUTFORMAT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.INPUTFORMAT, 0);
  }
  public INSERT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.INSERT, 0);
  }
  public INTERVAL(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.INTERVAL, 0);
  }
  public ITEMS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ITEMS, 0);
  }
  public KEYS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.KEYS, 0);
  }
  public LAST(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.LAST, 0);
  }
  public LAZY(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.LAZY, 0);
  }
  public LIKE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.LIKE, 0);
  }
  public LIMIT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.LIMIT, 0);
  }
  public LINES(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.LINES, 0);
  }
  public LIST(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.LIST, 0);
  }
  public LOAD(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.LOAD, 0);
  }
  public LOCAL(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.LOCAL, 0);
  }
  public LOCATION(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.LOCATION, 0);
  }
  public LOCK(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.LOCK, 0);
  }
  public LOCKS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.LOCKS, 0);
  }
  public LOGICAL(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.LOGICAL, 0);
  }
  public MACRO(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.MACRO, 0);
  }
  public MAP(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.MAP, 0);
  }
  public MATCHED(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.MATCHED, 0);
  }
  public MERGE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.MERGE, 0);
  }
  public MINUTE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.MINUTE, 0);
  }
  public MONTH(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.MONTH, 0);
  }
  public MSCK(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.MSCK, 0);
  }
  public NAMESPACE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.NAMESPACE, 0);
  }
  public NAMESPACES(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.NAMESPACES, 0);
  }
  public NO(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.NO, 0);
  }
  public NULLS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.NULLS, 0);
  }
  public OF(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.OF, 0);
  }
  public OPTION(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.OPTION, 0);
  }
  public OPTIONS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.OPTIONS, 0);
  }
  public OUT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.OUT, 0);
  }
  public OUTPUTFORMAT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.OUTPUTFORMAT, 0);
  }
  public OVER(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.OVER, 0);
  }
  public OVERLAY(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.OVERLAY, 0);
  }
  public OVERWRITE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.OVERWRITE, 0);
  }
  public PARTITION(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.PARTITION, 0);
  }
  public PARTITIONED(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.PARTITIONED, 0);
  }
  public PARTITIONS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.PARTITIONS, 0);
  }
  public PERCENTLIT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.PERCENTLIT, 0);
  }
  public PIVOT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.PIVOT, 0);
  }
  public PLACING(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.PLACING, 0);
  }
  public POSITION(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.POSITION, 0);
  }
  public PRECEDING(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.PRECEDING, 0);
  }
  public PRINCIPALS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.PRINCIPALS, 0);
  }
  public PROPERTIES(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.PROPERTIES, 0);
  }
  public PURGE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.PURGE, 0);
  }
  public QUERY(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.QUERY, 0);
  }
  public RANGE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.RANGE, 0);
  }
  public RECORDREADER(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.RECORDREADER, 0);
  }
  public RECORDWRITER(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.RECORDWRITER, 0);
  }
  public RECOVER(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.RECOVER, 0);
  }
  public REDUCE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.REDUCE, 0);
  }
  public REFRESH(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.REFRESH, 0);
  }
  public RENAME(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.RENAME, 0);
  }
  public REPAIR(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.REPAIR, 0);
  }
  public REPLACE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.REPLACE, 0);
  }
  public RESET(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.RESET, 0);
  }
  public RESPECT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.RESPECT, 0);
  }
  public RESTRICT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.RESTRICT, 0);
  }
  public REVOKE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.REVOKE, 0);
  }
  public RLIKE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.RLIKE, 0);
  }
  public ROLE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ROLE, 0);
  }
  public ROLES(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ROLES, 0);
  }
  public ROLLBACK(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ROLLBACK, 0);
  }
  public ROLLUP(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ROLLUP, 0);
  }
  public ROW(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ROW, 0);
  }
  public ROWS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ROWS, 0);
  }
  public SCHEMA(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.SCHEMA, 0);
  }
  public SECOND(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.SECOND, 0);
  }
  public SEMI(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.SEMI, 0);
  }
  public SEPARATED(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.SEPARATED, 0);
  }
  public SERDE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.SERDE, 0);
  }
  public SERDEPROPERTIES(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.SERDEPROPERTIES, 0);
  }
  public SET(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.SET, 0);
  }
  public SETMINUS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.SETMINUS, 0);
  }
  public SETS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.SETS, 0);
  }
  public SHOW(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.SHOW, 0);
  }
  public SKEWED(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.SKEWED, 0);
  }
  public SORT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.SORT, 0);
  }
  public SORTED(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.SORTED, 0);
  }
  public START(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.START, 0);
  }
  public STATISTICS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.STATISTICS, 0);
  }
  public STORED(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.STORED, 0);
  }
  public STRATIFY(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.STRATIFY, 0);
  }
  public STRUCT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.STRUCT, 0);
  }
  public SUBSTR(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.SUBSTR, 0);
  }
  public SUBSTRING(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.SUBSTRING, 0);
  }
  public SYNC(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.SYNC, 0);
  }
  public TABLES(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.TABLES, 0);
  }
  public TABLESAMPLE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.TABLESAMPLE, 0);
  }
  public TBLPROPERTIES(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.TBLPROPERTIES, 0);
  }
  public TEMPORARY(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.TEMPORARY, 0);
  }
  public TERMINATED(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.TERMINATED, 0);
  }
  public TOUCH(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.TOUCH, 0);
  }
  public TRANSACTION(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.TRANSACTION, 0);
  }
  public TRANSACTIONS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.TRANSACTIONS, 0);
  }
  public TRANSFORM(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.TRANSFORM, 0);
  }
  public TRIM(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.TRIM, 0);
  }
  public TRUE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.TRUE, 0);
  }
  public TRUNCATE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.TRUNCATE, 0);
  }
  public TRY_CAST(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.TRY_CAST, 0);
  }
  public TYPE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.TYPE, 0);
  }
  public UNARCHIVE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.UNARCHIVE, 0);
  }
  public UNBOUNDED(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.UNBOUNDED, 0);
  }
  public UNCACHE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.UNCACHE, 0);
  }
  public UNLOCK(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.UNLOCK, 0);
  }
  public UNSET(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.UNSET, 0);
  }
  public UPDATE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.UPDATE, 0);
  }
  public USE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.USE, 0);
  }
  public VALUES(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.VALUES, 0);
  }
  public VIEW(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.VIEW, 0);
  }
  public VIEWS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.VIEWS, 0);
  }
  public WINDOW(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.WINDOW, 0);
  }
  public YEAR(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.YEAR, 0);
  }
  public ZONE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ZONE, 0);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_ansiNonReserved;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterAnsiNonReserved) {
      listener.enterAnsiNonReserved(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitAnsiNonReserved) {
      listener.exitAnsiNonReserved(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitAnsiNonReserved) {
      return visitor.visitAnsiNonReserved(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class StrictNonReservedContext extends ParserRuleContext {
  public ANTI(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ANTI, 0);
  }
  public CROSS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.CROSS, 0);
  }
  public EXCEPT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.EXCEPT, 0);
  }
  public FULL(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.FULL, 0);
  }
  public INNER(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.INNER, 0);
  }
  public INTERSECT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.INTERSECT, 0);
  }
  public JOIN(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.JOIN, 0);
  }
  public LATERAL(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.LATERAL, 0);
  }
  public LEFT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.LEFT, 0);
  }
  public NATURAL(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.NATURAL, 0);
  }
  public ON(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ON, 0);
  }
  public RIGHT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.RIGHT, 0);
  }
  public SEMI(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.SEMI, 0);
  }
  public SETMINUS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.SETMINUS, 0);
  }
  public UNION(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.UNION, 0);
  }
  public USING(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.USING, 0);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_strictNonReserved;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterStrictNonReserved) {
      listener.enterStrictNonReserved(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitStrictNonReserved) {
      listener.exitStrictNonReserved(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitStrictNonReserved) {
      return visitor.visitStrictNonReserved(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

export class NonReservedContext extends ParserRuleContext {
  public ADD(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ADD, 0);
  }
  public AFTER(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.AFTER, 0);
  }
  public ALL(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ALL, 0);
  }
  public ALTER(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ALTER, 0);
  }
  public ANALYZE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ANALYZE, 0);
  }
  public AND(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.AND, 0);
  }
  public ANY(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ANY, 0);
  }
  public ARCHIVE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ARCHIVE, 0);
  }
  public ARRAY(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ARRAY, 0);
  }
  public AS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.AS, 0);
  }
  public ASC(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ASC, 0);
  }
  public AT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.AT, 0);
  }
  public AUTHORIZATION(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.AUTHORIZATION, 0);
  }
  public BETWEEN(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.BETWEEN, 0);
  }
  public BOTH(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.BOTH, 0);
  }
  public BUCKET(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.BUCKET, 0);
  }
  public BUCKETS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.BUCKETS, 0);
  }
  public BY(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.BY, 0);
  }
  public CACHE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.CACHE, 0);
  }
  public CASCADE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.CASCADE, 0);
  }
  public CASE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.CASE, 0);
  }
  public CAST(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.CAST, 0);
  }
  public CHANGE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.CHANGE, 0);
  }
  public CHECK(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.CHECK, 0);
  }
  public CLEAR(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.CLEAR, 0);
  }
  public CLUSTER(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.CLUSTER, 0);
  }
  public CLUSTERED(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.CLUSTERED, 0);
  }
  public CODEGEN(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.CODEGEN, 0);
  }
  public COLLATE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.COLLATE, 0);
  }
  public COLLECTION(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.COLLECTION, 0);
  }
  public COLUMN(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.COLUMN, 0);
  }
  public COLUMNS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.COLUMNS, 0);
  }
  public COMMENT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.COMMENT, 0);
  }
  public COMMIT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.COMMIT, 0);
  }
  public COMPACT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.COMPACT, 0);
  }
  public COMPACTIONS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.COMPACTIONS, 0);
  }
  public COMPUTE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.COMPUTE, 0);
  }
  public CONCATENATE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.CONCATENATE, 0);
  }
  public CONSTRAINT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.CONSTRAINT, 0);
  }
  public COST(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.COST, 0);
  }
  public CREATE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.CREATE, 0);
  }
  public CUBE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.CUBE, 0);
  }
  public CURRENT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.CURRENT, 0);
  }
  public CURRENT_DATE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.CURRENT_DATE, 0);
  }
  public CURRENT_TIME(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.CURRENT_TIME, 0);
  }
  public CURRENT_TIMESTAMP(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.CURRENT_TIMESTAMP, 0);
  }
  public CURRENT_USER(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.CURRENT_USER, 0);
  }
  public DATA(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DATA, 0);
  }
  public DATABASE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DATABASE, 0);
  }
  public DATABASES(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DATABASES, 0);
  }
  public DAY(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DAY, 0);
  }
  public DBPROPERTIES(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DBPROPERTIES, 0);
  }
  public DEFINED(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DEFINED, 0);
  }
  public DELETE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DELETE, 0);
  }
  public DELIMITED(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DELIMITED, 0);
  }
  public DESC(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DESC, 0);
  }
  public DESCRIBE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DESCRIBE, 0);
  }
  public DFS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DFS, 0);
  }
  public DIRECTORIES(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DIRECTORIES, 0);
  }
  public DIRECTORY(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DIRECTORY, 0);
  }
  public DISTINCT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DISTINCT, 0);
  }
  public DISTRIBUTE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DISTRIBUTE, 0);
  }
  public DIV(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DIV, 0);
  }
  public DROP(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.DROP, 0);
  }
  public ELSE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ELSE, 0);
  }
  public END(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.END, 0);
  }
  public ESCAPE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ESCAPE, 0);
  }
  public ESCAPED(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ESCAPED, 0);
  }
  public EXCHANGE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.EXCHANGE, 0);
  }
  public EXISTS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.EXISTS, 0);
  }
  public EXPLAIN(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.EXPLAIN, 0);
  }
  public EXPORT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.EXPORT, 0);
  }
  public EXTENDED(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.EXTENDED, 0);
  }
  public EXTERNAL(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.EXTERNAL, 0);
  }
  public EXTRACT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.EXTRACT, 0);
  }
  public FALSE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.FALSE, 0);
  }
  public FETCH(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.FETCH, 0);
  }
  public FILTER(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.FILTER, 0);
  }
  public FIELDS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.FIELDS, 0);
  }
  public FILEFORMAT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.FILEFORMAT, 0);
  }
  public FIRST(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.FIRST, 0);
  }
  public FOLLOWING(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.FOLLOWING, 0);
  }
  public FOR(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.FOR, 0);
  }
  public FOREIGN(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.FOREIGN, 0);
  }
  public FORMAT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.FORMAT, 0);
  }
  public FORMATTED(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.FORMATTED, 0);
  }
  public FROM(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.FROM, 0);
  }
  public FUNCTION(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.FUNCTION, 0);
  }
  public FUNCTIONS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.FUNCTIONS, 0);
  }
  public GLOBAL(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.GLOBAL, 0);
  }
  public GRANT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.GRANT, 0);
  }
  public GROUP(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.GROUP, 0);
  }
  public GROUPING(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.GROUPING, 0);
  }
  public HAVING(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.HAVING, 0);
  }
  public HOUR(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.HOUR, 0);
  }
  public IF(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.IF, 0);
  }
  public IGNORE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.IGNORE, 0);
  }
  public IMPORT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.IMPORT, 0);
  }
  public IN(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.IN, 0);
  }
  public INDEX(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.INDEX, 0);
  }
  public INDEXES(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.INDEXES, 0);
  }
  public INPATH(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.INPATH, 0);
  }
  public INPUTFORMAT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.INPUTFORMAT, 0);
  }
  public INSERT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.INSERT, 0);
  }
  public INTERVAL(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.INTERVAL, 0);
  }
  public INTO(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.INTO, 0);
  }
  public IS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.IS, 0);
  }
  public ITEMS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ITEMS, 0);
  }
  public KEYS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.KEYS, 0);
  }
  public LAST(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.LAST, 0);
  }
  public LAZY(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.LAZY, 0);
  }
  public LEADING(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.LEADING, 0);
  }
  public LIKE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.LIKE, 0);
  }
  public LIMIT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.LIMIT, 0);
  }
  public LINES(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.LINES, 0);
  }
  public LIST(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.LIST, 0);
  }
  public LOAD(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.LOAD, 0);
  }
  public LOCAL(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.LOCAL, 0);
  }
  public LOCATION(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.LOCATION, 0);
  }
  public LOCK(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.LOCK, 0);
  }
  public LOCKS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.LOCKS, 0);
  }
  public LOGICAL(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.LOGICAL, 0);
  }
  public MACRO(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.MACRO, 0);
  }
  public MAP(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.MAP, 0);
  }
  public MATCHED(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.MATCHED, 0);
  }
  public MERGE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.MERGE, 0);
  }
  public MINUTE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.MINUTE, 0);
  }
  public MONTH(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.MONTH, 0);
  }
  public MSCK(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.MSCK, 0);
  }
  public NAMESPACE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.NAMESPACE, 0);
  }
  public NAMESPACES(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.NAMESPACES, 0);
  }
  public NO(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.NO, 0);
  }
  public NOT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.NOT, 0);
  }
  public NULL(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.NULL, 0);
  }
  public NULLS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.NULLS, 0);
  }
  public OF(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.OF, 0);
  }
  public ONLY(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ONLY, 0);
  }
  public OPTION(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.OPTION, 0);
  }
  public OPTIONS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.OPTIONS, 0);
  }
  public OR(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.OR, 0);
  }
  public ORDER(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ORDER, 0);
  }
  public OUT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.OUT, 0);
  }
  public OUTER(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.OUTER, 0);
  }
  public OUTPUTFORMAT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.OUTPUTFORMAT, 0);
  }
  public OVER(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.OVER, 0);
  }
  public OVERLAPS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.OVERLAPS, 0);
  }
  public OVERLAY(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.OVERLAY, 0);
  }
  public OVERWRITE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.OVERWRITE, 0);
  }
  public PARTITION(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.PARTITION, 0);
  }
  public PARTITIONED(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.PARTITIONED, 0);
  }
  public PARTITIONS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.PARTITIONS, 0);
  }
  public PERCENTLIT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.PERCENTLIT, 0);
  }
  public PIVOT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.PIVOT, 0);
  }
  public PLACING(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.PLACING, 0);
  }
  public POSITION(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.POSITION, 0);
  }
  public PRECEDING(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.PRECEDING, 0);
  }
  public PRIMARY(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.PRIMARY, 0);
  }
  public PRINCIPALS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.PRINCIPALS, 0);
  }
  public PROPERTIES(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.PROPERTIES, 0);
  }
  public PURGE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.PURGE, 0);
  }
  public QUERY(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.QUERY, 0);
  }
  public RANGE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.RANGE, 0);
  }
  public RECORDREADER(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.RECORDREADER, 0);
  }
  public RECORDWRITER(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.RECORDWRITER, 0);
  }
  public RECOVER(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.RECOVER, 0);
  }
  public REDUCE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.REDUCE, 0);
  }
  public REFERENCES(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.REFERENCES, 0);
  }
  public REFRESH(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.REFRESH, 0);
  }
  public RENAME(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.RENAME, 0);
  }
  public REPAIR(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.REPAIR, 0);
  }
  public REPLACE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.REPLACE, 0);
  }
  public RESET(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.RESET, 0);
  }
  public RESPECT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.RESPECT, 0);
  }
  public RESTRICT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.RESTRICT, 0);
  }
  public REVOKE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.REVOKE, 0);
  }
  public RLIKE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.RLIKE, 0);
  }
  public ROLE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ROLE, 0);
  }
  public ROLES(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ROLES, 0);
  }
  public ROLLBACK(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ROLLBACK, 0);
  }
  public ROLLUP(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ROLLUP, 0);
  }
  public ROW(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ROW, 0);
  }
  public ROWS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ROWS, 0);
  }
  public SCHEMA(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.SCHEMA, 0);
  }
  public SECOND(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.SECOND, 0);
  }
  public SELECT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.SELECT, 0);
  }
  public SEPARATED(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.SEPARATED, 0);
  }
  public SERDE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.SERDE, 0);
  }
  public SERDEPROPERTIES(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.SERDEPROPERTIES, 0);
  }
  public SESSION_USER(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.SESSION_USER, 0);
  }
  public SET(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.SET, 0);
  }
  public SETS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.SETS, 0);
  }
  public SHOW(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.SHOW, 0);
  }
  public SKEWED(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.SKEWED, 0);
  }
  public SOME(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.SOME, 0);
  }
  public SORT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.SORT, 0);
  }
  public SORTED(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.SORTED, 0);
  }
  public START(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.START, 0);
  }
  public STATISTICS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.STATISTICS, 0);
  }
  public STORED(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.STORED, 0);
  }
  public STRATIFY(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.STRATIFY, 0);
  }
  public STRUCT(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.STRUCT, 0);
  }
  public SUBSTR(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.SUBSTR, 0);
  }
  public SUBSTRING(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.SUBSTRING, 0);
  }
  public SYNC(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.SYNC, 0);
  }
  public TABLE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.TABLE, 0);
  }
  public TABLES(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.TABLES, 0);
  }
  public TABLESAMPLE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.TABLESAMPLE, 0);
  }
  public TBLPROPERTIES(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.TBLPROPERTIES, 0);
  }
  public TEMPORARY(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.TEMPORARY, 0);
  }
  public TERMINATED(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.TERMINATED, 0);
  }
  public THEN(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.THEN, 0);
  }
  public TIME(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.TIME, 0);
  }
  public TO(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.TO, 0);
  }
  public TOUCH(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.TOUCH, 0);
  }
  public TRAILING(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.TRAILING, 0);
  }
  public TRANSACTION(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.TRANSACTION, 0);
  }
  public TRANSACTIONS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.TRANSACTIONS, 0);
  }
  public TRANSFORM(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.TRANSFORM, 0);
  }
  public TRIM(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.TRIM, 0);
  }
  public TRUE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.TRUE, 0);
  }
  public TRUNCATE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.TRUNCATE, 0);
  }
  public TRY_CAST(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.TRY_CAST, 0);
  }
  public TYPE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.TYPE, 0);
  }
  public UNARCHIVE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.UNARCHIVE, 0);
  }
  public UNBOUNDED(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.UNBOUNDED, 0);
  }
  public UNCACHE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.UNCACHE, 0);
  }
  public UNIQUE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.UNIQUE, 0);
  }
  public UNKNOWN(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.UNKNOWN, 0);
  }
  public UNLOCK(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.UNLOCK, 0);
  }
  public UNSET(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.UNSET, 0);
  }
  public UPDATE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.UPDATE, 0);
  }
  public USE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.USE, 0);
  }
  public USER(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.USER, 0);
  }
  public VALUES(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.VALUES, 0);
  }
  public VIEW(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.VIEW, 0);
  }
  public VIEWS(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.VIEWS, 0);
  }
  public WHEN(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.WHEN, 0);
  }
  public WHERE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.WHERE, 0);
  }
  public WINDOW(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.WINDOW, 0);
  }
  public WITH(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.WITH, 0);
  }
  public YEAR(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.YEAR, 0);
  }
  public ZONE(): TerminalNode | undefined {
    return this.tryGetToken(SqlBaseParser.ZONE, 0);
  }
  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }
  // @Override
  public get ruleIndex(): number {
    return SqlBaseParser.RULE_nonReserved;
  }
  // @Override
  public enterRule(listener: SqlBaseListener): void {
    if (listener.enterNonReserved) {
      listener.enterNonReserved(this);
    }
  }
  // @Override
  public exitRule(listener: SqlBaseListener): void {
    if (listener.exitNonReserved) {
      listener.exitNonReserved(this);
    }
  }
  // @Override
  public accept<Result>(visitor: SqlBaseVisitor<Result>): Result {
    if (visitor.visitNonReserved) {
      return visitor.visitNonReserved(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
